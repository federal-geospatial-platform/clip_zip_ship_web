/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var e={991:(e,t,r)=>{r.d(t,{Z:()=>c});var n=r(537),o=r.n(n),i=r(645),a=r.n(i)()(o());a.push([e.id,".czs-panel{position:relative}.accordion-group{font-size:.9rem;margin-bottom:10px}.accordion-group .MuiTypography-root{font-size:inherit}.layer-option{position:relative;display:inline-block}.layer-order-layers div{display:inline-block}.MuiAccordionSummary-content{padding-left:10px}.MuiAccordion-root{background-color:rgba(0,95,203,.3215686275)}.czs-panel .MuiListItem-root,.czs-panel .MuiListItem-root:hover,.MuiMenuItem-root.MuiMenuItem-gutters{color:#000}.accordion-theme ul{cursor:pointer}.loading-spinner-container{position:absolute;top:40px;right:40px}.loading-spinner-container .loading-spinner .MuiCircularProgress-root{width:60px !important;height:60px !important}.loading-collections .MuiCircularProgress-root{color:rgba(0,95,203,.666)}.SnackbarItem-contentRoot:not(.SnackbarItem-variantError):not(.SnackbarItem-variantWarning):not(.SnackbarItem-variantInfo):not(.SnackbarItem-variantSuccess){background-color:#e4b152 !important}.layer-order-layers.loading{cursor:default;opacity:.4}.layer-order-layers.loading a{pointer-events:none}.MuiPaper-root.MuiMenu-paper{background-color:#a1cdff}.layer-options-wrapper{min-width:100px}.layer-option{vertical-align:middle}.layer-option .MuiListItemIcon-root{min-width:inherit}.layer-option img,.czs_menu_options img{height:20px;width:20px;vertical-align:middle;margin:0px 5px 0px 5px}.need-help{background-color:#e4b152}.czs-jobs{position:relative;margin:20px 0px}.czs-jobs a{color:inherit;font-size:1rem}.czs-jobs table{width:100%}.czs-jobs-cell-info a{text-decoration:none}.czs-jobs-cell-info a:hover{text-decoration:underline}.czs-jobs-cell-progress{width:100px}.czs-jobs-cell-spin{width:20px;text-align:right}.czs-jobs-cell-spin img{vertical-align:middle}.czs-jobs .loading-spinner{position:relative;right:0px;background-color:rgba(0,0,0,0)}.czs-jobs .loading-spinner .MuiCircularProgress-root{position:relative;height:20px !important;width:20px !important}.czs-jobs .job-dismissed:hover{text-decoration:none}.czs-email input{padding:10px 10px;font-size:1rem}.btn-extract{margin:20px 0px}.help-text{font-size:smaller;padding:0px 10px}.is-debug{background-color:red}","",{version:3,sources:["webpack://./src/app.scss"],names:[],mappings:"AAAA,WACE,iBAAA,CAGF,iBACE,eAAA,CACA,kBAAA,CAGF,qCACE,iBAAA,CAGF,cACE,iBAAA,CACA,oBAAA,CAEF,wBACE,oBAAA,CAGF,6BACE,iBAAA,CAGF,mBACE,2CAAA,CAGF,sGAGE,UAAA,CAGF,oBACE,cAAA,CAGF,2BACE,iBAAA,CACA,QAAA,CACA,UAAA,CAGF,sEACE,qBAAA,CACA,sBAAA,CAGF,+CACE,yBAAA,CAGF,6JACE,mCAAA,CAGF,4BACE,cAAA,CACA,UAAA,CAEF,8BACE,mBAAA,CAGF,6BACE,wBAAA,CAGF,uBACE,eAAA,CAGF,cACE,qBAAA,CAGF,oCACE,iBAAA,CAGF,wCAEE,WAAA,CACA,UAAA,CACA,qBAAA,CACA,sBAAA,CAGF,WACE,wBAAA,CAGF,UACE,iBAAA,CACA,eAAA,CAGF,YACE,aAAA,CACA,cAAA,CAGF,gBACE,UAAA,CAGF,sBACE,oBAAA,CAEF,4BACE,yBAAA,CAGF,wBACE,WAAA,CAGF,oBACE,UAAA,CACA,gBAAA,CAEF,wBACE,qBAAA,CAGF,2BACE,iBAAA,CACA,SAAA,CACA,8BAAA,CAGF,qDACE,iBAAA,CACA,sBAAA,CACA,qBAAA,CAGF,+BACE,oBAAA,CAGF,iBACE,iBAAA,CACA,cAAA,CAGF,aACE,eAAA,CAGF,WACE,iBAAA,CACA,gBAAA,CAGF,UACE,oBAAA",sourcesContent:[".czs-panel {\n  position: relative;\n}\n\n.accordion-group {\n  font-size: 0.9rem;\n  margin-bottom: 10px;\n}\n\n.accordion-group .MuiTypography-root {\n  font-size: inherit;\n}\n\n.layer-option {\n  position: relative;\n  display: inline-block;\n}\n.layer-order-layers div {\n  display: inline-block;\n}\n\n.MuiAccordionSummary-content {\n  padding-left: 10px;\n}\n\n.MuiAccordion-root {\n  background-color: #005fcb52;\n}\n\n.czs-panel .MuiListItem-root,\n.czs-panel .MuiListItem-root:hover,\n.MuiMenuItem-root.MuiMenuItem-gutters {\n  color: black;\n}\n\n.accordion-theme ul {\n  cursor: pointer;\n}\n\n.loading-spinner-container {\n  position: absolute;\n  top: 40px;\n  right: 40px;\n}\n\n.loading-spinner-container .loading-spinner .MuiCircularProgress-root {\n  width: 60px !important;\n  height: 60px !important;\n}\n\n.loading-collections .MuiCircularProgress-root {\n  color: rgba(0, 95, 203, 0.666);\n}\n\n.SnackbarItem-contentRoot:not(.SnackbarItem-variantError):not(.SnackbarItem-variantWarning):not(.SnackbarItem-variantInfo):not(.SnackbarItem-variantSuccess) {\n  background-color: #e4b152 !important;\n}\n\n.layer-order-layers.loading {\n  cursor: default;\n  opacity: 0.4;\n}\n.layer-order-layers.loading a {\n  pointer-events: none;\n}\n\n.MuiPaper-root.MuiMenu-paper {\n  background-color: #a1cdff;\n}\n\n.layer-options-wrapper {\n  min-width: 100px;\n}\n\n.layer-option {\n  vertical-align: middle;\n}\n\n.layer-option .MuiListItemIcon-root {\n  min-width: inherit;\n}\n\n.layer-option img,\n.czs_menu_options img {\n  height: 20px;\n  width: 20px;\n  vertical-align: middle;\n  margin: 0px 5px 0px 5px;\n}\n\n.need-help {\n  background-color: #e4b152;\n}\n\n.czs-jobs {\n  position: relative;\n  margin: 20px 0px;\n}\n\n.czs-jobs a {\n  color: inherit;\n  font-size: 1rem;\n}\n\n.czs-jobs table {\n  width: 100%;\n}\n\n.czs-jobs-cell-info a {\n  text-decoration: none;\n}\n.czs-jobs-cell-info a:hover {\n  text-decoration: underline;\n}\n\n.czs-jobs-cell-progress {\n  width: 100px;\n}\n\n.czs-jobs-cell-spin {\n  width: 20px;\n  text-align: right;\n}\n.czs-jobs-cell-spin img {\n  vertical-align: middle;\n}\n\n.czs-jobs .loading-spinner {\n  position: relative;\n  right: 0px;\n  background-color: transparent;\n}\n\n.czs-jobs .loading-spinner .MuiCircularProgress-root  {\n  position: relative;\n  height: 20px !important;\n  width: 20px !important;\n}\n\n.czs-jobs .job-dismissed:hover {\n  text-decoration: none;\n}\n\n.czs-email input {\n  padding: 10px 10px;\n  font-size: 1rem;\n}\n\n.btn-extract {\n  margin: 20px 0px;\n}\n\n.help-text {\n  font-size: smaller;\n  padding: 0px 10px;\n}\n\n.is-debug {\n  background-color: red;\n}\n"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(n)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var u=0;u<e.length;u++){var l=[].concat(e[u]);n&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),r&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=r):l[2]=r),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},418:e=>{var t=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var i,a,c=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),s=1;s<arguments.length;s++){for(var u in i=Object(arguments[s]))r.call(i,u)&&(c[u]=i[u]);if(t){a=t(i);for(var l=0;l<a.length;l++)n.call(i,a[l])&&(c[a[l]]=i[a[l]])}}return c}},251:(e,t,r)=>{r(418);var n=r(294),o=60103;if("function"==typeof Symbol&&Symbol.for){var i=Symbol.for;o=i("react.element"),i("react.fragment")}var a=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c=Object.prototype.hasOwnProperty,s={key:!0,ref:!0,__self:!0,__source:!0};function u(e,t,r){var n,i={},u=null,l=null;for(n in void 0!==r&&(u=""+r),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(l=t.ref),t)c.call(t,n)&&!s.hasOwnProperty(n)&&(i[n]=t[n]);if(e&&e.defaultProps)for(n in t=e.defaultProps)void 0===i[n]&&(i[n]=t[n]);return{$$typeof:o,type:e,key:u,ref:l,props:i,_owner:a.current}}t.jsx=u,t.jsxs=u},408:(e,t,r)=>{var n=r(418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,c=60110,s=60112;t.Suspense=60113;var u=60115,l=60116;if("function"==typeof Symbol&&Symbol.for){var p=Symbol.for;o=p("react.element"),i=p("react.portal"),t.Fragment=p("react.fragment"),t.StrictMode=p("react.strict_mode"),t.Profiler=p("react.profiler"),a=p("react.provider"),c=p("react.context"),s=p("react.forward_ref"),t.Suspense=p("react.suspense"),u=p("react.memo"),l=p("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function h(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var d={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function y(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||d}function m(){}function g(e,t,r){this.props=e,this.context=t,this.refs=v,this.updater=r||d}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(h(85));this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},m.prototype=y.prototype;var w=g.prototype=new m;w.constructor=g,n(w,y.prototype),w.isPureReactComponent=!0;var _={current:null},b=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function A(e,t,r){var n,i={},a=null,c=null;if(null!=t)for(n in void 0!==t.ref&&(c=t.ref),void 0!==t.key&&(a=""+t.key),t)b.call(t,n)&&!x.hasOwnProperty(n)&&(i[n]=t[n]);var s=arguments.length-2;if(1===s)i.children=r;else if(1<s){for(var u=Array(s),l=0;l<s;l++)u[l]=arguments[l+2];i.children=u}if(e&&e.defaultProps)for(n in s=e.defaultProps)void 0===i[n]&&(i[n]=s[n]);return{$$typeof:o,type:e,key:a,ref:c,props:i,_owner:_.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function j(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function O(e,t,r,n,a){var c=typeof e;"undefined"!==c&&"boolean"!==c||(e=null);var s=!1;if(null===e)s=!0;else switch(c){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case o:case i:s=!0}}if(s)return a=a(s=e),e=""===n?"."+j(s,0):n,Array.isArray(a)?(r="",null!=e&&(r=e.replace(C,"$&/")+"/"),O(a,t,r,"",(function(e){return e}))):null!=a&&(E(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,r+(!a.key||s&&s.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(s=0,n=""===n?".":n+":",Array.isArray(e))for(var u=0;u<e.length;u++){var l=n+j(c=e[u],u);s+=O(c,t,r,l,a)}else if(l=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof l)for(e=l.call(e),u=0;!(c=e.next()).done;)s+=O(c=c.value,t,r,l=n+j(c,u++),a);else if("object"===c)throw t=""+e,Error(h(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function L(e,t,r){if(null==e)return e;var n=[],o=0;return O(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function S(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var I={current:null};function k(){var e=I.current;if(null===e)throw Error(h(321));return e}var P={ReactCurrentDispatcher:I,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:_,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:L,forEach:function(e,t,r){L(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return L(e,(function(){t++})),t},toArray:function(e){return L(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(h(143));return e}},t.Component=y,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,t.cloneElement=function(e,t,r){if(null==e)throw Error(h(267,e));var i=n({},e.props),a=e.key,c=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(c=t.ref,s=_.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(l in t)b.call(t,l)&&!x.hasOwnProperty(l)&&(i[l]=void 0===t[l]&&void 0!==u?u[l]:t[l])}var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){u=Array(l);for(var p=0;p<l;p++)u[p]=arguments[p+2];i.children=u}return{$$typeof:o,type:e.type,key:a,ref:c,props:i,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:c,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=A,t.createFactory=function(e){var t=A.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:l,_payload:{_status:-1,_result:e},_init:S}},t.memo=function(e,t){return{$$typeof:u,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return k().useCallback(e,t)},t.useContext=function(e,t){return k().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return k().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return k().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return k().useLayoutEffect(e,t)},t.useMemo=function(e,t){return k().useMemo(e,t)},t.useReducer=function(e,t,r){return k().useReducer(e,t,r)},t.useRef=function(e){return k().useRef(e)},t.useState=function(e){return k().useState(e)},t.version="17.0.2"},294:(e,t,r)=>{e.exports=r(408)},893:(e,t,r)=>{e.exports=r(251)},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var i={},a=[],c=0;c<e.length;c++){var s=e[c],u=n.base?s[0]+n.base:s[0],l=i[u]||0,p="".concat(u," ").concat(l);i[u]=l+1;var f=r(p),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(h);else{var d=o(h,n);n.byIndex=c,t.splice(c,0,{identifier:p,updater:d,references:1})}a.push(p)}return a}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var i=n(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=r(i[a]);t[c].references--}for(var s=n(e,o),u=0;u<i.length;u++){var l=r(i[u]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=s}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={id:n,exports:{}};return e[n](i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&!e;)e=n[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.nc=void 0,(()=>{var e=r(893);function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(e,r){for(var n=0;n<r.length;n++){var o=r[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(void 0,i=function(e,r){if("object"!==t(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==t(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o.key),"symbol"===t(i)?i:String(i)),o)}var i}function o(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var a=o((function e(t,r){i(this,e),this.theme=t,this.parents=r})),c=o((function e(t,r,n){i(this,e),this.theme=t,this.parent=r,this.collections=n})),s="czs/engine/ENGINE-LOAD_COLLECTIONS_STARTED",u="czs/engine/ENGINE-LOAD_COLLECTIONS_ENDED",l="czs/engine/ENGINE-LOAD_COLLECTIONS_FEATURES",p="czs/engine/ENGINE-LOAD_COLLECTIONS_COVERAGES",f="czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_STARTED",h="czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_FOOTPRINT",d="czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_FOOTPRINT_NO_GEOM",v="czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_ENDED",y="czs/engine/ENGINE-COLLECTION_CHANGED_STARTED",m="czs/engine/ENGINE-COLLECTION_CHANGED_ENDED",g="czs/engine/ENGINE-EXTRACT_STARTED",w="czs/engine/ENGINE-LAYER_ORDERED",_="czs/engine/ENGINE-ERROR",b="czs/engine/ENGINE_ERROR_ZOOMING_OUTSIDE",x="czs/engine/ENGINE-ERROR_SHOWING_COLLECTION",A="czs/engine/ENGINE-ERROR_EXTRACTING";const E=JSON.parse('{"W":"https://czs-pygeoapi.ddr-stage.services.geo.ca","S":"https://qgis-stage.services.geo.ca/dev/"}');function C(){C=function(){return e};var e={},t=Object.prototype,r=t.hasOwnProperty,n=Object.defineProperty||function(e,t,r){e[t]=r.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,r){return e[t]=r}}function u(e,t,r,o){var i=t&&t.prototype instanceof f?t:f,a=Object.create(i.prototype),c=new j(o||[]);return n(a,"_invoke",{value:b(e,r,c)}),a}function l(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var p={};function f(){}function h(){}function d(){}var v={};s(v,i,(function(){return this}));var y=Object.getPrototypeOf,m=y&&y(y(L([])));m&&m!==t&&r.call(m,i)&&(v=m);var g=d.prototype=f.prototype=Object.create(v);function w(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function o(n,i,a,c){var s=l(e[n],e,i);if("throw"!==s.type){var u=s.arg,p=u.value;return p&&"object"==O(p)&&r.call(p,"__await")?t.resolve(p.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):t.resolve(p).then((function(e){u.value=e,a(u)}),(function(e){return o("throw",e,a,c)}))}c(s.arg)}var i;n(this,"_invoke",{value:function(e,r){function n(){return new t((function(t,n){o(e,r,t,n)}))}return i=i?i.then(n,n):n()}})}function b(e,t,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===p)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var s=l(e,t,r);if("normal"===s.type){if(n=r.done?"completed":"suspendedYield",s.arg===p)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n="completed",r.method="throw",r.arg=s.arg)}}}function x(e,t){var r=t.method,n=e.iterator[r];if(void 0===n)return t.delegate=null,"throw"===r&&e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method)||"return"!==r&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+r+"' method")),p;var o=l(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,p;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,p):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,p)}function A(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function j(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(A,this),this.reset(!0)}function L(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,o=function t(){for(;++n<e.length;)if(r.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:S}}function S(){return{value:void 0,done:!0}}return h.prototype=d,n(g,"constructor",{value:d,configurable:!0}),n(d,"constructor",{value:h,configurable:!0}),h.displayName=s(d,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===h||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,d):(e.__proto__=d,s(e,c,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},w(_.prototype),s(_.prototype,a,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new _(u(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},w(g),s(g,c,"Generator"),s(g,i,(function(){return this})),s(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},e.values=L,j.prototype={constructor:j,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!e)for(var t in this)"t"===t.charAt(0)&&r.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(r,n){return a.type="throw",a.arg=e,t.next=r,n&&(t.method="next",t.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),E(r),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:L(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=void 0),p}},e}function j(e,t,r,n,o,i,a){try{var c=e[i](a),s=c.value}catch(e){return void r(e)}c.done?t(s):Promise.resolve(s).then(n,o)}function O(e){return O="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},O(e)}function L(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,k(n.key),n)}}function S(e,t,r){return t&&L(e.prototype,t),r&&L(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function I(e,t,r){return(t=k(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function k(e){var t=function(e,t){if("object"!==O(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==O(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===O(t)?t:String(t)}var P=S((function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}));I(P,"isLocal",(function(){return"localhost"===window.location.hostname})),I(P,"getPygeoapiHost",(function(){return P.isLocal()?"http://localhost:5000":E.W})),I(P,"getQGISServiceHost",(function(){return E.S})),I(P,"getContentMetadata",(function(e){var t=null;return e.forEach((function(e){"text/html"==e.type&&"canonical"==e.rel&&(t=e)})),t})),I(P,"sortAlphabetically",(function(e,t){return e<t?-1:e>t?1:0})),I(P,"delay",function(){var e,t=(e=C().mark((function e(t){return C().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.abrupt("return",new Promise((function(e){setTimeout(e,t)})));case 1:case"end":return e.stop()}}),e)})),function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){j(i,n,o,a,c,"next",e)}function c(e){j(i,n,o,a,c,"throw",e)}a(void 0)}))});return function(e){return t.apply(this,arguments)}}());const N=JSON.parse('{"czs":{"draw":"Draw extraction area","clear":"Clear extraction area","list_feature_colls":"List of vector collections","list_coverage_colls":"List of raster collections","enter_email":"Enter your email","extract_features":"Extract data","help_title":"Need help?","layer_options":"Options...","zoom_to":"Zoom To","view_capabilities":"View Capabilities","view_metadata":"View Metadata","layer_bring_to_front":"Bring To Front","layer_send_to_back":"Send To Back","success_extraction_completed":"Extraction completed, check your emails!","success_extraction_failed":"Extraction failed","warning_extraction_area_too_big":"Extraction area too big for collection","warning_extraction_area_missing":"Missing an extraction area, only showing the data footprints","error_some_elements_outside":"Some elements were outside map extent limits.","help_text":"Hi,<br/>To submit your dynamic data extraction request, you must meet the following 3 criterias in the order of your choice:<ol><li>Select one or many collections</li><li>Draw an extraction polygon on the map</li><li>Type in your email address</li></ol><br/>For further assistance, contact: <a href=\'mailto:ddr.fgpservices-servicespgf.rdd@aws.nrcan-rncan.cloud\'>ddr.fgpservices-servicespgf.rdd@aws.nrcan-rncan.cloud</a>"}}'),T=JSON.parse('{"czs":{"draw":"Dessiner une aire d\'extraction","clear":"Effacer l\'aire d\'extraction","list_feature_colls":"Liste des collections vectorielles","list_coverage_colls":"Liste des collections matricielles","enter_email":"Entrer votre adresse courriel","extract_features":"Extraire les données","help_title":"Besoin d\'aide?","layer_options":"Options...","zoom_to":"Cadrer la carte","view_capabilities":"Visualiser les capacités","view_metadata":"Visualiser les métadonnées","layer_bring_to_front":"Placer en avant","layer_send_to_back":"Placer en arrière","success_extraction_completed":"Extraction complété, regardez vos courriels!","success_extraction_failed":"Extraction échouée","warning_extraction_area_too_big":"Zone d\'extraction trop grande pour la collection","warning_extraction_area_missing":"Zone d\'extraction manquante, seulement les empreintes des données sont affichés","error_some_elements_outside":"Certains éléments sont en dehors de l\'étendu cartographique.","help_text":"Bonjour,<br/>Pour soumettre votre demande d\'extraction de données dynamique, il suffit de remplir les 3 conditions suivantes dans l\'ordre que vous désirez:<ol><li>Sélectionner une ou plusieurs collections</li><li>Tracer un polygone de découpage sur la carte</li><li>Entrer votre adresse courriel</li></ol><br/>Pour de l\'aide supplémentaire, contactez: <a href=\'mailto:ddr.fgpservices-servicespgf.rdd@aws.nrcan-rncan.cloud\'>ddr.fgpservices-servicespgf.rdd@aws.nrcan-rncan.cloud</a>"}}');function G(){G=function(){return e};var e={},t=Object.prototype,r=t.hasOwnProperty,n=Object.defineProperty||function(e,t,r){e[t]=r.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,r){return e[t]=r}}function u(e,t,r,o){var i=t&&t.prototype instanceof f?t:f,a=Object.create(i.prototype),c=new C(o||[]);return n(a,"_invoke",{value:b(e,r,c)}),a}function l(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var p={};function f(){}function h(){}function d(){}var v={};s(v,i,(function(){return this}));var y=Object.getPrototypeOf,m=y&&y(y(j([])));m&&m!==t&&r.call(m,i)&&(v=m);var g=d.prototype=f.prototype=Object.create(v);function w(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function o(n,i,a,c){var s=l(e[n],e,i);if("throw"!==s.type){var u=s.arg,p=u.value;return p&&"object"==R(p)&&r.call(p,"__await")?t.resolve(p.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):t.resolve(p).then((function(e){u.value=e,a(u)}),(function(e){return o("throw",e,a,c)}))}c(s.arg)}var i;n(this,"_invoke",{value:function(e,r){function n(){return new t((function(t,n){o(e,r,t,n)}))}return i=i?i.then(n,n):n()}})}function b(e,t,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===p)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var s=l(e,t,r);if("normal"===s.type){if(n=r.done?"completed":"suspendedYield",s.arg===p)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n="completed",r.method="throw",r.arg=s.arg)}}}function x(e,t){var r=t.method,n=e.iterator[r];if(void 0===n)return t.delegate=null,"throw"===r&&e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method)||"return"!==r&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+r+"' method")),p;var o=l(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,p;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,p):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,p)}function A(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function C(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(A,this),this.reset(!0)}function j(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,o=function t(){for(;++n<e.length;)if(r.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return h.prototype=d,n(g,"constructor",{value:d,configurable:!0}),n(d,"constructor",{value:h,configurable:!0}),h.displayName=s(d,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===h||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,d):(e.__proto__=d,s(e,c,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},w(_.prototype),s(_.prototype,a,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new _(u(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},w(g),s(g,c,"Generator"),s(g,i,(function(){return this})),s(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},e.values=j,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!e)for(var t in this)"t"===t.charAt(0)&&r.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(r,n){return a.type="throw",a.arg=e,t.next=r,n&&(t.method="next",t.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),E(r),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:j(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=void 0),p}},e}function D(e,t,r,n,o,i,a){try{var c=e[i](a),s=c.value}catch(e){return void r(e)}c.done?t(s):Promise.resolve(s).then(n,o)}function M(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){D(i,n,o,a,c,"next",e)}function c(e){D(i,n,o,a,c,"throw",e)}a(void 0)}))}}function R(e){return R="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},R(e)}function F(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,U(n.key),n)}}function z(e,t,r){return t&&F(e.prototype,t),r&&F(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function B(e,t,r){return(t=U(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function U(e){var t=function(e,t){if("object"!==R(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==R(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===R(t)?t:String(t)}var W=z((function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}));B(W,"getCollectionsPOSTAsync",function(){var e=M(G().mark((function e(t,r,n){var o;return G().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=new Promise((function(e,o){fetch(P.getPygeoapiHost()+"/collections?f=json&lang="+t,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST",body:JSON.stringify({geom:r,"geom-crs":n})}).then((function(t){200===t.status?t.json().then((function(t){e(t.collections)})).catch((function(e){console.log(e),o("Invalid response returned by the server.")})):(console.log("Invalid status: "+t.status),o("The server couldn't provide the collections list."))})).catch((function(e){console.log(e),o("Failed to communicate with the server to retrieve the collections.")}))})),e.abrupt("return",o);case 2:case"end":return e.stop()}}),e)})));return function(t,r,n){return e.apply(this,arguments)}}()),B(W,"extractFeaturesAsync",function(){var e=M(G().mark((function e(t,r,n,o){var i;return G().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return i=new Promise((function(e,i){fetch(P.getPygeoapiHost()+"/processes/extract/execution",{headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST",body:JSON.stringify({inputs:{geom:n,geom_crs:o,collections:t,email:r}})}).then((function(t){200===t.status||201===t.status?t.json().then((function(t){e(t)})).catch((function(e){console.log(e),i("Invalid response returned by the server.")})):412==t.status?i("Please draw an extraction area."):413==t.status?i("Your extraction area is too big."):(console.log("Invalid status: "+t.status),i("The server couldn't extract the data."))})).catch((function(e){console.log(e),i("Failed to communicate with the server to extract the data.")}))})),e.abrupt("return",i);case 2:case"end":return e.stop()}}),e)})));return function(t,r,n,o){return e.apply(this,arguments)}}()),B(W,"getJobStatusAsync",function(){var e=M(G().mark((function e(t){var r,n;return G().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=(P.getPygeoapiHost()+"/jobs/{jobId}?j=json").replace("{jobId}",t),n=new Promise((function(e,t){fetch(r,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"}).then((function(r){200===r.status?r.json().then((function(t){e(t)})).catch((function(e){console.log(e),t("Invalid response returned by the server.")})):(console.log("Invalid status: "+r.status),t("The server couldn't get the job status."))})).catch((function(e){console.log(e),t("Failed to communicate with the server to check the job status.")}))})),e.abrupt("return",n);case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),B(W,"getJobResultAsync",function(){var e=M(G().mark((function e(t){var r,n;return G().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=(P.getPygeoapiHost()+"/jobs/{jobId}/results?j=json").replace("{jobId}",t),n=new Promise((function(e,t){fetch(r,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"}).then((function(r){200===r.status?r.json().then((function(t){e(t)})).catch((function(e){console.log(e),t("Invalid response returned by the server.")})):(console.log("Invalid status: "+r.status),t("The server couldn't get the job status."))})).catch((function(e){console.log(e),t("Failed to communicate with the server to check the job status.")}))})),e.abrupt("return",n);case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),B(W,"getFeaturesAsync",function(){var e=M(G().mark((function e(t,r,n){var o,i;return G().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o=(P.getPygeoapiHost()+"/collections/{collectionId}/items?f=json").replace("{collectionId}",t.id),r&&(o+="&geom="+r+"&geom-crs="+n+"&clip=2"),i=new Promise((function(e,r){fetch(o,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"}).then((function(n){200===n.status?n.json().then((function(r){e({collection:t,data:r})})).catch((function(e){console.log(e),r("Invalid response returned by the server.")})):412==n.status?r("Please draw an extraction area."):413==n.status?r("Your extraction area is too big."):(console.log("Invalid status: "+n.status),r("The server couldn't extract the data."))})).catch((function(e){console.log(e),r("Failed to communicate with the server to fetch features for collection: "+t.title)}))})),e.abrupt("return",i);case 4:case"end":return e.stop()}}),e)})));return function(t,r,n){return e.apply(this,arguments)}}()),B(W,"getCollectionWKTAsync",function(){var e=M(G().mark((function e(t){var r,n;return G().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=(P.getPygeoapiHost()+"/collections/{collectionId}?f=json").replace("{collectionId}",t.id),n=new Promise((function(e,n){fetch(r,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"}).then((function(t){200===t.status?t.json().then((function(t){e(t)})).catch((function(e){console.log(e),n("Invalid response returned by the server.")})):(console.log("Invalid request for wkt: "+t.status),n("The server couldn't find the WKT for the collection."))})).catch((function(e){console.log(e),n("Failed to communicate with the server to get WKT for the collection: "+t.title)}))})),e.abrupt("return",n);case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}());const Z=r.p+"img/download.png";function V(e){return V="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},V(e)}function $(){$=function(){return e};var e={},t=Object.prototype,r=t.hasOwnProperty,n=Object.defineProperty||function(e,t,r){e[t]=r.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,r){return e[t]=r}}function u(e,t,r,o){var i=t&&t.prototype instanceof f?t:f,a=Object.create(i.prototype),c=new C(o||[]);return n(a,"_invoke",{value:b(e,r,c)}),a}function l(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var p={};function f(){}function h(){}function d(){}var v={};s(v,i,(function(){return this}));var y=Object.getPrototypeOf,m=y&&y(y(j([])));m&&m!==t&&r.call(m,i)&&(v=m);var g=d.prototype=f.prototype=Object.create(v);function w(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function o(n,i,a,c){var s=l(e[n],e,i);if("throw"!==s.type){var u=s.arg,p=u.value;return p&&"object"==V(p)&&r.call(p,"__await")?t.resolve(p.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):t.resolve(p).then((function(e){u.value=e,a(u)}),(function(e){return o("throw",e,a,c)}))}c(s.arg)}var i;n(this,"_invoke",{value:function(e,r){function n(){return new t((function(t,n){o(e,r,t,n)}))}return i=i?i.then(n,n):n()}})}function b(e,t,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===p)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var s=l(e,t,r);if("normal"===s.type){if(n=r.done?"completed":"suspendedYield",s.arg===p)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n="completed",r.method="throw",r.arg=s.arg)}}}function x(e,t){var r=t.method,n=e.iterator[r];if(void 0===n)return t.delegate=null,"throw"===r&&e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method)||"return"!==r&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+r+"' method")),p;var o=l(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,p;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,p):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,p)}function A(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function C(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(A,this),this.reset(!0)}function j(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,o=function t(){for(;++n<e.length;)if(r.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return h.prototype=d,n(g,"constructor",{value:d,configurable:!0}),n(d,"constructor",{value:h,configurable:!0}),h.displayName=s(d,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===h||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,d):(e.__proto__=d,s(e,c,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},w(_.prototype),s(_.prototype,a,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new _(u(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},w(g),s(g,c,"Generator"),s(g,i,(function(){return this})),s(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},e.values=j,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!e)for(var t in this)"t"===t.charAt(0)&&r.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(r,n){return a.type="throw",a.arg=e,t.next=r,n&&(t.method="next",t.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),E(r),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:j(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=void 0),p}},e}function q(e,t,r,n,o,i,a){try{var c=e[i](a),s=c.value}catch(e){return void r(e)}c.done?t(s):Promise.resolve(s).then(n,o)}function H(e){return function(e){if(Array.isArray(e))return J(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||X(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Y(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,u=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(u)throw o}}return c}}(e,t)||X(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function X(e,t){if(e){if("string"==typeof e)return J(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?J(e,t):void 0}}function J(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const Q=function(t){var r=window.cgpv,n=r.api,o=r.react,i=r.ui,a=r.useTranslation,c=(o.createElement,o.useState),s=o.useEffect,u=i.elements,l=u.CircularProgress,p=u.ProgressBar,f="mapCZS",h=a(),d=h.t,v=h.i18n,y=Y(c([]),2),m=y[0],w=y[1],_=Y(c([]),2),b=_[0],x=_[1],A=Y(c([]),2),E=A[0],C=A[1],j=Y(c([]),2),O=j[0],L=j[1];function S(e){return e<10?"0"+e:e}function I(){var e;return e=$().mark((function e(t){var r,o,i,a;return $().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:r=!1,e.prev=1;case 2:if(r){e.next=29;break}return e.next=5,W.getJobStatusAsync(t);case 5:if(o=e.sent,console.log("Job "+t,o),"successful"!=o.status){e.next=17;break}return e.next=10,W.getJobResultAsync(t);case 10:return i=e.sent,b.push({job_id:t,extract_url:i.extract_url}),x(H(b)),n.utilities.showSuccess(f,d("czs.success_extraction_completed")),e.abrupt("break",29);case 17:if("failed"!=o.status){e.next=24;break}return E.push(t),C(H(E)),n.utilities.showError(f,d("czs.success_extraction_failed")),e.abrupt("break",29);case 24:"accepted"==o.status&&(a=m.filter((function(e){return e.job_id==t}))).length>0&&(a[0].progress=o.progress,w(H(m)));case 25:return e.next=27,P.delay(2e3);case 27:e.next=2;break;case 29:e.next=34;break;case 31:e.prev=31,e.t0=e.catch(1),n.utilities.showError(f,"Failed to get job status");case 34:case"end":return e.stop()}}),e,null,[[1,31]])})),I=function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){q(i,n,o,a,c,"next",e)}function c(e){q(i,n,o,a,c,"throw",e)}a(void 0)}))},I.apply(this,arguments)}return s((function(){v.addResourceBundle("en","translation",N),v.addResourceBundle("fr","translation",T),n.event.on(g,(function(e){var t,r,n,o,i=e.job_id;e.job_id||(i=self.crypto.randomUUID()),m.push({job_id:i,local_date_start:(t=new Date,r=S(t.getHours()),n=S(t.getMinutes()),o=S(t.getSeconds()),r+":"+n+":"+o),progress:0}),w(H(m)),e.job_id?function(e){I.apply(this,arguments)}(e.job_id):(O.push(i),L(H(O)))}),f)}),[]),(0,e.jsx)("div",{className:"czs-jobs",children:(0,e.jsx)("table",{children:function(t){return(0,e.jsx)("tbody",{children:Object.values(t).map((function(t,r){var n=b.filter((function(e){return e.job_id==t.job_id})),o=E.filter((function(e){return e==t.job_id})),i=O.filter((function(e){return e==t.job_id}));return(0,e.jsxs)("tr",{children:[(0,e.jsx)("td",{className:"czs-jobs-cell-info",children:n.length>0?(0,e.jsx)("a",{href:P.getPygeoapiHost()+"/jobs/"+t.job_id,target:"_blank",children:"Extraction completed!"}):(0,e.jsx)("div",{children:i.length>0?(0,e.jsx)("a",{className:"job-dismissed",children:"Extraction queue is full!"}):(0,e.jsxs)("a",{href:P.getPygeoapiHost()+"/jobs/"+t.job_id,target:"_blank",children:["Extraction started ",t.local_date_start," ..."]})})}),(0,e.jsx)("td",{className:"czs-jobs-cell-progress",children:0===i.length?(0,e.jsx)("div",{children:n.length>0?(0,e.jsx)("div",{}):(0,e.jsx)("div",{children:(0,e.jsx)(p,{variant:"determinate",value:t.progress})})}):(0,e.jsx)("div",{})}),(0,e.jsx)("td",{className:"czs-jobs-cell-spin",children:0===i.length?(0,e.jsxs)("div",{children:[(0,e.jsx)(l,{isLoaded:n.length>0||o.length>0,className:"loading-spinner loading-job"}),n.length>0?(0,e.jsx)("div",{children:(0,e.jsx)("a",{href:n[0].extract_url,target:"_blank",children:(0,e.jsx)("img",{src:Z})})}):(0,e.jsx)("div",{}),o.length>0?(0,e.jsx)("div",{children:(0,e.jsx)("a",{href:P.getPygeoapiHost()+"/jobs/"+t.job_id+"/results?f=json",target:"_blank",children:"FAILED"})}):(0,e.jsx)("div",{})]}):(0,e.jsx)("div",{})})]},r)}))})}(m)})})},K=r.p+"img/more.png",ee=r.p+"img/zoom_in.png",te=r.p+"img/stars.png",re=r.p+"img/metadata.png",ne=r.p+"img/arrow_up.png",oe=r.p+"img/arrow_down.png";function ie(e){return ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ie(e)}function ae(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function ce(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ae(Object(r),!0).forEach((function(t){se(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ae(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function se(e,t,r){return(t=function(e){var t=function(e,t){if("object"!==ie(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==ie(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ie(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function ue(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,u=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(u)throw o}}return c}}(e,t)||le(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function le(e,t){if(e){if("string"==typeof e)return pe(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?pe(e,t):void 0}}function pe(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const fe=function(t){var r=window.cgpv,n=r.api,o=r.react,i=r.ui,a=r.useTranslation,c=(o.createElement,o.useState),g=o.useEffect,E=i.elements,C=E.Button,j=E.CircularProgress,O=E.Accordion,L=E.CheckboxListEnhanced,S=E.TextField,I=E.Menu,k=E.MenuItem,G=E.ListItem,D=E.ListItemText,M=E.ListItemIcon,R="mapCZS",F=a(),z=F.t,B=F.i18n,U=ue(c([]),2),W=U[0],Z=U[1],V=ue(c([]),2),$=V[0],q=V[1],H=ue(c([]),2),Y=H[0],X=H[1],J=ue(c({}),2),ie=J[0],ae=J[1],se=ue(c({}),2),fe=se[0],he=se[1],de=ue(c(null),2),ve=de[0],ye=de[1],me=Boolean(ve),ge=ue(c(null),2),we=ge[0],_e=ge[1],be=ue(c("alexandre.roy@nrcan-rncan.gc.ca"),2),xe=be[0],Ae=be[1],Ee=ue(c(!1),2),Ce=Ee[0],je=Ee[1],Oe=ue(c(!1),2),Le=Oe[0],Se=Oe[1],Ie=ue(c([]),2),ke=Ie[0],Pe=Ie[1],Ne=ue(c(!1),2),Te=Ne[0];function Ge(){ye(null)}function De(t){return(0,e.jsx)(O,{className:"accordion-theme",items:Object.values(t).map((function(e){var t=function(e){if(!Y||0==Y.length)return[];var t=[];return e.parents.forEach((function(e){var r=e.collections.filter((function(e){return Y.includes(e.id)}));r&&r.length>0&&t.push(e)})),t}(e);return{title:e.theme.title+" ("+e.parents.length+")"+(t.length>0?" *":""),content:Me(e.parents,t)}}))})}function Me(t,r){return t&&t.length>0?(0,e.jsx)(O,{className:"accordion-parent",items:Object.values(t).map((function(e){return{title:e.parent.title+" ("+e.collections.length+")"+(r.filter((function(t){return t.parent.id==e.parent.id})).length>0?" *":""),content:Re(e)}}))}):null}function Re(r){return r.collections&&r.collections.length>0?(0,e.jsx)(L,{multiselect:!0,listItems:Object.values(r.collections).map((function(e){return{display:e.title,value:e.id,content:Fe(e)}})),checkedValues:Y||[],checkedCallback:function(e,n,o){return function(e,r,n,o){var i;null===(i=t.handleCollectionCheckedChanged)||void 0===i||i.call(t,e,r,n,o)}(e,n,r,o)}}):null}function Fe(r){var n=(0,e.jsx)("span",{});n=(0,e.jsx)("div",{className:"layer-options layer-option",children:(0,e.jsx)(G,{button:!0,title:z("czs.layer_options"),onClick:function(e){!function(e,t){_e(t),ye(e.currentTarget)}(e,r)},children:(0,e.jsx)(M,{children:(0,e.jsx)("img",{src:K})})})});var o=(0,e.jsx)("span",{});return r&&ie[r.id]&&(o=(0,e.jsxs)("div",{className:"layer-order-layers layer-option ".concat(ke.includes(r.id)?"loading":""),children:[(0,e.jsx)("div",{onClick:function(e){var n,o,i;n=r.itemType,o=r.id,null===(i=t.handleHigher)||void 0===i||i.call(t,n,o)},title:z("czs.layer_bring_to_front"),children:(0,e.jsx)("img",{src:ne})}),(0,e.jsx)("div",{onClick:function(e){var n,o,i;n=r.itemType,o=r.id,null===(i=t.handleLower)||void 0===i||i.call(t,n,o)},title:z("czs.layer_send_to_back"),children:(0,e.jsx)("img",{src:oe})})]})),(0,e.jsxs)("div",{className:"layer-options-wrapper",children:[n,o]})}return Ne[1],g((function(){return B.addResourceBundle("en","translation",N),B.addResourceBundle("fr","translation",T),n.event.on(s,(function(e){he({active:!!e.geometry}),je(!0)}),R),n.event.on(l,(function(e){Z(e.collections)}),R),n.event.on(p,(function(e){q(e.collections)}),R),n.event.on(u,(function(e){je(!1)}),R),n.event.on(y,(function(e){Se(!0),X(e.checkedCollections)}),R),n.event.on(m,(function(e){Se(!1),ae(ce({},e.viewedCollections))}),R),n.event.on(w,(function(e){var t;Pe(function(e){if(Array.isArray(e))return pe(e)}(t=e.collections)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||le(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())}),R),n.event.on(f,(function(e){Se(!0)}),R),n.event.on(h,(function(e){n.utilities.showWarning(R,z("czs.warning_extraction_area_too_big")+": "+e.collection.title)}),R),n.event.on(d,(function(e){n.utilities.showWarning(R,z("czs.warning_extraction_area_missing"))}),R),n.event.on(v,(function(e){Se(!1),ae(ce({},e.viewedCollections))}),R),n.event.on(_,(function(e){n.utilities.showError(R,e.error)}),R),n.event.on(b,(function(e){n.utilities.showWarning(R,z("czs.error_some_elements_outside"))}),R),n.event.on(x,(function(e){n.utilities.showError(R,e.error)}),R),n.event.on(A,(function(e){n.utilities.showError(R,e.error)}),R),function(){n.event.off(s,R),n.event.off(l,R),n.event.off(p,R),n.event.off(u,R),n.event.off(y,R),n.event.off(m,R),n.event.off(w,R),n.event.off(f,R),n.event.off(h,R),n.event.off(d,R),n.event.off(v,R),n.event.off(_,R),n.event.off(b,R),n.event.off(x,R),n.event.off(A,R)}}),[]),(0,e.jsxs)("div",{className:"czs-panel",children:[(0,e.jsxs)("div",{children:[(0,e.jsx)(C,{type:"text",onClick:function(){var e;null===(e=t.handleStartDrawing)||void 0===e||e.call(t)},size:"small",children:z("czs.draw")}),(0,e.jsx)(C,{type:"text",onClick:function(){var e;null===(e=t.handleClearDrawing)||void 0===e||e.call(t)},size:"small",disabled:!fe.active,children:z("czs.clear")})]}),(0,e.jsxs)("div",{className:"loading-spinner-container",children:[(0,e.jsx)(j,{isLoaded:!Ce,className:"loading-spinner loading-collections"}),(0,e.jsx)(j,{isLoaded:!Le,className:"loading-spinner loading-features"})]}),(0,e.jsxs)("div",{className:"collections-group",children:[(0,e.jsx)(O,{items:[{title:z("czs.list_feature_colls"),content:De(W)}]}),(0,e.jsx)(O,{items:[{title:z("czs.list_coverage_colls"),content:De($)}]})]}),(0,e.jsx)(S,{id:"czs_email",className:"czs-email",type:"email",placeholder:z("czs.enter_email"),style:{marginTop:20,width:"100%"},onChange:function(){var e=document.getElementById("czs_email");Ae(null==e?void 0:e.value)},value:xe}),(0,e.jsx)(C,{className:"btn-extract",type:"text",onClick:function(){var e;null===(e=t.handleExtractFeatures)||void 0===e||e.call(t,xe)},size:"small",disabled:!(Object.keys(ie).length&&xe&&!Te),children:z("czs.extract_features")}),(0,e.jsx)(Q,{}),(0,e.jsx)(O,{className:"need-help",items:[{title:z("czs.help_title"),content:(0,e.jsx)("div",{className:"help-text",dangerouslySetInnerHTML:{__html:z("czs.help_text")}})}]}),function(){var r=null;we&&(r=P.getContentMetadata(we.links));var n=(0,e.jsx)(k,{});return r&&(n=(0,e.jsxs)(k,{className:"layer-metadata",onClick:function(e){return null===(r=t.handleViewMetadataCollection)||void 0===r||r.call(t,we),void ye(null);var r},children:[(0,e.jsx)(M,{children:(0,e.jsx)("img",{src:re})}),(0,e.jsx)(D,{children:z("czs.view_metadata")})]})),(0,e.jsxs)(I,{className:"czs_menu_options",anchorEl:ve,open:me,onClose:Ge,children:[(0,e.jsxs)(k,{onClick:function(e){return null===(r=t.handleZoomToCollection)||void 0===r||r.call(t,we),void ye(null);var r},children:[(0,e.jsx)(M,{children:(0,e.jsx)("img",{src:ee})}),(0,e.jsx)(D,{children:z("czs.zoom_to")})]}),(0,e.jsxs)(k,{onClick:function(e){return null===(r=t.handleViewCapabilitiesCollection)||void 0===r||r.call(t,we),void ye(null);var r},children:[(0,e.jsx)(M,{children:(0,e.jsx)("img",{src:te})}),(0,e.jsx)(D,{children:z("czs.view_capabilities")})]}),n]})}()]})},he=(new Error("timeout while waiting for mutex to become available"),new Error("mutex already locked"),new Error("request for lock canceled"));class de{constructor(e,t=he){this._value=e,this._cancelError=t,this._weightedQueues=[],this._weightedWaiters=[]}acquire(e=1){if(e<=0)throw new Error(`invalid weight ${e}: must be positive`);return new Promise(((t,r)=>{this._weightedQueues[e-1]||(this._weightedQueues[e-1]=[]),this._weightedQueues[e-1].push({resolve:t,reject:r}),this._dispatch()}))}runExclusive(e,t=1){return r=this,n=void 0,i=function*(){const[r,n]=yield this.acquire(t);try{return yield e(r)}finally{n()}},new((o=void 0)||(o=Promise))((function(e,t){function a(e){try{s(i.next(e))}catch(e){t(e)}}function c(e){try{s(i.throw(e))}catch(e){t(e)}}function s(t){var r;t.done?e(t.value):(r=t.value,r instanceof o?r:new o((function(e){e(r)}))).then(a,c)}s((i=i.apply(r,n||[])).next())}));var r,n,o,i}waitForUnlock(e=1){if(e<=0)throw new Error(`invalid weight ${e}: must be positive`);return new Promise((t=>{this._weightedWaiters[e-1]||(this._weightedWaiters[e-1]=[]),this._weightedWaiters[e-1].push(t),this._dispatch()}))}isLocked(){return this._value<=0}getValue(){return this._value}setValue(e){this._value=e,this._dispatch()}release(e=1){if(e<=0)throw new Error(`invalid weight ${e}: must be positive`);this._value+=e,this._dispatch()}cancel(){this._weightedQueues.forEach((e=>e.forEach((e=>e.reject(this._cancelError))))),this._weightedQueues=[]}_dispatch(){var e;for(let t=this._value;t>0;t--){const r=null===(e=this._weightedQueues[t-1])||void 0===e?void 0:e.shift();if(!r)continue;const n=this._value,o=t;this._value-=t,t=this._value+1,r.resolve([n,this._newReleaser(o)])}this._drainUnlockWaiters()}_newReleaser(e){let t=!1;return()=>{t||(t=!0,this.release(e))}}_drainUnlockWaiters(){for(let e=this._value;e>0;e--)this._weightedWaiters[e-1]&&(this._weightedWaiters[e-1].forEach((e=>e())),this._weightedWaiters[e-1]=[])}}class ve{constructor(e){this._semaphore=new de(1,e)}acquire(){return e=this,t=void 0,n=function*(){const[,e]=yield this._semaphore.acquire();return e},new((r=void 0)||(r=Promise))((function(o,i){function a(e){try{s(n.next(e))}catch(e){i(e)}}function c(e){try{s(n.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,c)}s((n=n.apply(e,t||[])).next())}));var e,t,r,n}runExclusive(e){return this._semaphore.runExclusive((()=>e()))}isLocked(){return this._semaphore.isLocked()}waitForUnlock(){return this._semaphore.waitForUnlock()}release(){this._semaphore.isLocked()&&this._semaphore.release()}cancel(){return this._semaphore.cancel()}}const ye=r.p+"img/Marker_green.png";function me(e){return me="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},me(e)}function ge(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return we(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?we(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,o=function(){};return{s:o,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return a=e.done,e},e:function(e){c=!0,i=e},f:function(){try{a||null==r.return||r.return()}finally{if(c)throw i}}}}function we(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function _e(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function be(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?_e(Object(r),!0).forEach((function(t){Oe(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):_e(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function xe(){xe=function(){return e};var e={},t=Object.prototype,r=t.hasOwnProperty,n=Object.defineProperty||function(e,t,r){e[t]=r.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,r){return e[t]=r}}function u(e,t,r,o){var i=t&&t.prototype instanceof f?t:f,a=Object.create(i.prototype),c=new C(o||[]);return n(a,"_invoke",{value:b(e,r,c)}),a}function l(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var p={};function f(){}function h(){}function d(){}var v={};s(v,i,(function(){return this}));var y=Object.getPrototypeOf,m=y&&y(y(j([])));m&&m!==t&&r.call(m,i)&&(v=m);var g=d.prototype=f.prototype=Object.create(v);function w(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function o(n,i,a,c){var s=l(e[n],e,i);if("throw"!==s.type){var u=s.arg,p=u.value;return p&&"object"==me(p)&&r.call(p,"__await")?t.resolve(p.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):t.resolve(p).then((function(e){u.value=e,a(u)}),(function(e){return o("throw",e,a,c)}))}c(s.arg)}var i;n(this,"_invoke",{value:function(e,r){function n(){return new t((function(t,n){o(e,r,t,n)}))}return i=i?i.then(n,n):n()}})}function b(e,t,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===p)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var s=l(e,t,r);if("normal"===s.type){if(n=r.done?"completed":"suspendedYield",s.arg===p)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n="completed",r.method="throw",r.arg=s.arg)}}}function x(e,t){var r=t.method,n=e.iterator[r];if(void 0===n)return t.delegate=null,"throw"===r&&e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method)||"return"!==r&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+r+"' method")),p;var o=l(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,p;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,p):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,p)}function A(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function C(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(A,this),this.reset(!0)}function j(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,o=function t(){for(;++n<e.length;)if(r.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return h.prototype=d,n(g,"constructor",{value:d,configurable:!0}),n(d,"constructor",{value:h,configurable:!0}),h.displayName=s(d,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===h||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,d):(e.__proto__=d,s(e,c,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},w(_.prototype),s(_.prototype,a,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new _(u(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},w(g),s(g,c,"Generator"),s(g,i,(function(){return this})),s(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},e.values=j,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!e)for(var t in this)"t"===t.charAt(0)&&r.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(r,n){return a.type="throw",a.arg=e,t.next=r,n&&(t.method="next",t.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),E(r),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:j(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=void 0),p}},e}function Ae(e,t,r,n,o,i,a){try{var c=e[i](a),s=c.value}catch(e){return void r(e)}c.done?t(s):Promise.resolve(s).then(n,o)}function Ee(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){Ae(i,n,o,a,c,"next",e)}function c(e){Ae(i,n,o,a,c,"throw",e)}a(void 0)}))}}function Ce(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,Le(n.key),n)}}function je(e,t,r){return t&&Ce(e.prototype,t),r&&Ce(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function Oe(e,t,r){return(t=Le(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Le(e){var t=function(e,t){if("object"!==me(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==me(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===me(t)?t:String(t)}var Se=je((function e(t,r){var n=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"en";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),Oe(this,"_lang","en"),Oe(this,"_collections",[]),Oe(this,"_checkedCollections",[]),Oe(this,"_viewedCollections",{}),Oe(this,"_orderingCollections",[]),Oe(this,"__watcherLoadCollectionsCounter",0),Oe(this,"__watcherLoadCollectionsMutex",new ve),Oe(this,"init",(function(){n._cgpvapi.event.on(n._cgpvapi.eventNames.MAP.EVENT_MAP_LOADED,function(){var t=Ee(xe().mark((function t(r){var o;return xe().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return(o=n._map.layer.vector.createGeometryGroup(e.GEOM_GRP_DRAW_ID)).vectorLayer.setStyle(n._cgpvapi.geoUtilities.defaultDrawingStyle("orange")),o.vectorLayer.setZIndex(e.Z_INDEX_DRAWING),n._modifInter=n._map.initModifyInteractions(e.GEOM_GRP_DRAW_ID),t.next=6,n.loadCollectionsAsync();case 6:t.sent;case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),n._mapID),n._cgpvapi.event.on(n._cgpvapi.eventNames.INTERACTION.EVENT_DRAW_ENDED,function(){var e=Ee(xe().mark((function e(t){return xe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,n.handleDrawEndAsync(t.drawInfo);case 2:e.sent;case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),n._mapID),n._cgpvapi.event.on(n._cgpvapi.eventNames.INTERACTION.EVENT_MODIFY_ENDED,function(){var e=Ee(xe().mark((function e(t){return xe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,n.handleDrawChangeAsync(t.modifyInfo);case 2:e.sent;case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),n._mapID)})),Oe(this,"onLoadCollectionsStarted",(function(e){n._cgpvapi.event.emit({event:s,handlerName:n._mapID,geometry:e})})),Oe(this,"onLoadCollectionsEnded",(function(){n._cgpvapi.event.emit({event:u,handlerName:n._mapID})})),Oe(this,"onLoadCollectionsFeatures",(function(e){n._cgpvapi.event.emit({event:l,handlerName:n._mapID,collections:e})})),Oe(this,"onLoadCollectionsCoverages",(function(e){n._cgpvapi.event.emit({event:p,handlerName:n._mapID,collections:e})})),Oe(this,"onUpdateLayersStarted",(function(){n._cgpvapi.event.emit({event:f,handlerName:n._mapID})})),Oe(this,"onUpdateLayersEnded",(function(e){n._cgpvapi.event.emit({event:v,handlerName:n._mapID,viewedCollections:e})})),Oe(this,"onErrorZoomingOutside",(function(){n._cgpvapi.event.emit({event:b,handlerName:n._mapID})})),Oe(this,"onErrorShowingCollection",(function(e){console.log("ERROR_SHOWING_COLLECTION",e),n._cgpvapi.event.emit({event:x,handlerName:n._mapID,error:e})})),Oe(this,"onErrorExtracting",(function(e){console.log("ERROR_EXTRACTING",e),n._cgpvapi.event.emit({event:A,handlerName:n._mapID,error:e})})),Oe(this,"onError",(function(e){console.log("ERROR",e),n._cgpvapi.event.emit({event:_,handlerName:n._mapID,error:e})})),Oe(this,"startDrawing",(function(){n._map.layer.vector.deleteGeometriesFromGroup(e.GEOM_GRP_DRAW_ID),n._drawInter=n._map.initDrawInteractions(e.GEOM_GRP_DRAW_ID,"Polygon")})),Oe(this,"clearDrawingAsync",Ee(xe().mark((function t(){return xe().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n._map.layer.vector.deleteGeometriesFromGroup(e.GEOM_GRP_DRAW_ID),n.onStopDrawing(),t.next=4,n.loadCollectionsAsync();case 4:return t.abrupt("return",t.sent);case 5:case"end":return t.stop()}}),t)})))),Oe(this,"onStopDrawing",(function(){n._drawInter&&n._drawInter.stopInteraction()})),Oe(this,"handleDrawChangeAsync",function(){var e=Ee(xe().mark((function e(t){var r;return xe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.features.getArray()[0].getGeometry(),e.next=3,n.loadCollectionsAsync(r);case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),Oe(this,"handleDrawEndAsync",function(){var e=Ee(xe().mark((function e(t){var r;return xe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.feature.getGeometry(),setTimeout((function(){n.onStopDrawing()})),n._map.zoomToExtent(r.getExtent(),{padding:[100,100,100,100],duration:1e3}),e.next=5,n.loadCollectionsAsync(r);case 5:return e.abrupt("return",e.sent);case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),Oe(this,"updateCollectionCheckedAsync",function(){var e=Ee(xe().mark((function e(t,r,o,i){var a;return xe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,a=n.findCollectionFromID(t),n._checkedCollections=i,!a){e.next=13;break}if(n._cgpvapi.event.emit({event:y,handlerName:n._mapID,parentCollection:o,checkedCollections:i}),!r){e.next=11;break}return e.next=8,n.addCollectionAsync(a,n._geometry).finally((function(){n._cgpvapi.event.emit({event:m,handlerName:n._mapID,viewedCollections:n._viewedCollections})}));case 8:n._geometry||n._cgpvapi.event.emit({event:d,handlerName:n._mapID,collection:a}),e.next=13;break;case 11:n.removeCollection(a.id),n._cgpvapi.event.emit({event:m,handlerName:n._mapID,viewedCollections:n._viewedCollections});case 13:return e.abrupt("return",!0);case 16:return e.prev=16,e.t0=e.catch(0),n.onErrorShowingCollection(e.t0),e.abrupt("return",!1);case 20:case"end":return e.stop()}}),e,null,[[0,16]])})));return function(t,r,n,o){return e.apply(this,arguments)}}()),Oe(this,"layerOrderHigherAsync",function(){var e=Ee(xe().mark((function e(t,r){return xe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(n._orderingCollections.indexOf(r)>=0)){e.next=2;break}return e.abrupt("return",!1);case 2:return n._orderingCollections.push(r),n._cgpvapi.event.emit({event:w,handlerName:n._mapID,collections:n._orderingCollections}),e.next=6,n.higherAsync(t,r).finally((function(){var e=n._orderingCollections.indexOf(r);e>=0&&n._orderingCollections.splice(e,1),n._cgpvapi.event.emit({event:w,handlerName:n._mapID,collections:n._orderingCollections})}));case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}()),Oe(this,"layerOrderLowerAsync",function(){var e=Ee(xe().mark((function e(t,r){return xe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(n._orderingCollections.indexOf(r)>=0)){e.next=2;break}return e.abrupt("return",!1);case 2:return n._orderingCollections.push(r),n._cgpvapi.event.emit({event:w,handlerName:n._mapID,collections:n._orderingCollections}),e.next=6,n.lowerAsync(t,r).finally((function(){var e=n._orderingCollections.indexOf(r);e>=0&&n._orderingCollections.splice(e,1),n._cgpvapi.event.emit({event:w,handlerName:n._mapID,collections:n._orderingCollections})}));case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}()),Oe(this,"extractFeaturesAsync",function(){var e=Ee(xe().mark((function e(t){var r;return xe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,W.extractFeaturesAsync(Object.keys(n._viewedCollections),t,n._cgpvapi.geoUtilities.geometryToWKT(n._geometry),n._map.currentProjection);case 3:return r=e.sent,console.log("JOB RESULT",r),n._cgpvapi.event.emit(be({event:g,handlerName:n._mapID},r)),e.abrupt("return",r);case 9:e.prev=9,e.t0=e.catch(0),n.onErrorExtracting(e.t0);case 12:case"end":return e.stop()}}),e,null,[[0,9]])})));return function(t){return e.apply(this,arguments)}}()),Oe(this,"zoomToCollection",function(){var t=Ee(xe().mark((function t(r){var o,i,a,c;return xe().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,W.getCollectionWKTAsync(r);case 2:o=t.sent,(i=n._cgpvapi.geoUtilities.wktToGeometry(o.wkt)).transform("EPSG:".concat(e.COLLECTION_FOOTPRINT_CRS),n._cgpvapi.projection.projections[n._map.currentProjection]),a=i.getExtent(),c=!1,a[0]<n._mapLimits[0]&&(c=!0),a[1]<n._mapLimits[1]&&(c=!0),a[2]>n._mapLimits[2]&&(c=!0),a[3]>n._mapLimits[3]&&(c=!0),n._map.zoomToExtent(a,{padding:[100,100,100,100],duration:1e3}),c&&n.onErrorZoomingOutside();case 13:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),Oe(this,"higherAsync",function(){var e=Ee(xe().mark((function e(t,r){var o,i,a,c;return xe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("feature"!=t){e.next=8;break}return o=n._map.layer.vector.getGeometryGroup(r).vectorLayer,i=o.getZIndex(),i++,o.setZIndex(i),e.abrupt("return",!0);case 8:return e.next=10,n.getLayerAsync(r);case 10:return a=e.sent,c=a.gvLayers.getZIndex(),c++,a.gvLayers.setZIndex(c),e.abrupt("return",!0);case 15:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}()),Oe(this,"lowerAsync",function(){var e=Ee(xe().mark((function e(t,r){var o,i,a,c;return xe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("feature"!=t){e.next=8;break}return o=n._map.layer.vector.getGeometryGroup(r).vectorLayer,i=o.getZIndex(),i--,o.setZIndex(i),e.abrupt("return",!0);case 8:return e.next=10,n.getLayerAsync(r);case 10:return a=e.sent,c=a.gvLayers.getZIndex(),c--,a.gvLayers.setZIndex(c),e.abrupt("return",!0);case 15:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}()),Oe(this,"findCollectionFromID",(function(e){var t=[];return(t=t.concat(n._collections.filter((function(t){return t.id==e})))).length>0?t[0]:null})),Oe(this,"adjustExtentOnLayerID",(function(e,t){var r=void 0;t&&(r=t.getExtent()),e.setExtent(r),e.setVisible(!1),e.setVisible(!0)})),Oe(this,"loadCollectionsAsync",function(){var e=Ee(xe().mark((function e(t){var r,o,i,s,u;return xe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n.__watcherLoadCollectionsCounter++,r=n.__watcherLoadCollectionsCounter,e.next=4,n.__watcherLoadCollectionsMutex.acquire();case 4:if(o=e.sent,e.prev=5,r!=n.__watcherLoadCollectionsCounter){e.next=29;break}return e.prev=7,n._geometry=t,n.onLoadCollectionsStarted(n._geometry),e.next=12,W.getCollectionsPOSTAsync(n._lang+"-CA",n._cgpvapi.geoUtilities.geometryToWKT(n._geometry),n._map.currentProjection);case 12:return i=e.sent,n._collections=[],s=[],u=[],i.forEach((function(e){var t;if("feature"==e.itemType?t=s:"coverage"==e.itemType&&(t=u),t){var r,o,i=null===(r=t)||void 0===r?void 0:r.find((function(t){return t.theme.id==e.theme}));i||(i=new a({id:e.theme,title:e.theme},[]),t.push(i));var l=null===(o=i.parents)||void 0===o?void 0:o.find((function(t){return t.parent.id==e.parent}));l||(l=new c(i.theme,{id:e.parent,title:e.parent_title},[]),i.parents.push(l)),l.collections.push(e),n._collections.push(e)}})),s.sort((function(e,t){return P.sortAlphabetically(e.theme.title,t.theme.title)})),u.sort((function(e,t){return P.sortAlphabetically(e.theme.title,t.theme.title)})),s.forEach((function(e){e.parents.sort((function(e,t){return P.sortAlphabetically(e.parent.title,t.parent.title)})),e.parents.forEach((function(e){e.collections.sort((function(e,t){return P.sortAlphabetically(e.title,t.title)}))}))})),u.forEach((function(e){e.parents.sort((function(e,t){return P.sortAlphabetically(e.parent.title,t.parent.title)})),e.parents.forEach((function(e){e.collections.sort((function(e,t){return P.sortAlphabetically(e.title,t.title)}))}))})),n.onLoadCollectionsFeatures(s),n.onLoadCollectionsCoverages(u),e.next=25,n.updateLayersOnMapAsync(t);case 25:return e.prev=25,n.onLoadCollectionsEnded(),e.finish(25);case 28:return e.abrupt("return",!0);case 29:return e.abrupt("return",!1);case 32:return e.prev=32,e.t0=e.catch(5),n.onError(e.t0),e.abrupt("return",!1);case 36:return e.prev=36,o(),e.finish(36);case 39:case"end":return e.stop()}}),e,null,[[5,32,36,39],[7,,25,28]])})));return function(t){return e.apply(this,arguments)}}()),Oe(this,"updateLayersOnMapAsync",function(){var e=Ee(xe().mark((function e(t){var r,o,i,a,c,s;return xe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:e.prev=0,n.onUpdateLayersStarted(),r=[],o=ge(n.getCheckedCollections());try{for(o.s();!(i=o.n()).done;)a=i.value,(c=n.findCollectionFromID(a))?(s=n.addCollectionAsync(c,t),r.push(s)):n._viewedCollections[a]&&n.removeCollection(a)}catch(e){o.e(e)}finally{o.f()}return e.next=7,Promise.all(r);case 7:return e.abrupt("return",!0);case 8:return e.prev=8,n.onUpdateLayersEnded(n._viewedCollections),e.finish(8);case 11:case"end":return e.stop()}}),e,null,[[0,,8,11]])})));return function(t){return e.apply(this,arguments)}}()),Oe(this,"getCheckedCollections",(function(){var e=[];return Object.keys(n._checkedCollections).forEach((function(t){e=e.concat(n._checkedCollections[t])})),e})),Oe(this,"getAreaInKm2",(function(e){return n._cgpvapi.geoUtilities.getArea(e,{projection:n._map.getView().getProjection().getCode()})/1e6})),Oe(this,"addCollectionAsync",function(){var e=Ee(xe().mark((function e(t,r){return xe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(r&&n.getAreaInKm2(r)<=t.max_extract_area)){e.next=11;break}if("feature"!=t.itemType){e.next=7;break}return n.removeCollection(t.id),e.next=5,n.addCollectionVectorAsync(t,r);case 5:e.next=9;break;case 7:return e.next=9,n.addCollectionRasterAsync(t,r);case 9:e.next=14;break;case 11:n.removeCollection(t.id),n.addFingerprintCollectionAsync(t),r&&n._cgpvapi.event.emit({event:h,handlerName:n._mapID,collection:t});case 14:return e.abrupt("return",!0);case 15:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}()),Oe(this,"addCollectionVectorAsync",function(){var t=Ee(xe().mark((function t(r,o){var i,a;return xe().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,W.getFeaturesAsync(r,n._cgpvapi.geoUtilities.geometryToWKT(o),n._map.currentProjection);case 2:return(i=t.sent).data.features&&i.data.features.length>0&&((a=n._map.layer.vector.createGeometryGroup(r.id)).vectorLayer.setZIndex(e.Z_INDEX_VECTORS),n._map.layer.vector.setActiveGeometryGroup(r.id),n._viewedCollections[r.id]={type:"feature",info:a},n.loadFeaturesInGroup(i.data.features,parseInt(r.crs[0]),"blue","green"),n._cgpvapi.event.emit({event:"czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_FEATURES",handlerName:n._mapID,collection:r})),t.abrupt("return",!0);case 5:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}()),Oe(this,"addCollectionRasterAsync",function(){var t=Ee(xe().mark((function t(r,o){var i,a,c;return xe().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!n._viewedCollections[r.id]||"raster"!=n._viewedCollections[r.id].type){t.next=7;break}return t.next=3,n.getLayerAsync(r.id);case 3:i=t.sent,n.adjustExtentOnLayerID(i,o),t.next=19;break;case 7:return n.removeCollection(r.id),a={geoviewLayerType:"ogcWms",geoviewLayerId:r.id,geoviewLayerName:{en:r.title,fr:r.title},metadataAccessPath:{en:P.getQGISServiceHost()+r.org_schema+"/"+r.parent,fr:P.getQGISServiceHost()+r.org_schema+"/"+r.parent},listOfLayerEntryConfig:[{layerId:r.short_name,layerName:{en:r.title,fr:r.title},source:{dataProjection:"EPSG:4326"}}]},r.crs&&r.crs.length>0&&Number.isInteger(r.crs[0])&&(a.listOfLayerEntryConfig[0].source.dataProjection="EPSG:"+r.crs[0]),P.isLocal()&&(a.metadataAccessPath={en:"https://maps.geogratis.gc.ca/wms/hydro_network_en",fr:"https://maps.geogratis.gc.ca/wms/hydro_network_en"},a.listOfLayerEntryConfig[0].layerId="hydro_network",a.listOfLayerEntryConfig[0].layerName={en:"hydro_network",fr:"hydro_network"}),n._map.layer.addGeoviewLayer(a),n._viewedCollections[r.id]={type:"raster",info:a},t.next=15,n.getLayerAsync(r.id);case 15:c=t.sent,n.adjustExtentOnLayerID(c,o),c.gvLayers.setZIndex(e.Z_INDEX_RASTERS),n._cgpvapi.event.emit({event:"czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_COVERAGES",handlerName:n._mapID,collection:r});case 19:return t.abrupt("return",!0);case 20:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}()),Oe(this,"addFingerprintCollectionAsync",function(){var t=Ee(xe().mark((function t(r){var o;return xe().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,W.getCollectionWKTAsync(r);case 2:o=t.sent,n._map.layer.vector.createGeometryGroup(r.id).vectorLayer.setZIndex(e.Z_INDEX_VECTORS),n._map.layer.vector.setActiveGeometryGroup(r.id),n.loadFeaturesInGroup([o.wkt],e.COLLECTION_FOOTPRINT_CRS,"red","red");case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),Oe(this,"removeCollection",(function(e){if(n._map.layer.vector.getGeometryGroup(e)&&n._map.layer.vector.deleteGeometryGroup(e),n._viewedCollections.hasOwnProperty(e)){var t=n._viewedCollections[e];"raster"==t.type&&n._map.layer.removeGeoviewLayer(t.info),delete n._viewedCollections[e]}})),Oe(this,"loadFeaturesInGroup",(function(e,t,r,o){e.forEach((function(e){var i;"LineString"==(i=e.geometry?n._cgpvapi.geoUtilities.geojsonToGeometry(e.geometry):n._cgpvapi.geoUtilities.wktToGeometry(e)).getType()?n._map.layer.vector.addPolyline(i.getCoordinates(),{projection:t,style:{strokeColor:r,strokeOpacity:.5,strokeWidth:1}}):"MultiLineString"==i.getType()?i.getLineStrings().forEach((function(e){n._map.layer.vector.addPolyline(e.getCoordinates(),{projection:t,style:{strokeColor:r,strokeOpacity:1,strokeWidth:1,fillColor:r,fillOpacity:.05}})})):"Point"==i.getType()?n._map.layer.vector.addMarkerIcon(i.getCoordinates(),{projection:t,style:{anchor:[.5,256],size:[256,256],scale:.1,anchorXUnits:"fraction",anchorYUnits:"pixels",src:ye}}):"MultiPoint"==i.getType()?i.getPoints().forEach((function(e){n._map.layer.vector.addMarkerIcon(e.getCoordinates(),{projection:t,style:{anchor:[.5,256],size:[256,256],scale:.1,anchorXUnits:"fraction",anchorYUnits:"pixels",src:ye}})})):"Polygon"==i.getType()?n._map.layer.vector.addPolygon(i.getCoordinates(),{projection:t,style:{strokeColor:r,strokeOpacity:1,strokeWidth:1,fillColor:r,fillOpacity:.05}}):"MultiPolygon"==i.getType()?i.getPolygons().forEach((function(e){n._map.layer.vector.addPolygon(e.getCoordinates(),{projection:t,style:{strokeColor:r,strokeOpacity:1,strokeWidth:1,fillColor:r,fillOpacity:.05}})})):console.log("Unknown geometry type",i.getType()),e.geometry_clipped&&("LineString"==e.geometry_clipped.type?(Array.isArray(e.geometry_clipped.coordinates[0])&&Array.isArray(e.geometry_clipped.coordinates[0][0])||(e.geometry_clipped.coordinates=[e.geometry_clipped.coordinates]),e.geometry_clipped.coordinates.forEach((function(e){n._map.layer.vector.addPolyline(e,{projection:t,style:{strokeColor:o,strokeWidth:1.5}})}))):"MultiLineString"==e.geometry_clipped.type?e.geometry_clipped.coordinates.forEach((function(e){n._map.layer.vector.addPolyline(e,{projection:t,style:{strokeColor:o,strokeWidth:1.5,fillColor:o,fillOpacity:.3}})})):"Polygon"==e.geometry_clipped.type?n._map.layer.vector.addPolygon(e.geometry_clipped.coordinates,{projection:t,style:{strokeColor:o,strokeWidth:1.5,fillColor:o,fillOpacity:.3}}):"MultiPolygon"==e.geometry_clipped.type?e.geometry_clipped.coordinates.forEach((function(e){n._map.layer.vector.addPolygon(e,{projection:t,style:{strokeColor:o,strokeWidth:1.5,fillColor:o,fillOpacity:.3}})})):"Point"==e.geometry_clipped.type||"MultiPoint"==e.geometry_clipped.type||console.log("Ignored geometry clipped type",e.geometry_clipped.type))}))})),Oe(this,"getLayerAsync",function(){var e=Ee(xe().mark((function e(t){return xe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,n._map.layer.getGeoviewLayerByIdAsync(t,!0,200,3e4);case 2:return e.abrupt("return",e.sent);case 3:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),this._cgpvapi=t.api,this._mapID=r,this._map=this._cgpvapi.map(r),this._lang=o,this._mapLimits=this._cgpvapi.geoUtilities.getExtent([e.MAP_LIMITS_X_MIN,e.MAP_LIMITS_Y_MIN,e.MAP_LIMITS_X_MAX,e.MAP_LIMITS_Y_MAX],e.MAP_LIMITS_CRS,this._map.currentProjection),this.init()}));function Ie(e){return Ie="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ie(e)}function ke(){ke=function(){return e};var e={},t=Object.prototype,r=t.hasOwnProperty,n=Object.defineProperty||function(e,t,r){e[t]=r.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,r){return e[t]=r}}function u(e,t,r,o){var i=t&&t.prototype instanceof f?t:f,a=Object.create(i.prototype),c=new C(o||[]);return n(a,"_invoke",{value:b(e,r,c)}),a}function l(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var p={};function f(){}function h(){}function d(){}var v={};s(v,i,(function(){return this}));var y=Object.getPrototypeOf,m=y&&y(y(j([])));m&&m!==t&&r.call(m,i)&&(v=m);var g=d.prototype=f.prototype=Object.create(v);function w(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function o(n,i,a,c){var s=l(e[n],e,i);if("throw"!==s.type){var u=s.arg,p=u.value;return p&&"object"==Ie(p)&&r.call(p,"__await")?t.resolve(p.__await).then((function(e){o("next",e,a,c)}),(function(e){o("throw",e,a,c)})):t.resolve(p).then((function(e){u.value=e,a(u)}),(function(e){return o("throw",e,a,c)}))}c(s.arg)}var i;n(this,"_invoke",{value:function(e,r){function n(){return new t((function(t,n){o(e,r,t,n)}))}return i=i?i.then(n,n):n()}})}function b(e,t,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===p)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var s=l(e,t,r);if("normal"===s.type){if(n=r.done?"completed":"suspendedYield",s.arg===p)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n="completed",r.method="throw",r.arg=s.arg)}}}function x(e,t){var r=t.method,n=e.iterator[r];if(void 0===n)return t.delegate=null,"throw"===r&&e.iterator.return&&(t.method="return",t.arg=void 0,x(e,t),"throw"===t.method)||"return"!==r&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+r+"' method")),p;var o=l(n,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,p;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,p):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,p)}function A(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function C(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(A,this),this.reset(!0)}function j(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,o=function t(){for(;++n<e.length;)if(r.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return h.prototype=d,n(g,"constructor",{value:d,configurable:!0}),n(d,"constructor",{value:h,configurable:!0}),h.displayName=s(d,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===h||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,d):(e.__proto__=d,s(e,c,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},w(_.prototype),s(_.prototype,a,(function(){return this})),e.AsyncIterator=_,e.async=function(t,r,n,o,i){void 0===i&&(i=Promise);var a=new _(u(t,r,n,o),i);return e.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},w(g),s(g,c,"Generator"),s(g,i,(function(){return this})),s(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},e.values=j,C.prototype={constructor:C,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!e)for(var t in this)"t"===t.charAt(0)&&r.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(r,n){return a.type="throw",a.arg=e,t.next=r,n&&(t.method="next",t.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,p):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),E(r),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:j(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=void 0),p}},e}function Pe(e,t,r,n,o,i,a){try{var c=e[i](a),s=c.value}catch(e){return void r(e)}c.done?t(s):Promise.resolve(s).then(n,o)}function Ne(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){Pe(i,n,o,a,c,"next",e)}function c(e){Pe(i,n,o,a,c,"throw",e)}a(void 0)}))}}Oe(Se,"GEOM_GRP_DRAW_ID","czs_geoms"),Oe(Se,"Z_INDEX_VECTORS",101),Oe(Se,"Z_INDEX_RASTERS",100),Oe(Se,"Z_INDEX_DRAWING",1e3),Oe(Se,"COLLECTION_FOOTPRINT_CRS",4617),Oe(Se,"MAP_LIMITS_X_MIN",-2750565),Oe(Se,"MAP_LIMITS_Y_MIN",-936657),Oe(Se,"MAP_LIMITS_X_MAX",3583872),Oe(Se,"MAP_LIMITS_Y_MAX",4659267),Oe(Se,"MAP_LIMITS_CRS",3978);var Te=r(379),Ge=r.n(Te),De=r(795),Me=r.n(De),Re=r(569),Fe=r.n(Re),ze=r(565),Be=r.n(ze),Ue=r(216),We=r.n(Ue),Ze=r(589),Ve=r.n(Ze),$e=r(991),qe={};qe.styleTagTransform=Ve(),qe.setAttributes=Be(),qe.insert=Fe().bind(null,"head"),qe.domAPI=Me(),qe.insertStyleElement=We(),Ge()($e.Z,qe),$e.Z&&$e.Z.locals&&$e.Z.locals;var He=window.cgpv,Ye=He.react,Xe=He.createRoot,Je=document.documentElement.lang||"en";Xe(document.getElementById("root")).render((0,e.jsxs)(Ye.StrictMode,{children:[(0,e.jsx)((function(){var t,r=window.cgpv,n=r.react,o=n.useEffect,i=n.useRef,a="mapCZS",c=i(!1);function s(){t.startDrawing()}function u(){return l.apply(this,arguments)}function l(){return(l=Ne(ke().mark((function e(){return ke().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.clearDrawingAsync();case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function p(e){return f.apply(this,arguments)}function f(){return(f=Ne(ke().mark((function e(r){return ke().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.extractFeaturesAsync(r);case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function h(e){return d.apply(this,arguments)}function d(){return(d=Ne(ke().mark((function e(r){return ke().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.zoomToCollection(r);case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function v(e){return y.apply(this,arguments)}function y(){return(y=Ne(ke().mark((function e(t){return ke().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:window.open(P.getQGISServiceHost()+t.org_schema+"/"+t.parent+"?service=WMS&version=1.3.0&request=GetCapabilities&LAYERS="+t.short_name,"_blank");case 1:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function m(e){return g.apply(this,arguments)}function g(){return(g=Ne(ke().mark((function e(t){var r;return ke().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(r=P.getContentMetadata(t.links))&&window.open(r.href,"_blank");case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function w(e,t){return _.apply(this,arguments)}function _(){return(_=Ne(ke().mark((function e(r,n){return ke().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.layerOrderHigherAsync(r,n);case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function b(e,t){return x.apply(this,arguments)}function x(){return(x=Ne(ke().mark((function e(r,n){return ke().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.layerOrderLowerAsync(r,n);case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function A(e,t,r,n){return E.apply(this,arguments)}function E(){return(E=Ne(ke().mark((function e(r,n,o,i){return ke().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.updateCollectionCheckedAsync(r,n,o,i);case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return o((function(){return c.current||r.init((function(){r.api.utilities.showMessage(a,"This is a pre-alpha release. Only for experimentation purposes."),t=new Se(r,a,document.documentElement.lang);var e={id:"AppbarPanelButtonId",tooltip:"Clip Zip Ship",tooltipPlacement:"right",children:r.react.createElement(r.ui.elements.AppsIcon)},n={panelId:"CZSPanelID",title:"Clip Zip Ship",content:r.react.createElement(fe,{handleStartDrawing:s,handleClearDrawing:u,handleExtractFeatures:p,handleZoomToCollection:h,handleViewCapabilitiesCollection:v,handleViewMetadataCollection:m,handleHigher:w,handleLower:b,handleCollectionCheckedChanged:A}),width:450};r.api.map(a).appBarButtons.createAppbarPanel(e,n,null)})),function(){return c.current=!0}}),[]),(0,e.jsx)("div",{})}),{}),(0,e.jsx)("div",{id:"mapCZS",className:"llwp-map",style:{height:"100vh"},"data-lang":Je,"data-config":JSON.stringify({map:{interaction:"dynamic",viewSettings:{zoom:4,center:[-100,50],projection:3978},basemapOptions:{basemapId:"simple",shaded:!0,labeled:!1},listOfGeoviewLayerConfig:[]},theme:"dark",components:["north-arrow"],appBar:[],corePackages:[],suportedLanguages:["en","fr"]})})]}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,