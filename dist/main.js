/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var e={991:(e,t,r)=>{r.d(t,{Z:()=>c});var n=r(537),o=r.n(n),i=r(645),a=r.n(i)()(o());a.push([e.id,"h1{color:red}.accordion-group{margin:10px 0px}.MuiAccordionSummary-content{padding-left:10px}.MuiAccordion-root{background-color:rgba(0,95,203,.3215686275)}.MuiAccordion-root.accordion-theme{background-color:rgba(0,136,203,.4705882353)}.accordion-theme ul{cursor:pointer}.accordion-theme.MuiAccordion-root{box-shadow:none}.need-help{background-color:#e4b152}.help-text{font-size:smaller}.loading-spinner{position:relative;margin:50px 0px 70px 0px}","",{version:3,sources:["webpack://./src/app.scss"],names:[],mappings:"AAAA,GACE,SAAA,CAGF,iBACE,eAAA,CAGF,6BACE,iBAAA,CAGF,mBACE,2CAAA,CAGF,mCACE,4CAAA,CAGF,oBACE,cAAA,CAEF,mCACE,eAAA,CAGF,WACE,wBAAA,CAGF,WACE,iBAAA,CAGF,iBACE,iBAAA,CACA,wBAAA",sourcesContent:["h1 {\r\n  color: red;\r\n}\r\n\r\n.accordion-group {\r\n  margin: 10px 0px;\r\n}\r\n\r\n.MuiAccordionSummary-content {\r\n  padding-left: 10px;\r\n}\r\n\r\n.MuiAccordion-root {\r\n  background-color: #005fcb52;\r\n}\r\n\r\n.MuiAccordion-root.accordion-theme  {\r\n  background-color: #0088cb78;\r\n}\r\n\r\n.accordion-theme ul {\r\n  cursor: pointer;\r\n}\r\n.accordion-theme.MuiAccordion-root {\r\n  box-shadow: none;\r\n}\r\n\r\n.need-help {\r\n  background-color: #e4b152;\r\n}\r\n\r\n.help-text {\r\n  font-size: smaller;\r\n}\r\n\r\n.loading-spinner {\r\n  position: relative;\r\n  margin: 50px 0px 70px 0px;\r\n}"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(n)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(a[l]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);n&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},418:e=>{var t=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var i,a,c=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var s in i=Object(arguments[l]))r.call(i,s)&&(c[s]=i[s]);if(t){a=t(i);for(var u=0;u<a.length;u++)n.call(i,a[u])&&(c[a[u]]=i[a[u]])}}return c}},251:(e,t,r)=>{r(418);var n=r(294),o=60103;if("function"==typeof Symbol&&Symbol.for){var i=Symbol.for;o=i("react.element"),i("react.fragment")}var a=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c=Object.prototype.hasOwnProperty,l={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,r){var n,i={},s=null,u=null;for(n in void 0!==r&&(s=""+r),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(u=t.ref),t)c.call(t,n)&&!l.hasOwnProperty(n)&&(i[n]=t[n]);if(e&&e.defaultProps)for(n in t=e.defaultProps)void 0===i[n]&&(i[n]=t[n]);return{$$typeof:o,type:e,key:s,ref:u,props:i,_owner:a.current}}t.jsx=s,t.jsxs=s},408:(e,t,r)=>{var n=r(418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,c=60110,l=60112;t.Suspense=60113;var s=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),c=f("react.context"),l=f("react.forward_ref"),t.Suspense=f("react.suspense"),s=f("react.memo"),u=f("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function d(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function h(e,t,r){this.props=e,this.context=t,this.refs=y,this.updater=r||m}function v(){}function g(e,t,r){this.props=e,this.context=t,this.refs=y,this.updater=r||m}h.prototype.isReactComponent={},h.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(d(85));this.updater.enqueueSetState(this,e,t,"setState")},h.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=h.prototype;var b=g.prototype=new v;b.constructor=g,n(b,h.prototype),b.isPureReactComponent=!0;var _={current:null},A=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function C(e,t,r){var n,i={},a=null,c=null;if(null!=t)for(n in void 0!==t.ref&&(c=t.ref),void 0!==t.key&&(a=""+t.key),t)A.call(t,n)&&!w.hasOwnProperty(n)&&(i[n]=t[n]);var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){for(var s=Array(l),u=0;u<l;u++)s[u]=arguments[u+2];i.children=s}if(e&&e.defaultProps)for(n in l=e.defaultProps)void 0===i[n]&&(i[n]=l[n]);return{$$typeof:o,type:e,key:a,ref:c,props:i,_owner:_.current}}function x(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var j=/\/+/g;function E(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function S(e,t,r,n,a){var c=typeof e;"undefined"!==c&&"boolean"!==c||(e=null);var l=!1;if(null===e)l=!0;else switch(c){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case o:case i:l=!0}}if(l)return a=a(l=e),e=""===n?"."+E(l,0):n,Array.isArray(a)?(r="",null!=e&&(r=e.replace(j,"$&/")+"/"),S(a,t,r,"",(function(e){return e}))):null!=a&&(x(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,r+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(j,"$&/")+"/")+e)),t.push(a)),1;if(l=0,n=""===n?".":n+":",Array.isArray(e))for(var s=0;s<e.length;s++){var u=n+E(c=e[s],s);l+=S(c,t,r,u,a)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),s=0;!(c=e.next()).done;)l+=S(c=c.value,t,r,u=n+E(c,s++),a);else if("object"===c)throw t=""+e,Error(d(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function O(e,t,r){if(null==e)return e;var n=[],o=0;return S(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function k(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var P={current:null};function T(){var e=P.current;if(null===e)throw Error(d(321));return e}var I={ReactCurrentDispatcher:P,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:_,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:O,forEach:function(e,t,r){O(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!x(e))throw Error(d(143));return e}},t.Component=h,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,t.cloneElement=function(e,t,r){if(null==e)throw Error(d(267,e));var i=n({},e.props),a=e.key,c=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(c=t.ref,l=_.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in t)A.call(t,u)&&!w.hasOwnProperty(u)&&(i[u]=void 0===t[u]&&void 0!==s?s[u]:t[u])}var u=arguments.length-2;if(1===u)i.children=r;else if(1<u){s=Array(u);for(var f=0;f<u;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:o,type:e.type,key:a,ref:c,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:c,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=C,t.createFactory=function(e){var t=C.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=x,t.lazy=function(e){return{$$typeof:u,_payload:{_status:-1,_result:e},_init:k}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return T().useCallback(e,t)},t.useContext=function(e,t){return T().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return T().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return T().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return T().useLayoutEffect(e,t)},t.useMemo=function(e,t){return T().useMemo(e,t)},t.useReducer=function(e,t,r){return T().useReducer(e,t,r)},t.useRef=function(e){return T().useRef(e)},t.useState=function(e){return T().useState(e)},t.version="17.0.2"},294:(e,t,r)=>{e.exports=r(408)},893:(e,t,r)=>{e.exports=r(251)},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var i={},a=[],c=0;c<e.length;c++){var l=e[c],s=n.base?l[0]+n.base:l[0],u=i[s]||0,f="".concat(s," ").concat(u);i[s]=u+1;var p=r(f),d={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(d);else{var m=o(d,n);n.byIndex=c,t.splice(c,0,{identifier:f,updater:m,references:1})}a.push(f)}return a}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var i=n(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=r(i[a]);t[c].references--}for(var l=n(e,o),s=0;s<i.length;s++){var u=r(i[s]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=l}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={id:n,exports:{}};return e[n](i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.nc=void 0,(()=>{var e=r(893);function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,a(n.key),n)}}function o(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function i(e,t,r){return(t=a(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e){var r=function(e,r){if("object"!==t(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==t(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===t(r)?r:String(r)}var c=o((function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}));i(c,"getCollectionsPOST",(function(e,t,r){return new Promise((function(n,o){fetch("http://localhost:5000/collections?f=json&lang="+e,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST",body:JSON.stringify({geom:t,"geom-crs":r})}).then((function(e){200===e.status?e.json().then((function(e){n(e.collections)})):(alert("failed getCollections"),console.log(e),o("failed"))})).catch((function(e){alert("bug getCollections"),console.log(e),o(e)}))}))})),i(c,"getFeatures",(function(e,t,r){var n="http://localhost:5000/collections/{collectionId}/items?f=json".replace("{collectionId}",e.id);return t&&(n+="&geom="+t+"&geom-crs="+r+"&clip=true"),new Promise((function(t,r){fetch(n,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"}).then((function(n){200===n.status?n.json().then((function(r){t({collection:e,data:r})})):(alert("failed getFeatures"),console.log(n),r("failed"))})).catch((function(e){alert("failed getFeatures"),console.log(e),r(e)}))}))})),i(c,"getCoverage",(function(e,t,r){var n="http://localhost:5000/collections/{collectionId}/coverage?f=json".replace("{collectionId}",e.id);return t&&(n+="&geom="+t+"&geom-crs="+r),new Promise((function(t,r){fetch(n,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"}).then((function(n){200===n.status?n.json().then((function(r){t({collection:e,data:r})})):(alert("failed getCoverage"),console.log(n),r("failed"))})).catch((function(e){alert("failed getCoverage"),console.log(e),r(e)}))}))})),i(c,"extractFeatures",(function(e,t,r,n){return new Promise((function(o,i){fetch("http://localhost:5000/processes/extract/execution",{headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST",body:JSON.stringify({inputs:{geom:r,geom_crs:n,collections:e,email:t}})}).then((function(e){200===e.status?e.json().then((function(e){o(e)})):(alert("failed extractFeatures"),console.log(e),i("failed"))})).catch((function(e){alert("failed extractFeatures"),console.log(e),i(e)}))}))}));const l=JSON.parse('{"czs":{"clear":"Clear","list_feature_colls":"List of vector collections","list_coverage_colls":"List of raster collections","enter_email":"Enter your email","show_preview":"Show preview on map","extract_features":"Extract features","help_title":"Need help?","help_text":"Hi,<br/>To submit your dynamic data extraction request, you must meet the following 3 criterias in the order of your choice:<ol><li>Select one or many collections</li><li>Draw an extraction polygon on the map</li><li>Type in your email address</li></ol>"}}'),s=JSON.parse('{"czs":{"clear":"Effacer","list_feature_colls":"Liste des collections vectorielles","list_coverage_colls":"Liste des collections matricielles","enter_email":"Entrer votre adresse courriel","show_preview":"Voir un aperçu sur la carte","extract_features":"Extraire les données","help_title":"Besoin d\'aide?","help_text":"Bonjour,<br/>Pour soumettre votre demande d\'extraction de données dynamique, il suffit de remplir les 3 conditions suivantes dans l\'ordre que vous désirez:<ol><li>Sélectionner une ou plusieurs collections</li><li>Tracer un polygone de découpage sur la carte</li><li>Entrer votre adresse courriel</li></ol>"}}');function u(e){return u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u(e)}function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],l=!0,s=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;l=!1}else for(;!(l=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);l=!0);}catch(e){s=!0,o=e}finally{try{if(!l&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(s)throw o}}return c}}(e,t)||function(e,t){if(e){if("string"==typeof e)return p(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?p(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function p(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function d(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,v(n.key),n)}}function m(e,t,r){return t&&d(e.prototype,t),r&&d(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function y(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function h(e,t,r){return(t=v(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function v(e){var t=function(e,t){if("object"!==u(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==u(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===u(t)?t:String(t)}var g="mapWM",b="czs_geoms",_="czs_geoms_res",A=m((function e(){y(this,e),h(this,"features",[]),h(this,"coverages",[])})),w=m((function e(t,r){y(this,e),this.theme=t,this.collections=r}));const C=function(){var t,r,n=window.cgpv,o=n.api,i=n.react,a=n.types,u=n.ui,p=(n.ol,n.olStyle),d=n.olInteraction,m=(n.olFormat,n.useTranslation),y=o.showMessage,h=o.geoUtilities.geometryToWKT,v=(i.createElement,i.useState),C=i.useEffect,x=(i.useCallback,u.makeStyles),j=(u.useTheme,u.elements),E=j.Button,S=j.CircularProgress,O=j.Accordion,k=j.CheckboxListAlex,P=j.TextField,T=d.Draw,I=d.Modify,R=d.Snap,M=p.Style,N=p.Stroke,F=p.Fill,L=p.Circle,G=m(),$=G.t,B=G.i18n,z=f(v([]),2),U=z[0],D=z[1],q=f(v([]),2),W=q[0],Z=q[1],V=f(v({}),2),H=V[0],J=V[1],Y=f(v({}),2),K=Y[0],X=Y[1],Q=f(v({}),2),ee=Q[0],te=Q[1],re=f(v({}),2),ne=re[0],oe=re[1],ie=f(v({}),2),ae=ie[0],ce=ie[1],le=f(v("alexandre.roy@nrcan-rncan.gc.ca"),2),se=le[0],ue=le[1],fe=f(v(!1),2),pe=fe[0],de=fe[1],me=f(v(!1),2),ye=me[0],he=me[1];function ve(){var e=[];return Object.keys(H).forEach((function(t){e=e.concat(H[t])})),e}function ge(){return new M({stroke:new N({color:"orange",width:2}),fill:new F({color:"transparent",stroke:new N({color:"orange",width:2})}),image:new L({radius:4,fill:new F({color:"orange"}),stroke:new N({color:"orange"})})})}function be(){n.api.map(g).layer.vector.deleteGeometriesFromGroup(b)}function _e(e){we(e.features.getArray()[0].getGeometry())}function Ae(e){we(e.feature.getGeometry())}function we(e){var t=h(e);console.log("loadCollections",t),X(t),te({active:!!t}),de(!0),c.getCollectionsPOST(B.language+"-CA",t,3978).then((function(e){var t=new A;e.forEach((function(e){var r;if("feature"==e.itemType?r=t.features:"coverage"==e.itemType&&(r=t.coverages),r){var n,o=null===(n=r)||void 0===n?void 0:n.find((function(t){return t.theme.id==e.theme}));o||(o=new w({id:e.theme,name:e.theme},[]),r.push(o)),o.collections.push(e)}})),D(t.features),Z(t.coverages),de(!1)}))}function Ce(e){return e.theme.name+" ("+e.collections.length+")"}function xe(t,r){return(0,e.jsx)(O,{className:"accordion-theme",items:Object.values(r).map((function(e){return{title:Ce(e),content:je(t,e)}}))})}function je(t,r){return r.collections&&r.collections.length>0?(0,e.jsx)(k,{multiselect:!0,listItems:Object.values(r.collections).map((function(t){var r=function(e){var t=null;return e.forEach((function(e){"text/html"==e.type&&"canonical"==e.rel&&(t=e)})),t}(t.links);return{display:t.title,value:t.id,content:r?(0,e.jsx)("a",{href:r.href,title:r.title,target:"_blank",children:(0,e.jsx)("img",{src:"./img/metadata.png",style:{width:"20px",height:"20px",marginTop:"2px",marginLeft:"5px"}})}):""}})),checkedValues:t+"_"+r.theme.id in H&&H[t+"_"+r.theme.id]||[],checkedCallback:function(e,n,o){return function(e,t,r,n,o){var i,a=e+"_"+t.theme.id;H[a]=o,J(H),oe({active:!(null===(i=ve())||void 0===i||!i.length)}),ce({active:Ee()})}(t,r,0,0,o)}}):null}function Ee(){return!!ve().length&&se.length}return x((function(e){return{positionContainer:{marginLeft:75,backgroundColor:"#fff",padding:10,height:"100%","min-width":400,overflow:"auto",pointerEvents:"initial"},listCollections:{"padding-inline-start":0}}}))(),C((function(){console.log("CZSPanel useEffect"),console.log(a),B.addResourceBundle("en","translation",l),B.addResourceBundle("fr","translation",s),o.event.on(o.eventNames.MAP.EVENT_MAP_LOADED,(function(e){var o=n.api.map(g);we();var i=o.layer.vector.createGeometryGroup(b);o.layer.vector.createGeometryGroup(_),o.layer.vector.setActiveGeometryGroup(_),i.vectorLayer.setStyle(ge());var a=i.vectorSource,c=new I({source:a,style:ge()});o.map.addInteraction(c),c.on("modifyend",_e),function(e,n){(t=new T({source:n,style:[ge()],type:"Polygon"})).on("drawstart",be),t.on("drawend",Ae),e.map.addInteraction(t),r=new R({source:n}),e.map.addInteraction(r)}(o,a)}),g),o.event.on(o.eventNames.MAP.EVENT_MAP_SINGLE_CLICK,(function(e){}),g)}),[]),(0,e.jsxs)("div",{children:[(0,e.jsx)(E,{type:"text",onClick:function(){n.api.map(g).layer.vector.deleteGeometriesFromGroup(b),we()},size:"small",disabled:!ee.active,children:$("czs.clear")}),(0,e.jsx)("div",{className:"loading-spinner-container",children:(0,e.jsx)(S,{isLoaded:!pe,className:"loading-spinner"})}),(0,e.jsxs)("div",{className:"collections-group",children:[(0,e.jsx)(O,{items:[{title:$("czs.list_feature_colls"),content:xe("features",U)}]}),(0,e.jsx)(O,{items:[{title:$("czs.list_coverage_colls"),content:xe("coverages",W)}]})]}),(0,e.jsx)(E,{type:"text",onClick:function(){!function(){he(!0),n.api.map(g).layer.vector.deleteGeometriesFromGroup(_),n.api.map(g).layer.vector.setActiveGeometryGroup(_);var e=[];ve().forEach((function(t){var r,n,o=(r=t,n=[],U.forEach((function(e){n=n.concat(e.collections.filter((function(e){return e.id==r})))})),W.forEach((function(e){n=n.concat(e.collections.filter((function(e){return e.id==r})))})),n.length>0?n[0]:null);"feature"==(null==o?void 0:o.itemType)?e.push(c.getFeatures(o,K,3978)):console.log("SKIPPED COLLECTION TYPE",null==o?void 0:o.itemType)})),Promise.all(e).then((function(e){e.forEach((function(e){console.log("Records",e),e.data.features&&e.data.features.length>0&&("feature"==e.collection.itemType?e.data.features.forEach((function(e){"LineString"==e.geometry.type?(n.api.map(g).layer.vector.addPolyline(e.geometry.coordinates,{style:{strokeColor:"blue",strokeOpacity:.5,strokeWidth:1}}),e.geometry_clipped&&(Array.isArray(e.geometry_clipped.coordinates[0])&&Array.isArray(e.geometry_clipped.coordinates[0][0])||(e.geometry_clipped.coordinates=[e.geometry_clipped.coordinates]),e.geometry_clipped.coordinates.forEach((function(e){n.api.map(g).layer.vector.addPolyline(e,{style:{strokeColor:"green",strokeWidth:2}})})))):"Point"==e.geometry.type?n.api.map(g).layer.vector.addMarkerIcon(e.geometry.coordinates,{style:{anchor:[.5,256],size:[256,256],scale:.1,anchorXUnits:"fraction",anchorYUnits:"pixels",src:"./img/Marker.png"}}):console.log("Unknown geometry type")})):console.log("UNKNOWN COLLECTION TYPE",e.collection.itemType,e))})),he(!1)})).catch((function(e){console.log("ERROR",e),he(!1)}))}()},size:"small",disabled:!ne.active,children:$("czs.show_preview")}),(0,e.jsx)(P,{id:"czs_email",type:"email",placeholder:$("czs.enter_email"),style:{marginTop:30,width:"100%"},onChange:function(e){var t=document.getElementById("czs_email");ue(null==t?void 0:t.value),ce({active:Ee()})},value:se}),(0,e.jsx)(E,{type:"text",onClick:function(){!function(e){he(!0),c.extractFeatures(ve(),e,K,3978).then((function(e){y(g,"Extraction completed, check your emails!"),console.log("EXTRACTION RESULT",e),he(!1)})).catch((function(e){console.log("ERROR",e),he(!1)}))}(se)},size:"small",disabled:!ae.active,children:$("czs.extract_features")}),(0,e.jsx)(O,{className:"need-help",items:[{title:$("czs.help_title"),content:(0,e.jsx)("div",{className:"help-text",dangerouslySetInnerHTML:{__html:$("czs.help_text")}})}]}),(0,e.jsx)("div",{className:"loading-spinner-container",children:(0,e.jsx)(S,{isLoaded:!ye,className:"loading-spinner loading-features"})})]})};var x=r(379),j=r.n(x),E=r(795),S=r.n(E),O=r(569),k=r.n(O),P=r(565),T=r.n(P),I=r(216),R=r.n(I),M=r(589),N=r.n(M),F=r(991),L={};L.styleTagTransform=N(),L.setAttributes=T(),L.insert=k().bind(null,"head"),L.domAPI=S(),L.insertStyleElement=R(),j()(F.Z,L),F.Z&&F.Z.locals&&F.Z.locals;var G=window.cgpv,$=G.react,B=G.reactDOM,z=document.getElementById("root");B.render((0,e.jsx)($.StrictMode,{children:(0,e.jsx)((function(){var t=window.cgpv,r=t.react,n=(r.createElement,r.useState,r.useEffect);return r.useCallback,n((function(){console.log("App useEffect");var e={id:"AppbarPanelButtonId",tooltip:"Clip Zip Ship",tooltipPlacement:"right",children:t.react.createElement(t.ui.elements.AppsIcon)},r={panelId:"CZSPanelID",title:"Clip Zip Ship",content:t.react.createElement(C),width:200};t.api.map("mapWM").appBarButtons.createAppbarPanel(e,r,null)}),[]),(0,e.jsx)("div",{})}),{})}),z)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,