/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={991:(t,e,r)=>{r.d(e,{Z:()=>c});var n=r(537),o=r.n(n),i=r(645),a=r.n(i)()(o());a.push([t.id,".czs-panel{position:relative}.accordion-group{font-size:.9rem;margin-bottom:10px}.accordion-group .MuiTypography-root{font-size:inherit}.layer-option{position:relative;display:inline-block}.layer-order-layers div{display:inline-block}.MuiAccordionSummary-content{padding-left:10px}.MuiAccordion-root{background-color:rgba(0,95,203,.3215686275)}.czs-panel .MuiListItem-root,.czs-panel .MuiListItem-root:hover,.MuiMenuItem-root.MuiMenuItem-gutters{color:#000}.accordion-theme ul{cursor:pointer}.loading-spinner-container{position:absolute;top:40px;right:40px}.loading-spinner-container .loading-spinner .MuiCircularProgress-root{width:60px !important;height:60px !important}.loading-collections .MuiCircularProgress-root{color:rgba(0,95,203,.666)}.SnackbarItem-contentRoot:not(.SnackbarItem-variantError):not(.SnackbarItem-variantWarning):not(.SnackbarItem-variantInfo):not(.SnackbarItem-variantSuccess){background-color:#e4b152 !important}.layer-order-layers.loading{cursor:default;opacity:.4}.layer-order-layers.loading a{pointer-events:none}.MuiPaper-root.MuiMenu-paper{background-color:#a1cdff}.layer-options-wrapper{min-width:100px}.layer-option{vertical-align:middle}.layer-option .MuiListItemIcon-root{min-width:inherit}.layer-option img,.czs_menu_options img{height:20px;width:20px;vertical-align:middle;margin:0px 5px 0px 5px}.need-help{background-color:#e4b152}.czs-jobs{position:relative;margin:20px 0px}.czs-jobs a{color:inherit;font-size:1rem}.czs-jobs table{width:100%}.czs-jobs-cell-info a{text-decoration:none}.czs-jobs-cell-info a:hover{text-decoration:underline}.czs-jobs-cell-progress{width:100px}.czs-jobs-cell-spin{width:20px;text-align:right}.czs-jobs-cell-spin img{vertical-align:middle}.czs-jobs .loading-spinner{position:relative;right:0px;background-color:rgba(0,0,0,0)}.czs-jobs .loading-spinner .MuiCircularProgress-root{position:relative;height:20px !important;width:20px !important}.czs-jobs .job-dismissed:hover{text-decoration:none}.czs-email input{padding:10px 10px;font-size:1rem}.btn-extract{margin:20px 0px}.help-text{font-size:smaller;padding:0px 10px}.is-debug{background-color:red}","",{version:3,sources:["webpack://./src/app.scss"],names:[],mappings:"AAAA,WACE,iBAAA,CAGF,iBACE,eAAA,CACA,kBAAA,CAGF,qCACE,iBAAA,CAGF,cACE,iBAAA,CACA,oBAAA,CAEF,wBACE,oBAAA,CAGF,6BACE,iBAAA,CAGF,mBACE,2CAAA,CAGF,sGAGE,UAAA,CAGF,oBACE,cAAA,CAGF,2BACE,iBAAA,CACA,QAAA,CACA,UAAA,CAGF,sEACE,qBAAA,CACA,sBAAA,CAGF,+CACE,yBAAA,CAGF,6JACE,mCAAA,CAGF,4BACE,cAAA,CACA,UAAA,CAEF,8BACE,mBAAA,CAGF,6BACE,wBAAA,CAGF,uBACE,eAAA,CAGF,cACE,qBAAA,CAGF,oCACE,iBAAA,CAGF,wCAEE,WAAA,CACA,UAAA,CACA,qBAAA,CACA,sBAAA,CAGF,WACE,wBAAA,CAGF,UACE,iBAAA,CACA,eAAA,CAGF,YACE,aAAA,CACA,cAAA,CAGF,gBACE,UAAA,CAGF,sBACE,oBAAA,CAEF,4BACE,yBAAA,CAGF,wBACE,WAAA,CAGF,oBACE,UAAA,CACA,gBAAA,CAEF,wBACE,qBAAA,CAGF,2BACE,iBAAA,CACA,SAAA,CACA,8BAAA,CAGF,qDACE,iBAAA,CACA,sBAAA,CACA,qBAAA,CAGF,+BACE,oBAAA,CAGF,iBACE,iBAAA,CACA,cAAA,CAGF,aACE,eAAA,CAGF,WACE,iBAAA,CACA,gBAAA,CAGF,UACE,oBAAA",sourcesContent:[".czs-panel {\n  position: relative;\n}\n\n.accordion-group {\n  font-size: 0.9rem;\n  margin-bottom: 10px;\n}\n\n.accordion-group .MuiTypography-root {\n  font-size: inherit;\n}\n\n.layer-option {\n  position: relative;\n  display: inline-block;\n}\n.layer-order-layers div {\n  display: inline-block;\n}\n\n.MuiAccordionSummary-content {\n  padding-left: 10px;\n}\n\n.MuiAccordion-root {\n  background-color: #005fcb52;\n}\n\n.czs-panel .MuiListItem-root,\n.czs-panel .MuiListItem-root:hover,\n.MuiMenuItem-root.MuiMenuItem-gutters {\n  color: black;\n}\n\n.accordion-theme ul {\n  cursor: pointer;\n}\n\n.loading-spinner-container {\n  position: absolute;\n  top: 40px;\n  right: 40px;\n}\n\n.loading-spinner-container .loading-spinner .MuiCircularProgress-root {\n  width: 60px !important;\n  height: 60px !important;\n}\n\n.loading-collections .MuiCircularProgress-root {\n  color: rgba(0, 95, 203, 0.666);\n}\n\n.SnackbarItem-contentRoot:not(.SnackbarItem-variantError):not(.SnackbarItem-variantWarning):not(.SnackbarItem-variantInfo):not(.SnackbarItem-variantSuccess) {\n  background-color: #e4b152 !important;\n}\n\n.layer-order-layers.loading {\n  cursor: default;\n  opacity: 0.4;\n}\n.layer-order-layers.loading a {\n  pointer-events: none;\n}\n\n.MuiPaper-root.MuiMenu-paper {\n  background-color: #a1cdff;\n}\n\n.layer-options-wrapper {\n  min-width: 100px;\n}\n\n.layer-option {\n  vertical-align: middle;\n}\n\n.layer-option .MuiListItemIcon-root {\n  min-width: inherit;\n}\n\n.layer-option img,\n.czs_menu_options img {\n  height: 20px;\n  width: 20px;\n  vertical-align: middle;\n  margin: 0px 5px 0px 5px;\n}\n\n.need-help {\n  background-color: #e4b152;\n}\n\n.czs-jobs {\n  position: relative;\n  margin: 20px 0px;\n}\n\n.czs-jobs a {\n  color: inherit;\n  font-size: 1rem;\n}\n\n.czs-jobs table {\n  width: 100%;\n}\n\n.czs-jobs-cell-info a {\n  text-decoration: none;\n}\n.czs-jobs-cell-info a:hover {\n  text-decoration: underline;\n}\n\n.czs-jobs-cell-progress {\n  width: 100px;\n}\n\n.czs-jobs-cell-spin {\n  width: 20px;\n  text-align: right;\n}\n.czs-jobs-cell-spin img {\n  vertical-align: middle;\n}\n\n.czs-jobs .loading-spinner {\n  position: relative;\n  right: 0px;\n  background-color: transparent;\n}\n\n.czs-jobs .loading-spinner .MuiCircularProgress-root  {\n  position: relative;\n  height: 20px !important;\n  width: 20px !important;\n}\n\n.czs-jobs .job-dismissed:hover {\n  text-decoration: none;\n}\n\n.czs-email input {\n  padding: 10px 10px;\n  font-size: 1rem;\n}\n\n.btn-extract {\n  margin: 20px 0px;\n}\n\n.help-text {\n  font-size: smaller;\n  padding: 0px 10px;\n}\n\n.is-debug {\n  background-color: red;\n}\n"],sourceRoot:""}]);const c=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(n)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var u=0;u<t.length;u++){var l=[].concat(t[u]);n&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),r&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=r):l[2]=r),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},418:t=>{var e=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},r=0;r<10;r++)e["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(t){n[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(t){return!1}}()?Object.assign:function(t,o){for(var i,a,c=function(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}(t),s=1;s<arguments.length;s++){for(var u in i=Object(arguments[s]))r.call(i,u)&&(c[u]=i[u]);if(e){a=e(i);for(var l=0;l<a.length;l++)n.call(i,a[l])&&(c[a[l]]=i[a[l]])}}return c}},251:(t,e,r)=>{r(418);var n=r(294),o=60103;if("function"==typeof Symbol&&Symbol.for){var i=Symbol.for;o=i("react.element"),i("react.fragment")}var a=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c=Object.prototype.hasOwnProperty,s={key:!0,ref:!0,__self:!0,__source:!0};function u(t,e,r){var n,i={},u=null,l=null;for(n in void 0!==r&&(u=""+r),void 0!==e.key&&(u=""+e.key),void 0!==e.ref&&(l=e.ref),e)c.call(e,n)&&!s.hasOwnProperty(n)&&(i[n]=e[n]);if(t&&t.defaultProps)for(n in e=t.defaultProps)void 0===i[n]&&(i[n]=e[n]);return{$$typeof:o,type:t,key:u,ref:l,props:i,_owner:a.current}}e.jsx=u,e.jsxs=u},408:(t,e,r)=>{var n=r(418),o=60103,i=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var a=60109,c=60110,s=60112;e.Suspense=60113;var u=60115,l=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),e.Fragment=f("react.fragment"),e.StrictMode=f("react.strict_mode"),e.Profiler=f("react.profiler"),a=f("react.provider"),c=f("react.context"),s=f("react.forward_ref"),e.Suspense=f("react.suspense"),u=f("react.memo"),l=f("react.lazy")}var p="function"==typeof Symbol&&Symbol.iterator;function h(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)e+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var d={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v={};function y(t,e,r){this.props=t,this.context=e,this.refs=v,this.updater=r||d}function m(){}function g(t,e,r){this.props=t,this.context=e,this.refs=v,this.updater=r||d}y.prototype.isReactComponent={},y.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(h(85));this.updater.enqueueSetState(this,t,e,"setState")},y.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},m.prototype=y.prototype;var _=g.prototype=new m;_.constructor=g,n(_,y.prototype),_.isPureReactComponent=!0;var w={current:null},b=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function A(t,e,r){var n,i={},a=null,c=null;if(null!=e)for(n in void 0!==e.ref&&(c=e.ref),void 0!==e.key&&(a=""+e.key),e)b.call(e,n)&&!x.hasOwnProperty(n)&&(i[n]=e[n]);var s=arguments.length-2;if(1===s)i.children=r;else if(1<s){for(var u=Array(s),l=0;l<s;l++)u[l]=arguments[l+2];i.children=u}if(t&&t.defaultProps)for(n in s=t.defaultProps)void 0===i[n]&&(i[n]=s[n]);return{$$typeof:o,type:t,key:a,ref:c,props:i,_owner:w.current}}function E(t){return"object"==typeof t&&null!==t&&t.$$typeof===o}var C=/\/+/g;function j(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function O(t,e,r,n,a){var c=typeof t;"undefined"!==c&&"boolean"!==c||(t=null);var s=!1;if(null===t)s=!0;else switch(c){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case o:case i:s=!0}}if(s)return a=a(s=t),t=""===n?"."+j(s,0):n,Array.isArray(a)?(r="",null!=t&&(r=t.replace(C,"$&/")+"/"),O(a,e,r,"",(function(t){return t}))):null!=a&&(E(a)&&(a=function(t,e){return{$$typeof:o,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(a,r+(!a.key||s&&s.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+t)),e.push(a)),1;if(s=0,n=""===n?".":n+":",Array.isArray(t))for(var u=0;u<t.length;u++){var l=n+j(c=t[u],u);s+=O(c,e,r,l,a)}else if(l=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=p&&t[p]||t["@@iterator"])?t:null}(t),"function"==typeof l)for(t=l.call(t),u=0;!(c=t.next()).done;)s+=O(c=c.value,e,r,l=n+j(c,u++),a);else if("object"===c)throw e=""+t,Error(h(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return s}function L(t,e,r){if(null==t)return t;var n=[],o=0;return O(t,n,"","",(function(t){return e.call(r,t,o++)})),n}function I(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var S={current:null};function k(){var t=S.current;if(null===t)throw Error(h(321));return t}var P={ReactCurrentDispatcher:S,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:n};e.Children={map:L,forEach:function(t,e,r){L(t,(function(){e.apply(this,arguments)}),r)},count:function(t){var e=0;return L(t,(function(){e++})),e},toArray:function(t){return L(t,(function(t){return t}))||[]},only:function(t){if(!E(t))throw Error(h(143));return t}},e.Component=y,e.PureComponent=g,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=P,e.cloneElement=function(t,e,r){if(null==t)throw Error(h(267,t));var i=n({},t.props),a=t.key,c=t.ref,s=t._owner;if(null!=e){if(void 0!==e.ref&&(c=e.ref,s=w.current),void 0!==e.key&&(a=""+e.key),t.type&&t.type.defaultProps)var u=t.type.defaultProps;for(l in e)b.call(e,l)&&!x.hasOwnProperty(l)&&(i[l]=void 0===e[l]&&void 0!==u?u[l]:e[l])}var l=arguments.length-2;if(1===l)i.children=r;else if(1<l){u=Array(l);for(var f=0;f<l;f++)u[f]=arguments[f+2];i.children=u}return{$$typeof:o,type:t.type,key:a,ref:c,props:i,_owner:s}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:c,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:t},t.Consumer=t},e.createElement=A,e.createFactory=function(t){var e=A.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:s,render:t}},e.isValidElement=E,e.lazy=function(t){return{$$typeof:l,_payload:{_status:-1,_result:t},_init:I}},e.memo=function(t,e){return{$$typeof:u,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return k().useCallback(t,e)},e.useContext=function(t,e){return k().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return k().useEffect(t,e)},e.useImperativeHandle=function(t,e,r){return k().useImperativeHandle(t,e,r)},e.useLayoutEffect=function(t,e){return k().useLayoutEffect(t,e)},e.useMemo=function(t,e){return k().useMemo(t,e)},e.useReducer=function(t,e,r){return k().useReducer(t,e,r)},e.useRef=function(t){return k().useRef(t)},e.useState=function(t){return k().useState(t)},e.version="17.0.2"},294:(t,e,r)=>{t.exports=r(408)},893:(t,e,r)=>{t.exports=r(251)},379:t=>{var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var i={},a=[],c=0;c<t.length;c++){var s=t[c],u=n.base?s[0]+n.base:s[0],l=i[u]||0,f="".concat(u," ").concat(l);i[u]=l+1;var p=r(f),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var d=o(h,n);n.byIndex=c,e.splice(c,0,{identifier:f,updater:d,references:1})}a.push(f)}return a}function o(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,o){var i=n(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var c=r(i[a]);e[c].references--}for(var s=n(t,o),u=0;u<i.length;u++){var l=r(i[u]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}i=s}}},569:t=>{var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,r)=>{t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={id:n,exports:{}};return t[n](i,i.exports,r),i.exports}r.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return r.d(e,{a:e}),e},r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&!t;)t=n[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t})(),r.nc=void 0,(()=>{var t=r(893);function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(t)}function n(t,r){for(var n=0;n<r.length;n++){var o=r[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,(void 0,i=function(t,r){if("object"!==e(t)||null===t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var o=n.call(t,"string");if("object"!==e(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(o.key),"symbol"===e(i)?i:String(i)),o)}var i}function o(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=o((function t(e,r){i(this,t),this.theme=e,this.parents=r})),c=o((function t(e,r,n){i(this,t),this.theme=e,this.parent=r,this.collections=n})),s="czs/engine/ENGINE-LOAD_COLLECTIONS_STARTED",u="czs/engine/ENGINE-LOAD_COLLECTIONS_ENDED",l="czs/engine/ENGINE-LOAD_COLLECTIONS_FEATURES",f="czs/engine/ENGINE-LOAD_COLLECTIONS_COVERAGES",p="czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_STARTED",h="czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_FOOTPRINT",d="czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_FOOTPRINT_NO_GEOM",v="czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_ENDED",y="czs/engine/ENGINE-COLLECTION_CHANGED_STARTED",m="czs/engine/ENGINE-COLLECTION_CHANGED_ENDED",g="czs/engine/ENGINE-EXTRACT_STARTED",_="czs/engine/ENGINE-LAYER_ORDERED",w="czs/engine/ENGINE-ERROR",b="czs/engine/ENGINE_ERROR_ZOOMING_OUTSIDE",x="czs/engine/ENGINE-ERROR_SHOWING_COLLECTION",A="czs/engine/ENGINE-ERROR_EXTRACTING";function E(){E=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,r){return t[e]=r}}function u(t,e,r,o){var i=e&&e.prototype instanceof p?e:p,a=Object.create(i.prototype),c=new O(o||[]);return n(a,"_invoke",{value:b(t,r,c)}),a}function l(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var f={};function p(){}function h(){}function d(){}var v={};s(v,i,(function(){return this}));var y=Object.getPrototypeOf,m=y&&y(y(L([])));m&&m!==e&&r.call(m,i)&&(v=m);var g=d.prototype=p.prototype=Object.create(v);function _(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function o(n,i,a,c){var s=l(t[n],t,i);if("throw"!==s.type){var u=s.arg,f=u.value;return f&&"object"==j(f)&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){o("next",t,a,c)}),(function(t){o("throw",t,a,c)})):e.resolve(f).then((function(t){u.value=t,a(u)}),(function(t){return o("throw",t,a,c)}))}c(s.arg)}var i;n(this,"_invoke",{value:function(t,r){function n(){return new e((function(e,n){o(t,r,e,n)}))}return i=i?i.then(n,n):n()}})}function b(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===f)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var s=l(t,e,r);if("normal"===s.type){if(n=r.done?"completed":"suspendedYield",s.arg===f)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n="completed",r.method="throw",r.arg=s.arg)}}}function x(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=void 0,x(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),f;var o=l(n,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,f;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function C(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function O(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function L(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:I}}function I(){return{value:void 0,done:!0}}return h.prototype=d,n(g,"constructor",{value:d,configurable:!0}),n(d,"constructor",{value:h,configurable:!0}),h.displayName=s(d,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===h||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,s(t,c,"GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},_(w.prototype),s(w.prototype,a,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new w(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},_(g),s(g,c,"Generator"),s(g,i,(function(){return this})),s(g,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=L,O.prototype={constructor:O,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type="throw",a.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),C(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;C(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:L(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),f}},t}function C(t,e,r,n,o,i,a){try{var c=t[i](a),s=c.value}catch(t){return void r(t)}c.done?e(s):Promise.resolve(s).then(n,o)}function j(t){return j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},j(t)}function O(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,S(n.key),n)}}function L(t,e,r){return e&&O(t.prototype,e),r&&O(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function I(t,e,r){return(e=S(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function S(t){var e=function(t,e){if("object"!==j(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==j(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===j(e)?e:String(e)}var k=L((function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}));I(k,"isLocal",(function(){return"localhost"===window.location.hostname})),I(k,"getPygeoapiHost",(function(){return k.isLocal()?"http://localhost:5000":PYGEOAPI_URL_ROOT})),I(k,"getQGISServiceHost",(function(){return QGIS_SERVICE_URL_ROOT})),I(k,"getContentMetadata",(function(t){var e=null;return t.forEach((function(t){"text/html"==t.type&&"canonical"==t.rel&&(e=t)})),e})),I(k,"sortAlphabetically",(function(t,e){return t<e?-1:t>e?1:0})),I(k,"delay",function(){var t,e=(t=E().mark((function t(e){return E().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise((function(t){setTimeout(t,e)})));case 1:case"end":return t.stop()}}),t)})),function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(t){C(i,n,o,a,c,"next",t)}function c(t){C(i,n,o,a,c,"throw",t)}a(void 0)}))});return function(t){return e.apply(this,arguments)}}());const P=JSON.parse('{"czs":{"draw":"Draw extraction area","clear":"Clear extraction area","list_feature_colls":"List of vector collections","list_coverage_colls":"List of raster collections","enter_email":"Enter your email","extract_features":"Extract data","help_title":"Need help?","layer_options":"Options...","zoom_to":"Zoom To","view_capabilities":"View Capabilities","view_metadata":"View Metadata","layer_bring_to_front":"Bring To Front","layer_send_to_back":"Send To Back","success_extraction_completed":"Extraction completed, check your emails!","success_extraction_failed":"Extraction failed","warning_extraction_area_too_big":"Extraction area too big for collection","warning_extraction_area_missing":"Missing an extraction area, only showing the data footprints","error_some_elements_outside":"Some elements were outside map extent limits.","help_text":"Hi,<br/>To submit your dynamic data extraction request, you must meet the following 3 criterias in the order of your choice:<ol><li>Select one or many collections</li><li>Draw an extraction polygon on the map</li><li>Type in your email address</li></ol><br/>For further assistance, contact: <a href=\'mailto:geodiscoverydatadissemination-diffusiondesdonneesgeodecouverte@nrcan-rncan.gc.ca\'>EMAIL</a>"}}'),T=JSON.parse('{"czs":{"draw":"Dessiner une aire d\'extraction","clear":"Effacer l\'aire d\'extraction","list_feature_colls":"Liste des collections vectorielles","list_coverage_colls":"Liste des collections matricielles","enter_email":"Entrer votre adresse courriel","extract_features":"Extraire les données","help_title":"Besoin d\'aide?","layer_options":"Options...","zoom_to":"Cadrer la carte","view_capabilities":"Visualiser les capacités","view_metadata":"Visualiser les métadonnées","layer_bring_to_front":"Placer en avant","layer_send_to_back":"Placer en arrière","success_extraction_completed":"Extraction complété, regardez vos courriels!","success_extraction_failed":"Extraction échouée","warning_extraction_area_too_big":"Zone d\'extraction trop grande pour la collection","warning_extraction_area_missing":"Zone d\'extraction manquante, seulement les empreintes des données sont affichés","error_some_elements_outside":"Certains éléments sont en dehors de l\'étendu cartographique.","help_text":"Bonjour,<br/>Pour soumettre votre demande d\'extraction de données dynamique, il suffit de remplir les 3 conditions suivantes dans l\'ordre que vous désirez:<ol><li>Sélectionner une ou plusieurs collections</li><li>Tracer un polygone de découpage sur la carte</li><li>Entrer votre adresse courriel</li></ol><br/>Pour de l\'aide supplémentaire, contactez: <a href=\'mailto:geodiscoverydatadissemination-diffusiondesdonneesgeodecouverte@nrcan-rncan.gc.ca\'>EMAIL</a>"}}');function N(){N=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,r){return t[e]=r}}function u(t,e,r,o){var i=e&&e.prototype instanceof p?e:p,a=Object.create(i.prototype),c=new C(o||[]);return n(a,"_invoke",{value:b(t,r,c)}),a}function l(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var f={};function p(){}function h(){}function d(){}var v={};s(v,i,(function(){return this}));var y=Object.getPrototypeOf,m=y&&y(y(j([])));m&&m!==e&&r.call(m,i)&&(v=m);var g=d.prototype=p.prototype=Object.create(v);function _(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function o(n,i,a,c){var s=l(t[n],t,i);if("throw"!==s.type){var u=s.arg,f=u.value;return f&&"object"==M(f)&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){o("next",t,a,c)}),(function(t){o("throw",t,a,c)})):e.resolve(f).then((function(t){u.value=t,a(u)}),(function(t){return o("throw",t,a,c)}))}c(s.arg)}var i;n(this,"_invoke",{value:function(t,r){function n(){return new e((function(e,n){o(t,r,e,n)}))}return i=i?i.then(n,n):n()}})}function b(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===f)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var s=l(t,e,r);if("normal"===s.type){if(n=r.done?"completed":"suspendedYield",s.arg===f)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n="completed",r.method="throw",r.arg=s.arg)}}}function x(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=void 0,x(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),f;var o=l(n,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,f;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function E(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function j(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return h.prototype=d,n(g,"constructor",{value:d,configurable:!0}),n(d,"constructor",{value:h,configurable:!0}),h.displayName=s(d,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===h||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,s(t,c,"GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},_(w.prototype),s(w.prototype,a,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new w(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},_(g),s(g,c,"Generator"),s(g,i,(function(){return this})),s(g,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=j,C.prototype={constructor:C,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type="throw",a.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),E(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:j(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),f}},t}function G(t,e,r,n,o,i,a){try{var c=t[i](a),s=c.value}catch(t){return void r(t)}c.done?e(s):Promise.resolve(s).then(n,o)}function D(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(t){G(i,n,o,a,c,"next",t)}function c(t){G(i,n,o,a,c,"throw",t)}a(void 0)}))}}function M(t){return M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},M(t)}function R(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,B(n.key),n)}}function F(t,e,r){return e&&R(t.prototype,e),r&&R(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function z(t,e,r){return(e=B(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function B(t){var e=function(t,e){if("object"!==M(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==M(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===M(e)?e:String(e)}var U=F((function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}));z(U,"getCollectionsPOSTAsync",function(){var t=D(N().mark((function t(e,r,n){var o;return N().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=new Promise((function(t,o){fetch(k.getPygeoapiHost()+"/collections?f=json&lang="+e,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST",body:JSON.stringify({geom:r,"geom-crs":n})}).then((function(e){200===e.status?e.json().then((function(e){t(e.collections)})).catch((function(t){console.log(t),o("Invalid response returned by the server.")})):(console.log("Invalid status: "+e.status),o("The server couldn't provide the collections list."))})).catch((function(t){console.log(t),o("Failed to communicate with the server to retrieve the collections.")}))})),t.abrupt("return",o);case 2:case"end":return t.stop()}}),t)})));return function(e,r,n){return t.apply(this,arguments)}}()),z(U,"extractFeaturesAsync",function(){var t=D(N().mark((function t(e,r,n,o){var i;return N().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return i=new Promise((function(t,i){fetch(k.getPygeoapiHost()+"/processes/extract/execution",{headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST",body:JSON.stringify({inputs:{geom:n,geom_crs:o,collections:e,email:r}})}).then((function(e){200===e.status||201===e.status?e.json().then((function(e){t(e)})).catch((function(t){console.log(t),i("Invalid response returned by the server.")})):412==e.status?i("Please draw an extraction area."):413==e.status?i("Your extraction area is too big."):(console.log("Invalid status: "+e.status),i("The server couldn't extract the data."))})).catch((function(t){console.log(t),i("Failed to communicate with the server to extract the data.")}))})),t.abrupt("return",i);case 2:case"end":return t.stop()}}),t)})));return function(e,r,n,o){return t.apply(this,arguments)}}()),z(U,"getJobStatusAsync",function(){var t=D(N().mark((function t(e){var r,n;return N().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=(k.getPygeoapiHost()+"/jobs/{jobId}?j=json").replace("{jobId}",e),n=new Promise((function(t,e){fetch(r,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"}).then((function(r){200===r.status?r.json().then((function(e){t(e)})).catch((function(t){console.log(t),e("Invalid response returned by the server.")})):(console.log("Invalid status: "+r.status),e("The server couldn't get the job status."))})).catch((function(t){console.log(t),e("Failed to communicate with the server to check the job status.")}))})),t.abrupt("return",n);case 3:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),z(U,"getJobResultAsync",function(){var t=D(N().mark((function t(e){var r,n;return N().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=(k.getPygeoapiHost()+"/jobs/{jobId}/results?j=json").replace("{jobId}",e),n=new Promise((function(t,e){fetch(r,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"}).then((function(r){200===r.status?r.json().then((function(e){t(e)})).catch((function(t){console.log(t),e("Invalid response returned by the server.")})):(console.log("Invalid status: "+r.status),e("The server couldn't get the job status."))})).catch((function(t){console.log(t),e("Failed to communicate with the server to check the job status.")}))})),t.abrupt("return",n);case 3:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),z(U,"getFeaturesAsync",function(){var t=D(N().mark((function t(e,r,n){var o,i;return N().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return o=(k.getPygeoapiHost()+"/collections/{collectionId}/items?f=json").replace("{collectionId}",e.id),r&&(o+="&geom="+r+"&geom-crs="+n+"&clip=2"),i=new Promise((function(t,r){fetch(o,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"}).then((function(n){200===n.status?n.json().then((function(r){t({collection:e,data:r})})).catch((function(t){console.log(t),r("Invalid response returned by the server.")})):412==n.status?r("Please draw an extraction area."):413==n.status?r("Your extraction area is too big."):(console.log("Invalid status: "+n.status),r("The server couldn't extract the data."))})).catch((function(t){console.log(t),r("Failed to communicate with the server to fetch features for collection: "+e.title)}))})),t.abrupt("return",i);case 4:case"end":return t.stop()}}),t)})));return function(e,r,n){return t.apply(this,arguments)}}()),z(U,"getCollectionWKTAsync",function(){var t=D(N().mark((function t(e){var r,n;return N().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=(k.getPygeoapiHost()+"/collections/{collectionId}?f=json").replace("{collectionId}",e.id),n=new Promise((function(t,n){fetch(r,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"}).then((function(e){200===e.status?e.json().then((function(e){t(e)})).catch((function(t){console.log(t),n("Invalid response returned by the server.")})):(console.log("Invalid request for wkt: "+e.status),n("The server couldn't find the WKT for the collection."))})).catch((function(t){console.log(t),n("Failed to communicate with the server to get WKT for the collection: "+e.title)}))})),t.abrupt("return",n);case 3:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}());const W=r.p+"img/download.png";function Z(t){return Z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Z(t)}function V(){V=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,r){return t[e]=r}}function u(t,e,r,o){var i=e&&e.prototype instanceof p?e:p,a=Object.create(i.prototype),c=new C(o||[]);return n(a,"_invoke",{value:b(t,r,c)}),a}function l(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var f={};function p(){}function h(){}function d(){}var v={};s(v,i,(function(){return this}));var y=Object.getPrototypeOf,m=y&&y(y(j([])));m&&m!==e&&r.call(m,i)&&(v=m);var g=d.prototype=p.prototype=Object.create(v);function _(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function o(n,i,a,c){var s=l(t[n],t,i);if("throw"!==s.type){var u=s.arg,f=u.value;return f&&"object"==Z(f)&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){o("next",t,a,c)}),(function(t){o("throw",t,a,c)})):e.resolve(f).then((function(t){u.value=t,a(u)}),(function(t){return o("throw",t,a,c)}))}c(s.arg)}var i;n(this,"_invoke",{value:function(t,r){function n(){return new e((function(e,n){o(t,r,e,n)}))}return i=i?i.then(n,n):n()}})}function b(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===f)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var s=l(t,e,r);if("normal"===s.type){if(n=r.done?"completed":"suspendedYield",s.arg===f)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n="completed",r.method="throw",r.arg=s.arg)}}}function x(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=void 0,x(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),f;var o=l(n,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,f;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function E(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function j(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return h.prototype=d,n(g,"constructor",{value:d,configurable:!0}),n(d,"constructor",{value:h,configurable:!0}),h.displayName=s(d,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===h||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,s(t,c,"GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},_(w.prototype),s(w.prototype,a,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new w(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},_(g),s(g,c,"Generator"),s(g,i,(function(){return this})),s(g,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=j,C.prototype={constructor:C,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type="throw",a.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),E(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:j(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),f}},t}function $(t,e,r,n,o,i,a){try{var c=t[i](a),s=c.value}catch(t){return void r(t)}c.done?e(s):Promise.resolve(s).then(n,o)}function q(t){return function(t){if(Array.isArray(t))return X(t)}(t)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(t)||Y(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function H(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,u=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(u)throw o}}return c}}(t,e)||Y(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Y(t,e){if(t){if("string"==typeof t)return X(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?X(t,e):void 0}}function X(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}const J=function(e){var r=window.cgpv,n=r.api,o=r.react,i=r.ui,a=r.useTranslation,c=(o.createElement,o.useState),s=o.useEffect,u=i.elements,l=u.CircularProgress,f=u.ProgressBar,p="mapCZS",h=a(),d=h.t,v=h.i18n,y=H(c([]),2),m=y[0],_=y[1],w=H(c([]),2),b=w[0],x=w[1],A=H(c([]),2),E=A[0],C=A[1],j=H(c([]),2),O=j[0],L=j[1];function I(t){return t<10?"0"+t:t}function S(){var t;return t=V().mark((function t(e){var r,o,i,a;return V().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:r=!1,t.prev=1;case 2:if(r){t.next=29;break}return t.next=5,U.getJobStatusAsync(e);case 5:if(o=t.sent,console.log("Job "+e,o),"successful"!=o.status){t.next=17;break}return t.next=10,U.getJobResultAsync(e);case 10:return i=t.sent,b.push({job_id:e,extract_url:i.extract_url}),x(q(b)),n.utilities.showSuccess(p,d("czs.success_extraction_completed")),t.abrupt("break",29);case 17:if("failed"!=o.status){t.next=24;break}return E.push(e),C(q(E)),n.utilities.showError(p,d("czs.success_extraction_failed")),t.abrupt("break",29);case 24:"accepted"==o.status&&(a=m.filter((function(t){return t.job_id==e}))).length>0&&(a[0].progress=o.progress,_(q(m)));case 25:return t.next=27,k.delay(2e3);case 27:t.next=2;break;case 29:t.next=34;break;case 31:t.prev=31,t.t0=t.catch(1),n.utilities.showError(p,"Failed to get job status");case 34:case"end":return t.stop()}}),t,null,[[1,31]])})),S=function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(t){$(i,n,o,a,c,"next",t)}function c(t){$(i,n,o,a,c,"throw",t)}a(void 0)}))},S.apply(this,arguments)}return s((function(){v.addResourceBundle("en","translation",P),v.addResourceBundle("fr","translation",T),n.event.on(g,(function(t){var e,r,n,o,i=t.job_id;t.job_id||(i=self.crypto.randomUUID()),m.push({job_id:i,local_date_start:(e=new Date,r=I(e.getHours()),n=I(e.getMinutes()),o=I(e.getSeconds()),r+":"+n+":"+o),progress:0}),_(q(m)),t.job_id?function(t){S.apply(this,arguments)}(t.job_id):(O.push(i),L(q(O)))}),p)}),[]),(0,t.jsx)("div",{className:"czs-jobs",children:(0,t.jsx)("table",{children:function(e){return(0,t.jsx)("tbody",{children:Object.values(e).map((function(e,r){var n=b.filter((function(t){return t.job_id==e.job_id})),o=E.filter((function(t){return t==e.job_id})),i=O.filter((function(t){return t==e.job_id}));return(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"czs-jobs-cell-info",children:n.length>0?(0,t.jsx)("a",{href:k.getPygeoapiHost()+"/jobs/"+e.job_id,target:"_blank",children:"Extraction completed!"}):(0,t.jsx)("div",{children:i.length>0?(0,t.jsx)("a",{className:"job-dismissed",children:"Extraction queue is full!"}):(0,t.jsxs)("a",{href:k.getPygeoapiHost()+"/jobs/"+e.job_id,target:"_blank",children:["Extraction started ",e.local_date_start," ..."]})})}),(0,t.jsx)("td",{className:"czs-jobs-cell-progress",children:0===i.length?(0,t.jsx)("div",{children:n.length>0?(0,t.jsx)("div",{}):(0,t.jsx)("div",{children:(0,t.jsx)(f,{variant:"determinate",value:e.progress})})}):(0,t.jsx)("div",{})}),(0,t.jsx)("td",{className:"czs-jobs-cell-spin",children:0===i.length?(0,t.jsxs)("div",{children:[(0,t.jsx)(l,{isLoaded:n.length>0||o.length>0,className:"loading-spinner loading-job"}),n.length>0?(0,t.jsx)("div",{children:(0,t.jsx)("a",{href:n[0].extract_url,target:"_blank",children:(0,t.jsx)("img",{src:W})})}):(0,t.jsx)("div",{}),o.length>0?(0,t.jsx)("div",{children:(0,t.jsx)("a",{href:k.getPygeoapiHost()+"/jobs/"+e.job_id+"/results?f=json",target:"_blank",children:"FAILED"})}):(0,t.jsx)("div",{})]}):(0,t.jsx)("div",{})})]},r)}))})}(m)})})},Q=r.p+"img/more.png",K=r.p+"img/zoom_in.png",tt=r.p+"img/stars.png",et=r.p+"img/metadata.png",rt=r.p+"img/arrow_up.png",nt=r.p+"img/arrow_down.png";function ot(t){return ot="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},ot(t)}function it(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function at(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?it(Object(r),!0).forEach((function(e){ct(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):it(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function ct(t,e,r){return(e=function(t){var e=function(t,e){if("object"!==ot(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==ot(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===ot(e)?e:String(e)}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function st(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var r=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,u=!1;try{if(i=(r=r.call(t)).next,0===e){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==e);s=!0);}catch(t){u=!0,o=t}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(u)throw o}}return c}}(t,e)||ut(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ut(t,e){if(t){if("string"==typeof t)return lt(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?lt(t,e):void 0}}function lt(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}const ft=function(e){var r=window.cgpv,n=r.api,o=r.react,i=r.ui,a=r.useTranslation,c=(o.createElement,o.useState),g=o.useEffect,E=i.elements,C=E.Button,j=E.CircularProgress,O=E.Accordion,L=E.CheckboxListEnhanced,I=E.TextField,S=E.Menu,N=E.MenuItem,G=E.ListItem,D=E.ListItemText,M=E.ListItemIcon,R="mapCZS",F=a(),z=F.t,B=F.i18n,U=st(c([]),2),W=U[0],Z=U[1],V=st(c([]),2),$=V[0],q=V[1],H=st(c([]),2),Y=H[0],X=H[1],ot=st(c({}),2),it=ot[0],ct=ot[1],ft=st(c({}),2),pt=ft[0],ht=ft[1],dt=st(c(null),2),vt=dt[0],yt=dt[1],mt=Boolean(vt),gt=st(c(null),2),_t=gt[0],wt=gt[1],bt=st(c("alexandre.roy@nrcan-rncan.gc.ca"),2),xt=bt[0],At=bt[1],Et=st(c(!1),2),Ct=Et[0],jt=Et[1],Ot=st(c(!1),2),Lt=Ot[0],It=Ot[1],St=st(c([]),2),kt=St[0],Pt=St[1],Tt=st(c(!1),2),Nt=Tt[0];function Gt(){yt(null)}function Dt(e){return(0,t.jsx)(O,{className:"accordion-theme",items:Object.values(e).map((function(t){var e=function(t){if(!Y||0==Y.length)return[];var e=[];return t.parents.forEach((function(t){var r=t.collections.filter((function(t){return Y.includes(t.id)}));r&&r.length>0&&e.push(t)})),e}(t);return{title:t.theme.title+" ("+t.parents.length+")"+(e.length>0?" *":""),content:Mt(t.parents,e)}}))})}function Mt(e,r){return e&&e.length>0?(0,t.jsx)(O,{className:"accordion-parent",items:Object.values(e).map((function(t){return{title:t.parent.title+" ("+t.collections.length+")"+(r.filter((function(e){return e.parent.id==t.parent.id})).length>0?" *":""),content:Rt(t)}}))}):null}function Rt(r){return r.collections&&r.collections.length>0?(0,t.jsx)(L,{multiselect:!0,listItems:Object.values(r.collections).map((function(t){return{display:t.title,value:t.id,content:Ft(t)}})),checkedValues:Y||[],checkedCallback:function(t,n,o){return function(t,r,n,o){var i;null===(i=e.handleCollectionCheckedChanged)||void 0===i||i.call(e,t,r,n,o)}(t,n,r,o)}}):null}function Ft(r){var n=(0,t.jsx)("span",{});n=(0,t.jsx)("div",{className:"layer-options layer-option",children:(0,t.jsx)(G,{button:!0,title:z("czs.layer_options"),onClick:function(t){!function(t,e){wt(e),yt(t.currentTarget)}(t,r)},children:(0,t.jsx)(M,{children:(0,t.jsx)("img",{src:Q})})})});var o=(0,t.jsx)("span",{});return r&&it[r.id]&&(o=(0,t.jsxs)("div",{className:"layer-order-layers layer-option ".concat(kt.includes(r.id)?"loading":""),children:[(0,t.jsx)("div",{onClick:function(t){var n,o,i;n=r.itemType,o=r.id,null===(i=e.handleHigher)||void 0===i||i.call(e,n,o)},title:z("czs.layer_bring_to_front"),children:(0,t.jsx)("img",{src:rt})}),(0,t.jsx)("div",{onClick:function(t){var n,o,i;n=r.itemType,o=r.id,null===(i=e.handleLower)||void 0===i||i.call(e,n,o)},title:z("czs.layer_send_to_back"),children:(0,t.jsx)("img",{src:nt})})]})),(0,t.jsxs)("div",{className:"layer-options-wrapper",children:[n,o]})}return Tt[1],g((function(){return B.addResourceBundle("en","translation",P),B.addResourceBundle("fr","translation",T),n.event.on(s,(function(t){ht({active:!!t.geometry}),jt(!0)}),R),n.event.on(l,(function(t){Z(t.collections)}),R),n.event.on(f,(function(t){q(t.collections)}),R),n.event.on(u,(function(t){jt(!1)}),R),n.event.on(y,(function(t){It(!0),X(t.checkedCollections)}),R),n.event.on(m,(function(t){It(!1),ct(at({},t.viewedCollections))}),R),n.event.on(_,(function(t){var e;Pt(function(t){if(Array.isArray(t))return lt(t)}(e=t.collections)||function(t){if("undefined"!=typeof Symbol&&null!=t[Symbol.iterator]||null!=t["@@iterator"])return Array.from(t)}(e)||ut(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())}),R),n.event.on(p,(function(t){It(!0)}),R),n.event.on(h,(function(t){n.utilities.showWarning(R,z("czs.warning_extraction_area_too_big")+": "+t.collection.title)}),R),n.event.on(d,(function(t){n.utilities.showWarning(R,z("czs.warning_extraction_area_missing"))}),R),n.event.on(v,(function(t){It(!1),ct(at({},t.viewedCollections))}),R),n.event.on(w,(function(t){n.utilities.showError(R,t.error)}),R),n.event.on(b,(function(t){n.utilities.showWarning(R,z("czs.error_some_elements_outside"))}),R),n.event.on(x,(function(t){n.utilities.showError(R,t.error)}),R),n.event.on(A,(function(t){n.utilities.showError(R,t.error)}),R),function(){n.event.off(s,R),n.event.off(l,R),n.event.off(f,R),n.event.off(u,R),n.event.off(y,R),n.event.off(m,R),n.event.off(_,R),n.event.off(p,R),n.event.off(h,R),n.event.off(d,R),n.event.off(v,R),n.event.off(w,R),n.event.off(b,R),n.event.off(x,R),n.event.off(A,R)}}),[]),(0,t.jsxs)("div",{className:"czs-panel",children:[(0,t.jsxs)("div",{children:[(0,t.jsx)(C,{type:"text",onClick:function(){var t;null===(t=e.handleStartDrawing)||void 0===t||t.call(e)},size:"small",children:z("czs.draw")}),(0,t.jsx)(C,{type:"text",onClick:function(){var t;null===(t=e.handleClearDrawing)||void 0===t||t.call(e)},size:"small",disabled:!pt.active,children:z("czs.clear")})]}),(0,t.jsxs)("div",{className:"loading-spinner-container",children:[(0,t.jsx)(j,{isLoaded:!Ct,className:"loading-spinner loading-collections"}),(0,t.jsx)(j,{isLoaded:!Lt,className:"loading-spinner loading-features"})]}),(0,t.jsxs)("div",{className:"collections-group",children:[(0,t.jsx)(O,{items:[{title:z("czs.list_feature_colls"),content:Dt(W)}]}),(0,t.jsx)(O,{items:[{title:z("czs.list_coverage_colls"),content:Dt($)}]})]}),(0,t.jsx)(I,{id:"czs_email",className:"czs-email",type:"email",placeholder:z("czs.enter_email"),style:{marginTop:20,width:"100%"},onChange:function(){var t=document.getElementById("czs_email");At(null==t?void 0:t.value)},value:xt}),(0,t.jsx)(C,{className:"btn-extract",type:"text",onClick:function(){var t;null===(t=e.handleExtractFeatures)||void 0===t||t.call(e,xt)},size:"small",disabled:!(Object.keys(it).length&&xt&&!Nt),children:z("czs.extract_features")}),(0,t.jsx)(J,{}),(0,t.jsx)(O,{className:"need-help",items:[{title:z("czs.help_title"),content:(0,t.jsx)("div",{className:"help-text",dangerouslySetInnerHTML:{__html:z("czs.help_text")}})}]}),function(){var r=null;_t&&(r=k.getContentMetadata(_t.links));var n=(0,t.jsx)(N,{});return r&&(n=(0,t.jsxs)(N,{className:"layer-metadata",onClick:function(t){return null===(r=e.handleViewMetadataCollection)||void 0===r||r.call(e,_t),void yt(null);var r},children:[(0,t.jsx)(M,{children:(0,t.jsx)("img",{src:et})}),(0,t.jsx)(D,{children:z("czs.view_metadata")})]})),(0,t.jsxs)(S,{className:"czs_menu_options",anchorEl:vt,open:mt,onClose:Gt,children:[(0,t.jsxs)(N,{onClick:function(t){return null===(r=e.handleZoomToCollection)||void 0===r||r.call(e,_t),void yt(null);var r},children:[(0,t.jsx)(M,{children:(0,t.jsx)("img",{src:K})}),(0,t.jsx)(D,{children:z("czs.zoom_to")})]}),(0,t.jsxs)(N,{onClick:function(t){return null===(r=e.handleViewCapabilitiesCollection)||void 0===r||r.call(e,_t),void yt(null);var r},children:[(0,t.jsx)(M,{children:(0,t.jsx)("img",{src:tt})}),(0,t.jsx)(D,{children:z("czs.view_capabilities")})]}),n]})}()]})},pt=(new Error("timeout while waiting for mutex to become available"),new Error("mutex already locked"),new Error("request for lock canceled"));class ht{constructor(t,e=pt){this._value=t,this._cancelError=e,this._weightedQueues=[],this._weightedWaiters=[]}acquire(t=1){if(t<=0)throw new Error(`invalid weight ${t}: must be positive`);return new Promise(((e,r)=>{this._weightedQueues[t-1]||(this._weightedQueues[t-1]=[]),this._weightedQueues[t-1].push({resolve:e,reject:r}),this._dispatch()}))}runExclusive(t,e=1){return r=this,n=void 0,i=function*(){const[r,n]=yield this.acquire(e);try{return yield t(r)}finally{n()}},new((o=void 0)||(o=Promise))((function(t,e){function a(t){try{s(i.next(t))}catch(t){e(t)}}function c(t){try{s(i.throw(t))}catch(t){e(t)}}function s(e){var r;e.done?t(e.value):(r=e.value,r instanceof o?r:new o((function(t){t(r)}))).then(a,c)}s((i=i.apply(r,n||[])).next())}));var r,n,o,i}waitForUnlock(t=1){if(t<=0)throw new Error(`invalid weight ${t}: must be positive`);return new Promise((e=>{this._weightedWaiters[t-1]||(this._weightedWaiters[t-1]=[]),this._weightedWaiters[t-1].push(e),this._dispatch()}))}isLocked(){return this._value<=0}getValue(){return this._value}setValue(t){this._value=t,this._dispatch()}release(t=1){if(t<=0)throw new Error(`invalid weight ${t}: must be positive`);this._value+=t,this._dispatch()}cancel(){this._weightedQueues.forEach((t=>t.forEach((t=>t.reject(this._cancelError))))),this._weightedQueues=[]}_dispatch(){var t;for(let e=this._value;e>0;e--){const r=null===(t=this._weightedQueues[e-1])||void 0===t?void 0:t.shift();if(!r)continue;const n=this._value,o=e;this._value-=e,e=this._value+1,r.resolve([n,this._newReleaser(o)])}this._drainUnlockWaiters()}_newReleaser(t){let e=!1;return()=>{e||(e=!0,this.release(t))}}_drainUnlockWaiters(){for(let t=this._value;t>0;t--)this._weightedWaiters[t-1]&&(this._weightedWaiters[t-1].forEach((t=>t())),this._weightedWaiters[t-1]=[])}}class dt{constructor(t){this._semaphore=new ht(1,t)}acquire(){return t=this,e=void 0,n=function*(){const[,t]=yield this._semaphore.acquire();return t},new((r=void 0)||(r=Promise))((function(o,i){function a(t){try{s(n.next(t))}catch(t){i(t)}}function c(t){try{s(n.throw(t))}catch(t){i(t)}}function s(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,c)}s((n=n.apply(t,e||[])).next())}));var t,e,r,n}runExclusive(t){return this._semaphore.runExclusive((()=>t()))}isLocked(){return this._semaphore.isLocked()}waitForUnlock(){return this._semaphore.waitForUnlock()}release(){this._semaphore.isLocked()&&this._semaphore.release()}cancel(){return this._semaphore.cancel()}}const vt=r.p+"img/Marker_green.png";function yt(t){return yt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},yt(t)}function mt(t,e){var r="undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(!r){if(Array.isArray(t)||(r=function(t,e){if(t){if("string"==typeof t)return gt(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?gt(t,e):void 0}}(t))||e&&t&&"number"==typeof t.length){r&&(t=r);var n=0,o=function(){};return{s:o,n:function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}},e:function(t){throw t},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,c=!1;return{s:function(){r=r.call(t)},n:function(){var t=r.next();return a=t.done,t},e:function(t){c=!0,i=t},f:function(){try{a||null==r.return||r.return()}finally{if(c)throw i}}}}function gt(t,e){(null==e||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function _t(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function wt(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?_t(Object(r),!0).forEach((function(e){jt(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):_t(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function bt(){bt=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,r){return t[e]=r}}function u(t,e,r,o){var i=e&&e.prototype instanceof p?e:p,a=Object.create(i.prototype),c=new C(o||[]);return n(a,"_invoke",{value:b(t,r,c)}),a}function l(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var f={};function p(){}function h(){}function d(){}var v={};s(v,i,(function(){return this}));var y=Object.getPrototypeOf,m=y&&y(y(j([])));m&&m!==e&&r.call(m,i)&&(v=m);var g=d.prototype=p.prototype=Object.create(v);function _(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function o(n,i,a,c){var s=l(t[n],t,i);if("throw"!==s.type){var u=s.arg,f=u.value;return f&&"object"==yt(f)&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){o("next",t,a,c)}),(function(t){o("throw",t,a,c)})):e.resolve(f).then((function(t){u.value=t,a(u)}),(function(t){return o("throw",t,a,c)}))}c(s.arg)}var i;n(this,"_invoke",{value:function(t,r){function n(){return new e((function(e,n){o(t,r,e,n)}))}return i=i?i.then(n,n):n()}})}function b(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===f)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var s=l(t,e,r);if("normal"===s.type){if(n=r.done?"completed":"suspendedYield",s.arg===f)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n="completed",r.method="throw",r.arg=s.arg)}}}function x(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=void 0,x(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),f;var o=l(n,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,f;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function E(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function j(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return h.prototype=d,n(g,"constructor",{value:d,configurable:!0}),n(d,"constructor",{value:h,configurable:!0}),h.displayName=s(d,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===h||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,s(t,c,"GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},_(w.prototype),s(w.prototype,a,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new w(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},_(g),s(g,c,"Generator"),s(g,i,(function(){return this})),s(g,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=j,C.prototype={constructor:C,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type="throw",a.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),E(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:j(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),f}},t}function xt(t,e,r,n,o,i,a){try{var c=t[i](a),s=c.value}catch(t){return void r(t)}c.done?e(s):Promise.resolve(s).then(n,o)}function At(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(t){xt(i,n,o,a,c,"next",t)}function c(t){xt(i,n,o,a,c,"throw",t)}a(void 0)}))}}function Et(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,Ot(n.key),n)}}function Ct(t,e,r){return e&&Et(t.prototype,e),r&&Et(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function jt(t,e,r){return(e=Ot(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Ot(t){var e=function(t,e){if("object"!==yt(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==yt(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===yt(e)?e:String(e)}var Lt=Ct((function t(e,r){var n=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"en";!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),jt(this,"_lang","en"),jt(this,"_collections",[]),jt(this,"_checkedCollections",[]),jt(this,"_viewedCollections",{}),jt(this,"_orderingCollections",[]),jt(this,"__watcherLoadCollectionsCounter",0),jt(this,"__watcherLoadCollectionsMutex",new dt),jt(this,"init",(function(){n._cgpvapi.event.on(n._cgpvapi.eventNames.MAP.EVENT_MAP_LOADED,function(){var e=At(bt().mark((function e(r){var o;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(o=n._map.layer.vector.createGeometryGroup(t.GEOM_GRP_DRAW_ID)).vectorLayer.setStyle(n._cgpvapi.geoUtilities.defaultDrawingStyle("orange")),o.vectorLayer.setZIndex(t.Z_INDEX_DRAWING),n._modifInter=n._map.initModifyInteractions(t.GEOM_GRP_DRAW_ID),e.next=6,n.loadCollectionsAsync();case 6:e.sent;case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),n._mapID),n._cgpvapi.event.on(n._cgpvapi.eventNames.INTERACTION.EVENT_DRAW_ENDED,function(){var t=At(bt().mark((function t(e){return bt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,n.handleDrawEndAsync(e.drawInfo);case 2:t.sent;case 3:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),n._mapID),n._cgpvapi.event.on(n._cgpvapi.eventNames.INTERACTION.EVENT_MODIFY_ENDED,function(){var t=At(bt().mark((function t(e){return bt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,n.handleDrawChangeAsync(e.modifyInfo);case 2:t.sent;case 3:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}(),n._mapID)})),jt(this,"onLoadCollectionsStarted",(function(t){n._cgpvapi.event.emit({event:s,handlerName:n._mapID,geometry:t})})),jt(this,"onLoadCollectionsEnded",(function(){n._cgpvapi.event.emit({event:u,handlerName:n._mapID})})),jt(this,"onLoadCollectionsFeatures",(function(t){n._cgpvapi.event.emit({event:l,handlerName:n._mapID,collections:t})})),jt(this,"onLoadCollectionsCoverages",(function(t){n._cgpvapi.event.emit({event:f,handlerName:n._mapID,collections:t})})),jt(this,"onUpdateLayersStarted",(function(){n._cgpvapi.event.emit({event:p,handlerName:n._mapID})})),jt(this,"onUpdateLayersEnded",(function(t){n._cgpvapi.event.emit({event:v,handlerName:n._mapID,viewedCollections:t})})),jt(this,"onErrorZoomingOutside",(function(){n._cgpvapi.event.emit({event:b,handlerName:n._mapID})})),jt(this,"onErrorShowingCollection",(function(t){console.log("ERROR_SHOWING_COLLECTION",t),n._cgpvapi.event.emit({event:x,handlerName:n._mapID,error:t})})),jt(this,"onErrorExtracting",(function(t){console.log("ERROR_EXTRACTING",t),n._cgpvapi.event.emit({event:A,handlerName:n._mapID,error:t})})),jt(this,"onError",(function(t){console.log("ERROR",t),n._cgpvapi.event.emit({event:w,handlerName:n._mapID,error:t})})),jt(this,"startDrawing",(function(){n._map.layer.vector.deleteGeometriesFromGroup(t.GEOM_GRP_DRAW_ID),n._drawInter=n._map.initDrawInteractions(t.GEOM_GRP_DRAW_ID,"Polygon")})),jt(this,"clearDrawingAsync",At(bt().mark((function e(){return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n._map.layer.vector.deleteGeometriesFromGroup(t.GEOM_GRP_DRAW_ID),n.onStopDrawing(),e.next=4,n.loadCollectionsAsync();case 4:return e.abrupt("return",e.sent);case 5:case"end":return e.stop()}}),e)})))),jt(this,"onStopDrawing",(function(){n._drawInter&&n._drawInter.stopInteraction()})),jt(this,"handleDrawChangeAsync",function(){var t=At(bt().mark((function t(e){var r;return bt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.features.getArray()[0].getGeometry(),t.next=3,n.loadCollectionsAsync(r);case 3:return t.abrupt("return",t.sent);case 4:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),jt(this,"handleDrawEndAsync",function(){var t=At(bt().mark((function t(e){var r;return bt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return r=e.feature.getGeometry(),setTimeout((function(){n.onStopDrawing()})),n._map.zoomToExtent(r.getExtent(),{padding:[100,100,100,100],duration:1e3}),t.next=5,n.loadCollectionsAsync(r);case 5:return t.abrupt("return",t.sent);case 6:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),jt(this,"updateCollectionCheckedAsync",function(){var t=At(bt().mark((function t(e,r,o,i){var a;return bt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,a=n.findCollectionFromID(e),n._checkedCollections=i,!a){t.next=13;break}if(n._cgpvapi.event.emit({event:y,handlerName:n._mapID,parentCollection:o,checkedCollections:i}),!r){t.next=11;break}return t.next=8,n.addCollectionAsync(a,n._geometry).finally((function(){n._cgpvapi.event.emit({event:m,handlerName:n._mapID,viewedCollections:n._viewedCollections})}));case 8:n._geometry||n._cgpvapi.event.emit({event:d,handlerName:n._mapID,collection:a}),t.next=13;break;case 11:n.removeCollection(a.id),n._cgpvapi.event.emit({event:m,handlerName:n._mapID,viewedCollections:n._viewedCollections});case 13:return t.abrupt("return",!0);case 16:return t.prev=16,t.t0=t.catch(0),n.onErrorShowingCollection(t.t0),t.abrupt("return",!1);case 20:case"end":return t.stop()}}),t,null,[[0,16]])})));return function(e,r,n,o){return t.apply(this,arguments)}}()),jt(this,"layerOrderHigherAsync",function(){var t=At(bt().mark((function t(e,r){return bt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(n._orderingCollections.indexOf(r)>=0)){t.next=2;break}return t.abrupt("return",!1);case 2:return n._orderingCollections.push(r),n._cgpvapi.event.emit({event:_,handlerName:n._mapID,collections:n._orderingCollections}),t.next=6,n.higherAsync(e,r).finally((function(){var t=n._orderingCollections.indexOf(r);t>=0&&n._orderingCollections.splice(t,1),n._cgpvapi.event.emit({event:_,handlerName:n._mapID,collections:n._orderingCollections})}));case 6:return t.abrupt("return",t.sent);case 7:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}()),jt(this,"layerOrderLowerAsync",function(){var t=At(bt().mark((function t(e,r){return bt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(n._orderingCollections.indexOf(r)>=0)){t.next=2;break}return t.abrupt("return",!1);case 2:return n._orderingCollections.push(r),n._cgpvapi.event.emit({event:_,handlerName:n._mapID,collections:n._orderingCollections}),t.next=6,n.lowerAsync(e,r).finally((function(){var t=n._orderingCollections.indexOf(r);t>=0&&n._orderingCollections.splice(t,1),n._cgpvapi.event.emit({event:_,handlerName:n._mapID,collections:n._orderingCollections})}));case 6:return t.abrupt("return",t.sent);case 7:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}()),jt(this,"extractFeaturesAsync",function(){var t=At(bt().mark((function t(e){var r;return bt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.next=3,U.extractFeaturesAsync(Object.keys(n._viewedCollections),e,n._cgpvapi.geoUtilities.geometryToWKT(n._geometry),n._map.currentProjection);case 3:return r=t.sent,console.log("JOB RESULT",r),n._cgpvapi.event.emit(wt({event:g,handlerName:n._mapID},r)),t.abrupt("return",r);case 9:t.prev=9,t.t0=t.catch(0),n.onErrorExtracting(t.t0);case 12:case"end":return t.stop()}}),t,null,[[0,9]])})));return function(e){return t.apply(this,arguments)}}()),jt(this,"zoomToCollection",function(){var e=At(bt().mark((function e(r){var o,i,a,c;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,U.getCollectionWKTAsync(r);case 2:o=e.sent,(i=n._cgpvapi.geoUtilities.wktToGeometry(o.wkt)).transform("EPSG:".concat(t.COLLECTION_FOOTPRINT_CRS),n._cgpvapi.projection.projections[n._map.currentProjection]),a=i.getExtent(),c=!1,a[0]<n._mapLimits[0]&&(c=!0),a[1]<n._mapLimits[1]&&(c=!0),a[2]>n._mapLimits[2]&&(c=!0),a[3]>n._mapLimits[3]&&(c=!0),n._map.zoomToExtent(a,{padding:[100,100,100,100],duration:1e3}),c&&n.onErrorZoomingOutside();case 13:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),jt(this,"higherAsync",function(){var t=At(bt().mark((function t(e,r){var o,i,a,c;return bt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if("feature"!=e){t.next=8;break}return o=n._map.layer.vector.getGeometryGroup(r).vectorLayer,i=o.getZIndex(),i++,o.setZIndex(i),t.abrupt("return",!0);case 8:return t.next=10,n.getLayerAsync(r);case 10:return a=t.sent,c=a.gvLayers.getZIndex(),c++,a.gvLayers.setZIndex(c),t.abrupt("return",!0);case 15:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}()),jt(this,"lowerAsync",function(){var t=At(bt().mark((function t(e,r){var o,i,a,c;return bt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if("feature"!=e){t.next=8;break}return o=n._map.layer.vector.getGeometryGroup(r).vectorLayer,i=o.getZIndex(),i--,o.setZIndex(i),t.abrupt("return",!0);case 8:return t.next=10,n.getLayerAsync(r);case 10:return a=t.sent,c=a.gvLayers.getZIndex(),c--,a.gvLayers.setZIndex(c),t.abrupt("return",!0);case 15:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}()),jt(this,"findCollectionFromID",(function(t){var e=[];return(e=e.concat(n._collections.filter((function(e){return e.id==t})))).length>0?e[0]:null})),jt(this,"adjustExtentOnLayerID",(function(t,e){var r=void 0;e&&(r=e.getExtent()),t.setExtent(r),t.setVisible(!1),t.setVisible(!0)})),jt(this,"loadCollectionsAsync",function(){var t=At(bt().mark((function t(e){var r,o,i,s,u;return bt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n.__watcherLoadCollectionsCounter++,r=n.__watcherLoadCollectionsCounter,t.next=4,n.__watcherLoadCollectionsMutex.acquire();case 4:if(o=t.sent,t.prev=5,r!=n.__watcherLoadCollectionsCounter){t.next=29;break}return t.prev=7,n._geometry=e,n.onLoadCollectionsStarted(n._geometry),t.next=12,U.getCollectionsPOSTAsync(n._lang+"-CA",n._cgpvapi.geoUtilities.geometryToWKT(n._geometry),n._map.currentProjection);case 12:return i=t.sent,n._collections=[],s=[],u=[],i.forEach((function(t){var e;if("feature"==t.itemType?e=s:"coverage"==t.itemType&&(e=u),e){var r,o,i=null===(r=e)||void 0===r?void 0:r.find((function(e){return e.theme.id==t.theme}));i||(i=new a({id:t.theme,title:t.theme},[]),e.push(i));var l=null===(o=i.parents)||void 0===o?void 0:o.find((function(e){return e.parent.id==t.parent}));l||(l=new c(i.theme,{id:t.parent,title:t.parent_title},[]),i.parents.push(l)),l.collections.push(t),n._collections.push(t)}})),s.sort((function(t,e){return k.sortAlphabetically(t.theme.title,e.theme.title)})),u.sort((function(t,e){return k.sortAlphabetically(t.theme.title,e.theme.title)})),s.forEach((function(t){t.parents.sort((function(t,e){return k.sortAlphabetically(t.parent.title,e.parent.title)})),t.parents.forEach((function(t){t.collections.sort((function(t,e){return k.sortAlphabetically(t.title,e.title)}))}))})),u.forEach((function(t){t.parents.sort((function(t,e){return k.sortAlphabetically(t.parent.title,e.parent.title)})),t.parents.forEach((function(t){t.collections.sort((function(t,e){return k.sortAlphabetically(t.title,e.title)}))}))})),n.onLoadCollectionsFeatures(s),n.onLoadCollectionsCoverages(u),t.next=25,n.updateLayersOnMapAsync(e);case 25:return t.prev=25,n.onLoadCollectionsEnded(),t.finish(25);case 28:return t.abrupt("return",!0);case 29:return t.abrupt("return",!1);case 32:return t.prev=32,t.t0=t.catch(5),n.onError(t.t0),t.abrupt("return",!1);case 36:return t.prev=36,o(),t.finish(36);case 39:case"end":return t.stop()}}),t,null,[[5,32,36,39],[7,,25,28]])})));return function(e){return t.apply(this,arguments)}}()),jt(this,"updateLayersOnMapAsync",function(){var t=At(bt().mark((function t(e){var r,o,i,a,c,s;return bt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:t.prev=0,n.onUpdateLayersStarted(),r=[],o=mt(n.getCheckedCollections());try{for(o.s();!(i=o.n()).done;)a=i.value,(c=n.findCollectionFromID(a))?(s=n.addCollectionAsync(c,e),r.push(s)):n._viewedCollections[a]&&n.removeCollection(a)}catch(t){o.e(t)}finally{o.f()}return t.next=7,Promise.all(r);case 7:return t.abrupt("return",!0);case 8:return t.prev=8,n.onUpdateLayersEnded(n._viewedCollections),t.finish(8);case 11:case"end":return t.stop()}}),t,null,[[0,,8,11]])})));return function(e){return t.apply(this,arguments)}}()),jt(this,"getCheckedCollections",(function(){var t=[];return Object.keys(n._checkedCollections).forEach((function(e){t=t.concat(n._checkedCollections[e])})),t})),jt(this,"getAreaInKm2",(function(t){return n._cgpvapi.geoUtilities.getArea(t,{projection:n._map.getView().getProjection().getCode()})/1e6})),jt(this,"addCollectionAsync",function(){var t=At(bt().mark((function t(e,r){return bt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!(r&&n.getAreaInKm2(r)<=e.max_extract_area)){t.next=11;break}if("feature"!=e.itemType){t.next=7;break}return n.removeCollection(e.id),t.next=5,n.addCollectionVectorAsync(e,r);case 5:t.next=9;break;case 7:return t.next=9,n.addCollectionRasterAsync(e,r);case 9:t.next=14;break;case 11:n.removeCollection(e.id),n.addFingerprintCollectionAsync(e),r&&n._cgpvapi.event.emit({event:h,handlerName:n._mapID,collection:e});case 14:return t.abrupt("return",!0);case 15:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}()),jt(this,"addCollectionVectorAsync",function(){var e=At(bt().mark((function e(r,o){var i,a;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,U.getFeaturesAsync(r,n._cgpvapi.geoUtilities.geometryToWKT(o),n._map.currentProjection);case 2:return(i=e.sent).data.features&&i.data.features.length>0&&((a=n._map.layer.vector.createGeometryGroup(r.id)).vectorLayer.setZIndex(t.Z_INDEX_VECTORS),n._map.layer.vector.setActiveGeometryGroup(r.id),n._viewedCollections[r.id]={type:"feature",info:a},n.loadFeaturesInGroup(i.data.features,parseInt(r.crs[0]),"blue","green"),n._cgpvapi.event.emit({event:"czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_FEATURES",handlerName:n._mapID,collection:r})),e.abrupt("return",!0);case 5:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}()),jt(this,"addCollectionRasterAsync",function(){var e=At(bt().mark((function e(r,o){var i,a,c;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!n._viewedCollections[r.id]||"raster"!=n._viewedCollections[r.id].type){e.next=7;break}return e.next=3,n.getLayerAsync(r.id);case 3:i=e.sent,n.adjustExtentOnLayerID(i,o),e.next=19;break;case 7:return n.removeCollection(r.id),a={geoviewLayerType:"ogcWms",geoviewLayerId:r.id,geoviewLayerName:{en:r.title,fr:r.title},metadataAccessPath:{en:k.getQGISServiceHost()+r.org_schema+"/"+r.parent,fr:k.getQGISServiceHost()+r.org_schema+"/"+r.parent},listOfLayerEntryConfig:[{layerId:r.short_name,layerName:{en:r.title,fr:r.title},source:{dataProjection:"EPSG:4326"}}]},r.crs&&r.crs.length>0&&Number.isInteger(r.crs[0])&&(a.listOfLayerEntryConfig[0].source.dataProjection="EPSG:"+r.crs[0]),k.isLocal()&&(a.metadataAccessPath={en:"https://maps.geogratis.gc.ca/wms/hydro_network_en",fr:"https://maps.geogratis.gc.ca/wms/hydro_network_en"},a.listOfLayerEntryConfig[0].layerId="hydro_network",a.listOfLayerEntryConfig[0].layerName={en:"hydro_network",fr:"hydro_network"}),n._map.layer.addGeoviewLayer(a),n._viewedCollections[r.id]={type:"raster",info:a},e.next=15,n.getLayerAsync(r.id);case 15:c=e.sent,n.adjustExtentOnLayerID(c,o),c.gvLayers.setZIndex(t.Z_INDEX_RASTERS),n._cgpvapi.event.emit({event:"czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_COVERAGES",handlerName:n._mapID,collection:r});case 19:return e.abrupt("return",!0);case 20:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}()),jt(this,"addFingerprintCollectionAsync",function(){var e=At(bt().mark((function e(r){var o;return bt().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,U.getCollectionWKTAsync(r);case 2:o=e.sent,n._map.layer.vector.createGeometryGroup(r.id).vectorLayer.setZIndex(t.Z_INDEX_VECTORS),n._map.layer.vector.setActiveGeometryGroup(r.id),n.loadFeaturesInGroup([o.wkt],t.COLLECTION_FOOTPRINT_CRS,"red","red");case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),jt(this,"removeCollection",(function(t){if(n._map.layer.vector.getGeometryGroup(t)&&n._map.layer.vector.deleteGeometryGroup(t),n._viewedCollections.hasOwnProperty(t)){var e=n._viewedCollections[t];"raster"==e.type&&n._map.layer.removeGeoviewLayer(e.info),delete n._viewedCollections[t]}})),jt(this,"loadFeaturesInGroup",(function(t,e,r,o){t.forEach((function(t){var i;"LineString"==(i=t.geometry?n._cgpvapi.geoUtilities.geojsonToGeometry(t.geometry):n._cgpvapi.geoUtilities.wktToGeometry(t)).getType()?n._map.layer.vector.addPolyline(i.getCoordinates(),{projection:e,style:{strokeColor:r,strokeOpacity:.5,strokeWidth:1}}):"MultiLineString"==i.getType()?i.getLineStrings().forEach((function(t){n._map.layer.vector.addPolyline(t.getCoordinates(),{projection:e,style:{strokeColor:r,strokeOpacity:1,strokeWidth:1,fillColor:r,fillOpacity:.05}})})):"Point"==i.getType()?n._map.layer.vector.addMarkerIcon(i.getCoordinates(),{projection:e,style:{anchor:[.5,256],size:[256,256],scale:.1,anchorXUnits:"fraction",anchorYUnits:"pixels",src:vt}}):"MultiPoint"==i.getType()?i.getPoints().forEach((function(t){n._map.layer.vector.addMarkerIcon(t.getCoordinates(),{projection:e,style:{anchor:[.5,256],size:[256,256],scale:.1,anchorXUnits:"fraction",anchorYUnits:"pixels",src:vt}})})):"Polygon"==i.getType()?n._map.layer.vector.addPolygon(i.getCoordinates(),{projection:e,style:{strokeColor:r,strokeOpacity:1,strokeWidth:1,fillColor:r,fillOpacity:.05}}):"MultiPolygon"==i.getType()?i.getPolygons().forEach((function(t){n._map.layer.vector.addPolygon(t.getCoordinates(),{projection:e,style:{strokeColor:r,strokeOpacity:1,strokeWidth:1,fillColor:r,fillOpacity:.05}})})):console.log("Unknown geometry type",i.getType()),t.geometry_clipped&&("LineString"==t.geometry_clipped.type?(Array.isArray(t.geometry_clipped.coordinates[0])&&Array.isArray(t.geometry_clipped.coordinates[0][0])||(t.geometry_clipped.coordinates=[t.geometry_clipped.coordinates]),t.geometry_clipped.coordinates.forEach((function(t){n._map.layer.vector.addPolyline(t,{projection:e,style:{strokeColor:o,strokeWidth:1.5}})}))):"MultiLineString"==t.geometry_clipped.type?t.geometry_clipped.coordinates.forEach((function(t){n._map.layer.vector.addPolyline(t,{projection:e,style:{strokeColor:o,strokeWidth:1.5,fillColor:o,fillOpacity:.3}})})):"Polygon"==t.geometry_clipped.type?n._map.layer.vector.addPolygon(t.geometry_clipped.coordinates,{projection:e,style:{strokeColor:o,strokeWidth:1.5,fillColor:o,fillOpacity:.3}}):"MultiPolygon"==t.geometry_clipped.type?t.geometry_clipped.coordinates.forEach((function(t){n._map.layer.vector.addPolygon(t,{projection:e,style:{strokeColor:o,strokeWidth:1.5,fillColor:o,fillOpacity:.3}})})):"Point"==t.geometry_clipped.type||"MultiPoint"==t.geometry_clipped.type||console.log("Ignored geometry clipped type",t.geometry_clipped.type))}))})),jt(this,"getLayerAsync",function(){var t=At(bt().mark((function t(e){return bt().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,n._map.layer.getGeoviewLayerByIdAsync(e,!0,200,3e4);case 2:return t.abrupt("return",t.sent);case 3:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),this._cgpvapi=e.api,this._mapID=r,this._map=this._cgpvapi.map(r),this._lang=o,this._mapLimits=this._cgpvapi.geoUtilities.getExtent([t.MAP_LIMITS_X_MIN,t.MAP_LIMITS_Y_MIN,t.MAP_LIMITS_X_MAX,t.MAP_LIMITS_Y_MAX],t.MAP_LIMITS_CRS,this._map.currentProjection),this.init()}));function It(t){return It="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},It(t)}function St(){St=function(){return t};var t={},e=Object.prototype,r=e.hasOwnProperty,n=Object.defineProperty||function(t,e,r){t[e]=r.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{s({},"")}catch(t){s=function(t,e,r){return t[e]=r}}function u(t,e,r,o){var i=e&&e.prototype instanceof p?e:p,a=Object.create(i.prototype),c=new C(o||[]);return n(a,"_invoke",{value:b(t,r,c)}),a}function l(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var f={};function p(){}function h(){}function d(){}var v={};s(v,i,(function(){return this}));var y=Object.getPrototypeOf,m=y&&y(y(j([])));m&&m!==e&&r.call(m,i)&&(v=m);var g=d.prototype=p.prototype=Object.create(v);function _(t){["next","throw","return"].forEach((function(e){s(t,e,(function(t){return this._invoke(e,t)}))}))}function w(t,e){function o(n,i,a,c){var s=l(t[n],t,i);if("throw"!==s.type){var u=s.arg,f=u.value;return f&&"object"==It(f)&&r.call(f,"__await")?e.resolve(f.__await).then((function(t){o("next",t,a,c)}),(function(t){o("throw",t,a,c)})):e.resolve(f).then((function(t){u.value=t,a(u)}),(function(t){return o("throw",t,a,c)}))}c(s.arg)}var i;n(this,"_invoke",{value:function(t,r){function n(){return new e((function(e,n){o(t,r,e,n)}))}return i=i?i.then(n,n):n()}})}function b(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return{value:void 0,done:!0}}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var c=x(a,r);if(c){if(c===f)continue;return c}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var s=l(t,e,r);if("normal"===s.type){if(n=r.done?"completed":"suspendedYield",s.arg===f)continue;return{value:s.arg,done:r.done}}"throw"===s.type&&(n="completed",r.method="throw",r.arg=s.arg)}}}function x(t,e){var r=e.method,n=t.iterator[r];if(void 0===n)return e.delegate=null,"throw"===r&&t.iterator.return&&(e.method="return",e.arg=void 0,x(t,e),"throw"===e.method)||"return"!==r&&(e.method="throw",e.arg=new TypeError("The iterator does not provide a '"+r+"' method")),f;var o=l(n,t.iterator,e.arg);if("throw"===o.type)return e.method="throw",e.arg=o.arg,e.delegate=null,f;var i=o.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function A(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function E(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function C(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function j(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:O}}function O(){return{value:void 0,done:!0}}return h.prototype=d,n(g,"constructor",{value:d,configurable:!0}),n(d,"constructor",{value:h,configurable:!0}),h.displayName=s(d,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===h||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,d):(t.__proto__=d,s(t,c,"GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},_(w.prototype),s(w.prototype,a,(function(){return this})),t.AsyncIterator=w,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new w(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},_(g),s(g,c,"Generator"),s(g,i,(function(){return this})),s(g,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),r=[];for(var n in e)r.push(n);return r.reverse(),function t(){for(;r.length;){var n=r.pop();if(n in e)return t.value=n,t.done=!1,t}return t.done=!0,t}},t.values=j,C.prototype={constructor:C,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(E),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type="throw",a.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var c=r.call(i,"catchLoc"),s=r.call(i,"finallyLoc");if(c&&s){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),E(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;E(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:j(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),f}},t}function kt(t,e,r,n,o,i,a){try{var c=t[i](a),s=c.value}catch(t){return void r(t)}c.done?e(s):Promise.resolve(s).then(n,o)}function Pt(t){return function(){var e=this,r=arguments;return new Promise((function(n,o){var i=t.apply(e,r);function a(t){kt(i,n,o,a,c,"next",t)}function c(t){kt(i,n,o,a,c,"throw",t)}a(void 0)}))}}jt(Lt,"GEOM_GRP_DRAW_ID","czs_geoms"),jt(Lt,"Z_INDEX_VECTORS",101),jt(Lt,"Z_INDEX_RASTERS",100),jt(Lt,"Z_INDEX_DRAWING",1e3),jt(Lt,"COLLECTION_FOOTPRINT_CRS",4617),jt(Lt,"MAP_LIMITS_X_MIN",-2750565),jt(Lt,"MAP_LIMITS_Y_MIN",-936657),jt(Lt,"MAP_LIMITS_X_MAX",3583872),jt(Lt,"MAP_LIMITS_Y_MAX",4659267),jt(Lt,"MAP_LIMITS_CRS",3978);var Tt=r(379),Nt=r.n(Tt),Gt=r(795),Dt=r.n(Gt),Mt=r(569),Rt=r.n(Mt),Ft=r(565),zt=r.n(Ft),Bt=r(216),Ut=r.n(Bt),Wt=r(589),Zt=r.n(Wt),Vt=r(991),$t={};$t.styleTagTransform=Zt(),$t.setAttributes=zt(),$t.insert=Rt().bind(null,"head"),$t.domAPI=Dt(),$t.insertStyleElement=Ut(),Nt()(Vt.Z,$t),Vt.Z&&Vt.Z.locals&&Vt.Z.locals;var qt=window.cgpv,Ht=qt.react,Yt=qt.createRoot,Xt=document.documentElement.lang||"en";Yt(document.getElementById("root")).render((0,t.jsxs)(Ht.StrictMode,{children:[(0,t.jsx)((function(){var e,r=window.cgpv,n=r.react,o=n.useEffect,i=n.useRef,a="mapCZS",c=i(!1);function s(){e.startDrawing()}function u(){return l.apply(this,arguments)}function l(){return(l=Pt(St().mark((function t(){return St().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.clearDrawingAsync();case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function f(t){return p.apply(this,arguments)}function p(){return(p=Pt(St().mark((function t(r){return St().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.extractFeaturesAsync(r);case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function h(t){return d.apply(this,arguments)}function d(){return(d=Pt(St().mark((function t(r){return St().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.zoomToCollection(r);case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function v(t){return y.apply(this,arguments)}function y(){return(y=Pt(St().mark((function t(e){return St().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:window.open(k.getQGISServiceHost()+e.org_schema+"/"+e.parent+"?service=WMS&version=1.3.0&request=GetCapabilities&LAYERS="+e.short_name,"_blank");case 1:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function m(t){return g.apply(this,arguments)}function g(){return(g=Pt(St().mark((function t(e){var r;return St().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:(r=k.getContentMetadata(e.links))&&window.open(r.href,"_blank");case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function _(t,e){return w.apply(this,arguments)}function w(){return(w=Pt(St().mark((function t(r,n){return St().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.layerOrderHigherAsync(r,n);case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function b(t,e){return x.apply(this,arguments)}function x(){return(x=Pt(St().mark((function t(r,n){return St().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.layerOrderLowerAsync(r,n);case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function A(t,e,r,n){return E.apply(this,arguments)}function E(){return(E=Pt(St().mark((function t(r,n,o,i){return St().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,e.updateCollectionCheckedAsync(r,n,o,i);case 2:case"end":return t.stop()}}),t)})))).apply(this,arguments)}return o((function(){return c.current||r.init((function(){r.api.utilities.showMessage(a,"This is a pre-alpha release. Only for experimentation purposes."),e=new Lt(r,a,document.documentElement.lang);var t={id:"AppbarPanelButtonId",tooltip:"Clip Zip Ship",tooltipPlacement:"right",children:r.react.createElement(r.ui.elements.AppsIcon)},n={panelId:"CZSPanelID",title:"Clip Zip Ship",content:r.react.createElement(ft,{handleStartDrawing:s,handleClearDrawing:u,handleExtractFeatures:f,handleZoomToCollection:h,handleViewCapabilitiesCollection:v,handleViewMetadataCollection:m,handleHigher:_,handleLower:b,handleCollectionCheckedChanged:A}),width:450};r.api.map(a).appBarButtons.createAppbarPanel(t,n,null)})),function(){return c.current=!0}}),[]),(0,t.jsx)("div",{})}),{}),(0,t.jsx)("div",{id:"mapCZS",className:"llwp-map",style:{height:"100vh"},"data-lang":Xt,"data-config":JSON.stringify({map:{interaction:"dynamic",viewSettings:{zoom:4,center:[-100,50],projection:3978},basemapOptions:{basemapId:"simple",shaded:!0,labeled:!1},listOfGeoviewLayerConfig:[]},theme:"dark",components:["north-arrow"],appBar:[],corePackages:[],suportedLanguages:["en","fr"]})})]}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,