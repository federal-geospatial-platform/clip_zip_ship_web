/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var e={991:(e,t,r)=>{r.d(t,{Z:()=>c});var n=r(537),o=r.n(n),i=r(645),a=r.n(i)()(o());a.push([e.id,".MuiPaper-root.MuiMenu-paper{background-color:#a1cdff;color:#000}","",{version:3,sources:["webpack://./src/app.scss"],names:[],mappings:"AAAA,6BACE,wBAAA,CACA,UAAA",sourcesContent:[".MuiPaper-root.MuiMenu-paper {\n  background-color: #a1cdff;\n  color: black;\n}\n"],sourceRoot:""}]);const c=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r="",n=void 0!==t[5];return t[4]&&(r+="@supports (".concat(t[4],") {")),t[2]&&(r+="@media ".concat(t[2]," {")),n&&(r+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),r+=e(t),n&&(r+="}"),t[2]&&(r+="}"),t[4]&&(r+="}"),r})).join("")},t.i=function(e,r,n,o,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(n)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(a[s]=!0)}for(var l=0;l<e.length;l++){var u=[].concat(e[l]);n&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],r=e[3];if(!r)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(o," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},418:e=>{var t=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,n=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var i,a,c=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),s=1;s<arguments.length;s++){for(var l in i=Object(arguments[s]))r.call(i,l)&&(c[l]=i[l]);if(t){a=t(i);for(var u=0;u<a.length;u++)n.call(i,a[u])&&(c[a[u]]=i[a[u]])}}return c}},251:(e,t,r)=>{r(418);var n=r(294),o=60103;if("function"==typeof Symbol&&Symbol.for){var i=Symbol.for;o=i("react.element"),i("react.fragment")}var a=n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,c=Object.prototype.hasOwnProperty,s={key:!0,ref:!0,__self:!0,__source:!0};function l(e,t,r){var n,i={},l=null,u=null;for(n in void 0!==r&&(l=""+r),void 0!==t.key&&(l=""+t.key),void 0!==t.ref&&(u=t.ref),t)c.call(t,n)&&!s.hasOwnProperty(n)&&(i[n]=t[n]);if(e&&e.defaultProps)for(n in t=e.defaultProps)void 0===i[n]&&(i[n]=t[n]);return{$$typeof:o,type:e,key:l,ref:u,props:i,_owner:a.current}}t.jsx=l,t.jsxs=l},408:(e,t,r)=>{var n=r(418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,c=60110,s=60112;t.Suspense=60113;var l=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var p=Symbol.for;o=p("react.element"),i=p("react.portal"),t.Fragment=p("react.fragment"),t.StrictMode=p("react.strict_mode"),t.Profiler=p("react.profiler"),a=p("react.provider"),c=p("react.context"),s=p("react.forward_ref"),t.Suspense=p("react.suspense"),l=p("react.memo"),u=p("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function h(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var d={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function v(e,t,r){this.props=e,this.context=t,this.refs=y,this.updater=r||d}function m(){}function g(e,t,r){this.props=e,this.context=t,this.refs=y,this.updater=r||d}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(h(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},m.prototype=v.prototype;var _=g.prototype=new m;_.constructor=g,n(_,v.prototype),_.isPureReactComponent=!0;var b={current:null},w=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var n,i={},a=null,c=null;if(null!=t)for(n in void 0!==t.ref&&(c=t.ref),void 0!==t.key&&(a=""+t.key),t)w.call(t,n)&&!x.hasOwnProperty(n)&&(i[n]=t[n]);var s=arguments.length-2;if(1===s)i.children=r;else if(1<s){for(var l=Array(s),u=0;u<s;u++)l[u]=arguments[u+2];i.children=l}if(e&&e.defaultProps)for(n in s=e.defaultProps)void 0===i[n]&&(i[n]=s[n]);return{$$typeof:o,type:e,key:a,ref:c,props:i,_owner:b.current}}function j(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var C=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function S(e,t,r,n,a){var c=typeof e;"undefined"!==c&&"boolean"!==c||(e=null);var s=!1;if(null===e)s=!0;else switch(c){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case o:case i:s=!0}}if(s)return a=a(s=e),e=""===n?"."+O(s,0):n,Array.isArray(a)?(r="",null!=e&&(r=e.replace(C,"$&/")+"/"),S(a,t,r,"",(function(e){return e}))):null!=a&&(j(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,r+(!a.key||s&&s.key===a.key?"":(""+a.key).replace(C,"$&/")+"/")+e)),t.push(a)),1;if(s=0,n=""===n?".":n+":",Array.isArray(e))for(var l=0;l<e.length;l++){var u=n+O(c=e[l],l);s+=S(c,t,r,u,a)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),l=0;!(c=e.next()).done;)s+=S(c=c.value,t,r,u=n+O(c,l++),a);else if("object"===c)throw t=""+e,Error(h(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return s}function L(e,t,r){if(null==e)return e;var n=[],o=0;return S(e,n,"","",(function(e){return t.call(r,e,o++)})),n}function I(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var k={current:null};function P(){var e=k.current;if(null===e)throw Error(h(321));return e}var T={ReactCurrentDispatcher:k,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:b,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:L,forEach:function(e,t,r){L(e,(function(){t.apply(this,arguments)}),r)},count:function(e){var t=0;return L(e,(function(){t++})),t},toArray:function(e){return L(e,(function(e){return e}))||[]},only:function(e){if(!j(e))throw Error(h(143));return e}},t.Component=v,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=T,t.cloneElement=function(e,t,r){if(null==e)throw Error(h(267,e));var i=n({},e.props),a=e.key,c=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(c=t.ref,s=b.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)w.call(t,u)&&!x.hasOwnProperty(u)&&(i[u]=void 0===t[u]&&void 0!==l?l[u]:t[u])}var u=arguments.length-2;if(1===u)i.children=r;else if(1<u){l=Array(u);for(var p=0;p<u;p++)l[p]=arguments[p+2];i.children=l}return{$$typeof:o,type:e.type,key:a,ref:c,props:i,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:c,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:s,render:e}},t.isValidElement=j,t.lazy=function(e){return{$$typeof:u,_payload:{_status:-1,_result:e},_init:I}},t.memo=function(e,t){return{$$typeof:l,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return P().useCallback(e,t)},t.useContext=function(e,t){return P().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return P().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return P().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return P().useLayoutEffect(e,t)},t.useMemo=function(e,t){return P().useMemo(e,t)},t.useReducer=function(e,t,r){return P().useReducer(e,t,r)},t.useRef=function(e){return P().useRef(e)},t.useState=function(e){return P().useState(e)},t.version="17.0.2"},294:(e,t,r)=>{e.exports=r(408)},893:(e,t,r)=>{e.exports=r(251)},379:e=>{var t=[];function r(e){for(var r=-1,n=0;n<t.length;n++)if(t[n].identifier===e){r=n;break}return r}function n(e,n){for(var i={},a=[],c=0;c<e.length;c++){var s=e[c],l=n.base?s[0]+n.base:s[0],u=i[l]||0,p="".concat(l," ").concat(u);i[l]=u+1;var f=r(p),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==f)t[f].references++,t[f].updater(h);else{var d=o(h,n);n.byIndex=c,t.splice(c,0,{identifier:p,updater:d,references:1})}a.push(p)}return a}function o(e,t){var r=t.domAPI(t);return r.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;r.update(e=t)}else r.remove()}}e.exports=function(e,o){var i=n(e=e||[],o=o||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var c=r(i[a]);t[c].references--}for(var s=n(e,o),l=0;l<i.length;l++){var u=r(i[l]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=s}}},569:e=>{var t={};e.exports=function(e,r){var n=function(e){if(void 0===t[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,r)=>{e.exports=function(e){var t=r.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(r){!function(e,t,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,o&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var i=r.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={id:n,exports:{}};return e[n](i,i.exports,r),i.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var o=n.length-1;o>-1&&!e;)e=n[o--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e})(),r.nc=void 0,(()=>{var e,t=r(893),n="czs/engine/ENGINE-LOAD_COLLECTIONS_STARTED",o="czs/engine/ENGINE-LOAD_COLLECTIONS_ENDED",i="czs/engine/ENGINE-LOAD_COLLECTIONS_FEATURES",a="czs/engine/ENGINE-LOAD_COLLECTIONS_COVERAGES",c="czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_STARTED",s="czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_FOOTPRINT",l="czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_FOOTPRINT_NO_GEOM",u="czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_ENDED",p="czs/engine/ENGINE-COLLECTION_CHANGED_STARTED",f="czs/engine/ENGINE-COLLECTION_CHANGED_ENDED",h="czs/engine/ENGINE-EXTRACT_STARTED",d="czs/engine/ENGINE-LAYER_ORDERED",y="czs/engine/ENGINE-ERROR",v="czs/engine/ENGINE_ERROR_ZOOMING_OUTSIDE",m="czs/engine/ENGINE-ERROR_SHOWING_COLLECTION",g="czs/engine/ENGINE-ERROR_EXTRACTING";function _(e){return _="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},_(e)}function b(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,E(n.key),n)}}function w(e,t,r){return t&&b(e.prototype,t),r&&b(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function x(e,t,r){return(t=E(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function E(e){var t=function(e,t){if("object"!==_(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==_(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===_(t)?t:String(t)}var j=w((function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}));e=j,x(j,"isLocal",(function(){return"localhost"===window.location.hostname})),x(j,"getPygeoapiHost",(function(){return e.isLocal()?"http://localhost:5000":PYGEOAPI_URL_ROOT})),x(j,"getQGISServiceHost",(function(){return QGIS_SERVICE_URL_ROOT})),x(j,"getContentMetadata",(function(e){var t=null;return e.forEach((function(e){"text/html"===e.type&&"canonical"===e.rel&&(t=e)})),t})),x(j,"sortAlphabetically",(function(e,t){return e<t?-1:e>t?1:0})),x(j,"delay",(function(e){return new Promise((function(t){setTimeout(t,e)}))}));const C=JSON.parse('{"czs":{"draw":"Draw extraction area","clear":"Clear extraction area","list_feature_colls":"List of vector collections","list_coverage_colls":"List of raster collections","enter_email":"Enter your email","extract_features":"Extract data","layer_options":"Options...","zoom_to":"Zoom To","view_capabilities":"View Capabilities","view_metadata":"View Metadata","layer_bring_to_front":"Bring To Front","layer_send_to_back":"Send To Back","success_extraction_completed":"Extraction completed, check your emails!","success_extraction_failed":"Extraction failed","warning_extraction_area_too_big":"Extraction area too big for collection","warning_extraction_area_missing":"Missing an extraction area, only showing the data footprints","error_some_elements_outside":"Some elements were outside map extent limits.","help_title":"Need help?","help_text":"Hi,<br/>To submit your dynamic data extraction request, you must meet the following 3 criterias in the order of your choice:<ol><li>Select one or many collections</li><li>Draw an extraction polygon on the map</li><li>Type in your email address</li><li>Optionnally, specify an EPSG</li></ol>","feedback_title":"Send us your comments/questions","feedback_text":"You want to contribute and provide feedback?<br/><br/>Contact us: <a href=\'mailto:geodiscoverydatadissemination-diffusiondesdonneesgeodecouverte@nrcan-rncan.gc.ca\'>geodiscoverydatadissemination-diffusiondesdonneesgeodecouverte@nrcan-rncan.gc.ca</a>","email_tooltip":"Enter the email on which to receive your download package link","projection_title":"Coordinate system","projection_tooltip":"Optionally, specify an EPSG number for the extracted data","project_source":"Unspecified (coordinate system of the source)","draw_tooltip":"Click to draw an extraction area on the map","clear_tooltip":"Click to clear the drawing from the map","extract_tooltip":"Click to start the extraction process"}}'),O=JSON.parse('{"czs":{"draw":"Dessiner une aire d\'extraction","clear":"Effacer l\'aire d\'extraction","list_feature_colls":"Liste des collections vectorielles","list_coverage_colls":"Liste des collections matricielles","enter_email":"Entrer votre adresse courriel","extract_features":"Extraire les données","layer_options":"Options...","zoom_to":"Cadrer la carte","view_capabilities":"Visualiser les capacités","view_metadata":"Visualiser les métadonnées","layer_bring_to_front":"Placer en avant","layer_send_to_back":"Placer en arrière","success_extraction_completed":"Extraction complété, regardez vos courriels!","success_extraction_failed":"Extraction échouée","warning_extraction_area_too_big":"Zone d\'extraction trop grande pour la collection","warning_extraction_area_missing":"Zone d\'extraction manquante, seulement les empreintes des données sont affichés","error_some_elements_outside":"Certains éléments sont en dehors de l\'étendu cartographique.","help_title":"Besoin d\'aide?","help_text":"Bonjour,<br/>Pour soumettre votre demande d\'extraction de données dynamique, il suffit de remplir les 3 conditions suivantes dans l\'ordre que vous désirez:<ol><li>Sélectionner une ou plusieurs collections</li><li>Tracer un polygone de découpage sur la carte</li><li>Entrer votre adresse courriel</li><li>Optionnellement, spécifiez un EPSG</li></ol>","feedback_title":"Envoyez-nous vos commentaires/questions","feedback_text":"Vous voulez contribuer et nous fournir votre rétro-action?<br/><br/>Contactez-nous: <a href=\'mailto:geodiscoverydatadissemination-diffusiondesdonneesgeodecouverte@nrcan-rncan.gc.ca\'>geodiscoverydatadissemination-diffusiondesdonneesgeodecouverte@nrcan-rncan.gc.ca</a>","email_tooltip":"Inscrivez le courriel où recevoir votre lien de téléchargement pour votre extraction","projection_title":"Système de coordonnées","projection_tooltip":"Optionallement, spécifiez un numéro EPSG pour les données extraites","project_source":"Non spécifié (système de coordonnées de la source)","draw_tooltip":"Cliquez pour dessiner une aire d\'extraction sur la carte","clear_tooltip":"Cliquez pour supprimer le dessin sur la carte","extract_tooltip":"Cliquez pour démarrer l\'extraction des données"}}');function S(){S=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function l(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,r){return e[t]=r}}function u(e,t,r,n){var i=t&&t.prototype instanceof m?t:m,a=Object.create(i.prototype),c=new T(n||[]);return o(a,"_invoke",{value:O(e,r,c)}),a}function p(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",d="executing",y="completed",v={};function m(){}function g(){}function _(){}var b={};l(b,a,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(A([])));x&&x!==r&&n.call(x,a)&&(b=x);var E=_.prototype=m.prototype=Object.create(b);function j(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function r(o,i,a,c){var s=p(e[o],e,i);if("throw"!==s.type){var l=s.arg,u=l.value;return u&&"object"==k(u)&&n.call(u,"__await")?t.resolve(u.__await).then((function(e){r("next",e,a,c)}),(function(e){r("throw",e,a,c)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return r("throw",e,a,c)}))}c(s.arg)}var i;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return i=i?i.then(o,o):o()}})}function O(t,r,n){var o=f;return function(i,a){if(o===d)throw new Error("Generator is already running");if(o===y){if("throw"===i)throw a;return{value:e,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var s=L(c,n);if(s){if(s===v)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===f)throw o=y,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=d;var l=p(t,r,n);if("normal"===l.type){if(o=n.done?y:h,l.arg===v)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o=y,n.method="throw",n.arg=l.arg)}}}function L(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,L(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),v;var i=p(o,t.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,v;var a=i.arg;return a?a.done?(r[t.resultName]=a.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,v):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function I(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function P(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(I,this),this.reset(!0)}function A(t){if(t||""===t){var r=t[a];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}throw new TypeError(k(t)+" is not iterable")}return g.prototype=_,o(E,"constructor",{value:_,configurable:!0}),o(_,"constructor",{value:g,configurable:!0}),g.displayName=l(_,s,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,_):(e.__proto__=_,l(e,s,"GeneratorFunction")),e.prototype=Object.create(E),e},t.awrap=function(e){return{__await:e}},j(C.prototype),l(C.prototype,c,(function(){return this})),t.AsyncIterator=C,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new C(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},j(E),l(E,s,"Generator"),l(E,a,(function(){return this})),l(E,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=A,T.prototype={constructor:T,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(P),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return c.type="throw",c.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(s&&l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),P(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;P(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:A(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),v}},t}function L(e,t,r,n,o,i,a){try{var c=e[i](a),s=c.value}catch(e){return void r(e)}c.done?t(s):Promise.resolve(s).then(n,o)}function I(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){L(i,n,o,a,c,"next",e)}function c(e){L(i,n,o,a,c,"throw",e)}a(void 0)}))}}function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function P(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,N(n.key),n)}}function T(e,t,r){return t&&P(e.prototype,t),r&&P(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function A(e,t,r){return(t=N(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function N(e){var t=function(e,t){if("object"!==k(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==k(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===k(t)?t:String(t)}var D=T((function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}));A(D,"getCollectionsPOSTAsync",function(){var e=I(S().mark((function e(t,r,n){var o;return S().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fetch("".concat(j.getPygeoapiHost(),"/collections?f=json&lang=").concat(t),{headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST",body:JSON.stringify({geom:r,"geom-crs":n})});case 3:if(200!==(o=e.sent).status){e.next=8;break}return e.next=7,o.json();case 7:return e.abrupt("return",e.sent.collections);case 8:throw console.log("Invalid status: ".concat(o.status)),Error("The server couldn't provide the collections list.");case 12:throw e.prev=12,e.t0=e.catch(0),console.error(e.t0),Error("Failed to communicate with the server to retrieve the collections.");case 16:case"end":return e.stop()}}),e,null,[[0,12]])})));return function(t,r,n){return e.apply(this,arguments)}}()),A(D,"extractFeaturesAsync",function(){var e=I(S().mark((function e(t,r,n,o,i){var a,c;return S().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,a={inputs:{geom:n,geom_crs:o,collections:t,email:r}},i&&(a.inputs.out_crs=i),e.next=5,fetch("".concat(j.getPygeoapiHost(),"/processes/extract/execution"),{headers:{Accept:"application/json","Content-Type":"application/json"},method:"POST",body:JSON.stringify(a)});case 5:if(200!==(c=e.sent).status&&201!==c.status){e.next=10;break}return e.next=9,c.json();case 9:return e.abrupt("return",e.sent);case 10:if(412!==c.status){e.next=14;break}throw Error("Please draw an extraction area.");case 14:if(413!==c.status){e.next=18;break}throw Error("Your extraction area is too big.");case 18:throw console.log("Invalid status: ".concat(c.status)),Error("The server couldn't extract the data.");case 20:e.next=26;break;case 22:throw e.prev=22,e.t0=e.catch(0),console.error(e.t0),Error("Failed to communicate with the server to extract the data.");case 26:case"end":return e.stop()}}),e,null,[[0,22]])})));return function(t,r,n,o,i){return e.apply(this,arguments)}}()),A(D,"getJobStatusAsync",function(){var e=I(S().mark((function e(t){var r,n;return S().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="".concat(j.getPygeoapiHost(),"/jobs/{jobId}?j=json").replace("{jobId}",t),e.prev=1,e.next=4,fetch(r,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"});case 4:if(200!==(n=e.sent).status){e.next=9;break}return e.next=8,n.json();case 8:return e.abrupt("return",e.sent);case 9:throw console.log("Invalid status: ".concat(n.status)),Error("The server couldn't get the job status.");case 13:throw e.prev=13,e.t0=e.catch(1),console.error(e.t0),Error("Failed to communicate with the server to check the job status.");case 17:case"end":return e.stop()}}),e,null,[[1,13]])})));return function(t){return e.apply(this,arguments)}}()),A(D,"getJobResultAsync",function(){var e=I(S().mark((function e(t){var r,n;return S().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="".concat(j.getPygeoapiHost(),"/jobs/{jobId}/results?j=json").replace("{jobId}",t),e.prev=1,e.next=4,fetch(r,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"});case 4:if(200!==(n=e.sent).status){e.next=9;break}return e.next=8,n.json();case 8:return e.abrupt("return",e.sent);case 9:throw console.log("Invalid status: ".concat(n.status)),Error("The server couldn't get the job results.");case 13:throw e.prev=13,e.t0=e.catch(1),console.error(e.t0),Error("Failed to communicate with the server to check the job results.");case 17:case"end":return e.stop()}}),e,null,[[1,13]])})));return function(t){return e.apply(this,arguments)}}()),A(D,"getFeaturesAsync",function(){var e=I(S().mark((function e(t,r,n){var o,i,a;return S().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return o="".concat(j.getPygeoapiHost(),"/collections/{collectionId}/items?f=json").replace("{collectionId}",t.id),r&&(o+="&geom=".concat(r,"&geom-crs=").concat(n,"&clip=2")),e.prev=2,e.next=5,fetch(o,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"});case 5:if(200!==(i=e.sent).status){e.next=11;break}return e.next=9,i.json();case 9:return a=e.sent,e.abrupt("return",{collection:t,data:a});case 11:if(412!==i.status){e.next=15;break}throw Error("Please draw an extraction area.");case 15:if(413!==i.status){e.next=19;break}throw Error("Your extraction area is too big.");case 19:throw console.log("Invalid status: ".concat(i.status)),Error("The server couldn't extract the data.");case 21:e.next=27;break;case 23:throw e.prev=23,e.t0=e.catch(2),console.log(e.t0),Error("Failed to communicate with the server to fetch features for collection: ".concat(t.title));case 27:case"end":return e.stop()}}),e,null,[[2,23]])})));return function(t,r,n){return e.apply(this,arguments)}}()),A(D,"getCollectionWKTAsync",function(){var e=I(S().mark((function e(t){var r,n;return S().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="".concat(j.getPygeoapiHost(),"/collections/{collectionId}?f=json").replace("{collectionId}",t.id),e.prev=1,e.next=4,fetch(r,{headers:{Accept:"application/json","Content-Type":"application/json"},method:"GET"});case 4:if(200!==(n=e.sent).status){e.next=9;break}return e.next=8,n.json();case 8:return e.abrupt("return",e.sent);case 9:throw console.log("Invalid request for wkt: ".concat(n.status)),Error("The server couldn't find the WKT for the collection.");case 13:throw e.prev=13,e.t0=e.catch(1),console.log(e.t0),Error("Failed to communicate with the server to get WKT for the collection: ".concat(t.title));case 17:case"end":return e.stop()}}),e,null,[[1,13]])})));return function(t){return e.apply(this,arguments)}}());var G={panel:{position:"relative","& .accordion-group":{fontSize:"0.9rem",marginBottom:"10px"},"& .accordion-group ul":{whiteSpace:"unset","& .MuiListItem-root:hover":{backgroundColor:"#75a7e2"}},"& .accordion-group .MuiTypography-root":{fontSize:"inherit"},"& .MuiAccordionSummary-content":{paddingLeft:"10px"},"& .MuiAccordion-root":{backgroundColor:"#005fcb52"},"& .MuiAccordion-root ul":{cursor:"pointer"},"& .MuiPaper-root.MuiMenu-paper":{backgroundColor:"#a1cdff"},"& .MuiButton-root":{border:"1px solid",margin:"20px 0px",padding:"0px"},"& .MuiButton-root.Mui-disabled":{color:"rgba(96, 96, 96, 0.3)"},"& .MuiCheckbox-colorPrimary.Mui-checked":{color:"#1b406a"},"& .text-accordion.MuiAccordion-root":{backgroundColor:"#e4b152"},"& is-debug":{backgroundColor:"red"},"& .layer-order-layers.loading":{cursor:"default",opacity:.4},"& .layer-order-layers.loading a":{pointerEvents:"none"},"& .layer-option-img, .menu-option-img":{height:"20px",width:"20px",verticalAlign:"middle",margin:"0px 5px 0px 5px"},"& .czs-jobs-cell-spin":{position:"relative",textAlign:"right",width:"30px","& img":{verticalAlign:"middle"},"& .MuiCircularProgress-root":{width:"25px !important",height:"25px !important"}},"& .czs-jobs-cell-progress":{width:"100px"},"& .czs-jobs-cell-info a":{textDecoration:"none"},"& .czs-jobs-cell-info a:hover":{textDecoration:"underline"}},inputField:{"& input":{padding:"10px 10px",fontSize:"1rem"}},selectField:{width:"100%"},accordionTheme:{"& ul":{}},accordionTextWrapper:{"& .MuiAccordion-root":{backgroundColor:"#e4b152"}},accordionText:{fontSize:"smaller",padding:"0px 10px"},layerOptionsWrapper:{},layerOption:{display:"inline-block",verticalAlign:"middle",position:"relative","& .MuiListItemIcon-root":{minWidth:"inherit"},"& div":{display:"inline-block"},"& img":{height:"20px",width:"20px",verticalAlign:"middle",margin:"0px 5px 0px 5px"}},menuOption:{"& img":{height:"20px",width:"20px",verticalAlign:"middle",margin:"0px 5px 0px 5px"}},loadingSpinnerContainer:{position:"absolute",top:"40px",right:"40px","& .loading-spinner .MuiCircularProgress-root":{width:"60px !important",height:"60px !important"},loadingSpinnerCollections:{"& .MuiCircularProgress-root":{color:"rgba(0, 95, 203, 0.666)"}},loadingSpinnerFeatures:{"& .MuiCircularProgress-root":{}}},loadingSpinnerJob:{backgroundColor:"transparent"},jobs:{position:"relative",margin:"20px 0px","& a":{color:"inherit",fontSize:"1rem"},"& table":{width:"100%"},"& .loading-spinner":{position:"relative",right:"0px",backgroundColor:"transparent","& .MuiCircularProgress-root":{position:"relative",height:"20px !important",width:"20px !important"}},"& .job-dismissed:hover":{textDecoration:"none"}}};const R=r.p+"img/download.png";function M(e){return M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},M(e)}function z(){z=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function l(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,r){return e[t]=r}}function u(e,t,r,n){var i=t&&t.prototype instanceof m?t:m,a=Object.create(i.prototype),c=new k(n||[]);return o(a,"_invoke",{value:O(e,r,c)}),a}function p(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",d="executing",y="completed",v={};function m(){}function g(){}function _(){}var b={};l(b,a,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==r&&n.call(x,a)&&(b=x);var E=_.prototype=m.prototype=Object.create(b);function j(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function r(o,i,a,c){var s=p(e[o],e,i);if("throw"!==s.type){var l=s.arg,u=l.value;return u&&"object"==M(u)&&n.call(u,"__await")?t.resolve(u.__await).then((function(e){r("next",e,a,c)}),(function(e){r("throw",e,a,c)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return r("throw",e,a,c)}))}c(s.arg)}var i;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return i=i?i.then(o,o):o()}})}function O(t,r,n){var o=f;return function(i,a){if(o===d)throw new Error("Generator is already running");if(o===y){if("throw"===i)throw a;return{value:e,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var s=S(c,n);if(s){if(s===v)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===f)throw o=y,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=d;var l=p(t,r,n);if("normal"===l.type){if(o=n.done?y:h,l.arg===v)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o=y,n.method="throw",n.arg=l.arg)}}}function S(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,S(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),v;var i=p(o,t.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,v;var a=i.arg;return a?a.done?(r[t.resultName]=a.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,v):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function I(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function P(t){if(t||""===t){var r=t[a];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}throw new TypeError(M(t)+" is not iterable")}return g.prototype=_,o(E,"constructor",{value:_,configurable:!0}),o(_,"constructor",{value:g,configurable:!0}),g.displayName=l(_,s,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,_):(e.__proto__=_,l(e,s,"GeneratorFunction")),e.prototype=Object.create(E),e},t.awrap=function(e){return{__await:e}},j(C.prototype),l(C.prototype,c,(function(){return this})),t.AsyncIterator=C,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new C(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},j(E),l(E,s,"Generator"),l(E,a,(function(){return this})),l(E,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=P,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(I),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return c.type="throw",c.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(s&&l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),I(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;I(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:P(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),v}},t}function F(e){return function(e){if(Array.isArray(e))return Z(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||V(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function U(e,t,r,n,o,i,a){try{var c=e[i](a),s=c.value}catch(e){return void r(e)}c.done?t(s):Promise.resolve(s).then(n,o)}function W(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||V(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function V(e,t){if(e){if("string"==typeof e)return Z(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?Z(e,t):void 0}}function Z(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const $=function(e){var r=window.cgpv,n=r.api,o=r.react,i=r.ui,a=r.useTranslation,c=o.useState,s=o.useEffect,l=o.useCallback,u=i.elements,p=u.Box,f=u.CircularProgress,d=u.ProgressBar,y=e.mapId,v=a(),m=v.t,g=v.i18n,_=W(c([]),2),b=_[0],w=_[1],x=W(c([]),2),E=x[0],S=x[1],L=W(c([]),2),I=L[0],k=L[1],P=W(c([]),2),T=P[0],A=P[1];function N(e){return e<10?"0".concat(e):"".concat(e)}var M,V=l((function(e){var t=N(e.getHours()),r=N(e.getMinutes()),n=N(e.getSeconds());return"".concat(t,":").concat(r,":").concat(n)}),[]),Z=function(){var e,t=(e=z().mark((function e(t,r,o,i){var a,c,s,l;return z().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:a=!1,e.prev=1;case 2:if(a){e.next=29;break}return e.next=5,D.getJobStatusAsync(t);case 5:if(c=e.sent,console.log("Job ".concat(t),c),"successful"!==c.status){e.next=17;break}return e.next=10,D.getJobResultAsync(t);case 10:return s=e.sent,o.push({jobId:t,extractUrl:s.extract_url}),S(F(o)),n.utilities.showSuccess(y,m("czs.success_extraction_completed")),e.abrupt("break",29);case 17:if("failed"!==c.status){e.next=24;break}return i.push(t),k(F(i)),n.utilities.showError(y,m("czs.success_extraction_failed")),e.abrupt("break",29);case 24:"accepted"===c.status&&(l=r.filter((function(e){return e.jobId===t}))).length>0&&(l[0].progress=c.progress,w(F(r)));case 25:return e.next=27,j.delay(2e3);case 27:e.next=2;break;case 29:e.next=35;break;case 31:e.prev=31,e.t0=e.catch(1),console.error(e.t0),n.utilities.showError(y,"Failed to get job status");case 35:case"end":return e.stop()}}),e,null,[[1,31]])})),function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){U(i,n,o,a,c,"next",e)}function c(e){U(i,n,o,a,c,"throw",e)}a(void 0)}))});return function(e,r,n,o){return t.apply(this,arguments)}}();return s((function(){console.log("IN USE EFFECT - JOB"),n.event.on(h,(function(e){var t=e.job_id;e.job_id||(t=crypto.randomUUID()),b.push({jobId:t,localDateStart:V(new Date),progress:0}),w(F(b)),e.job_id?Z(e.job_id,b,E,I):(T.push(t),A(F(T)))}),y)}),[]),s((function(){g.addResourceBundle("en","translation",C),g.addResourceBundle("fr","translation",O)}),[g]),(0,t.jsx)(p,{sx:G.jobs,children:(0,t.jsx)("table",{children:(M=b,(0,t.jsx)("tbody",{children:Object.values(M).map((function(e,r){var n=E.filter((function(t){return t.jobId===e.jobId})),o=I.filter((function(t){return t===e.jobId})),i=T.filter((function(t){return t===e.jobId}));return(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"czs-jobs-cell-info",children:n.length>0?(0,t.jsx)("a",{href:"".concat(j.getPygeoapiHost(),"/jobs/").concat(e.jobId),target:"_blank",rel:"noreferrer",children:"Extraction completed!"}):(0,t.jsx)(p,{children:i.length>0?(0,t.jsx)("span",{className:"job-dismissed",children:"Extraction queue is full!"}):(0,t.jsxs)("a",{href:"".concat(j.getPygeoapiHost(),"/jobs/").concat(e.jobId),target:"_blank",rel:"noreferrer",children:["Extraction started ",e.localDateStart," ..."]})})}),(0,t.jsx)("td",{className:"czs-jobs-cell-progress",children:0===i.length?(0,t.jsx)(p,{children:n.length>0?(0,t.jsx)(p,{}):(0,t.jsx)(p,{children:(0,t.jsx)(d,{variant:"determinate",value:e.progress})})}):(0,t.jsx)(p,{})}),(0,t.jsx)("td",{className:"czs-jobs-cell-spin",children:0===i.length?(0,t.jsxs)(p,{children:[(0,t.jsx)(f,{sx:G.loadingSpinnerJob,isLoaded:n.length>0||o.length>0}),n.length>0?(0,t.jsx)(p,{children:(0,t.jsx)("a",{href:n[0].extractUrl,target:"_blank",rel:"noreferrer",children:(0,t.jsx)("img",{src:R,alt:""})})}):(0,t.jsx)(p,{}),o.length>0?(0,t.jsx)(p,{children:(0,t.jsx)("a",{href:"".concat(j.getPygeoapiHost(),"/jobs/").concat(e.jobId,"/results?f=json"),target:"_blank",rel:"noreferrer",children:"FAILED"})}):(0,t.jsx)(p,{})]}):(0,t.jsx)(p,{})})]},r)}))}))})})},B=r.p+"img/more.png",H=r.p+"img/zoom_in.png",q=r.p+"img/stars.png",Y=r.p+"img/metadata.png",X=r.p+"img/arrow_up.png",J=r.p+"img/arrow_down.png";function Q(e){return Q="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Q(e)}function K(e){return function(e){if(Array.isArray(e))return oe(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||ne(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ee(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function te(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ee(Object(r),!0).forEach((function(t){var n,o,i;n=e,o=t,i=r[t],(o=function(e){var t=function(e,t){if("object"!==Q(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==Q(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Q(t)?t:String(t)}(o))in n?Object.defineProperty(n,o,{value:i,enumerable:!0,configurable:!0,writable:!0}):n[o]=i})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ee(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function re(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,o,i,a,c=[],s=!0,l=!1;try{if(i=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;s=!1}else for(;!(s=(n=i.call(r)).done)&&(c.push(n.value),c.length!==t);s=!0);}catch(e){l=!0,o=e}finally{try{if(!s&&null!=r.return&&(a=r.return(),Object(a)!==a))return}finally{if(l)throw o}}return c}}(e,t)||ne(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function ne(e,t){if(e){if("string"==typeof e)return oe(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?oe(e,t):void 0}}function oe(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}const ie=function(e){var r=window.cgpv,h=r.api,_=r.react,b=r.ui,w=r.useTranslation,x=_.useState,E=_.useEffect,S=b.elements,L=S.Box,I=S.Button,k=S.CircularProgress,P=S.Accordion,T=S.CheckboxListEnhanced,A=S.TextField,N=S.Menu,D=S.MenuItem,R=S.ListItem,M=S.ListItemText,z=S.ListItemIcon,F=S.Select,U=(S.TypeMenuItemProps,e.mapId),W=e.onStartDrawing,V=e.onClearDrawing,Z=e.onExtractFeatures,Q=e.onZoomToCollection,ee=e.onViewMetadataCollection,ne=e.onViewCapabilitiesCollection,oe=e.onHigher,ie=e.onLower,ae=e.onCollectionCheckedChanged,ce=w(),se=ce.t,le=ce.i18n,ue=re(x([]),2),pe=ue[0],fe=ue[1],he=re(x([]),2),de=he[0],ye=he[1],ve=re(x([]),2),me=ve[0],ge=ve[1],_e=re(x({}),2),be=_e[0],we=_e[1],xe=re(x({}),2),Ee=xe[0],je=xe[1],Ce=re(x(null),2),Oe=Ce[0],Se=Ce[1],Le=Boolean(Oe),Ie=re(x(null),2),ke=Ie[0],Pe=Ie[1],Te=re(x(j.isLocal()?"alexandre.roy@nrcan-rncan.gc.ca":null),2),Ae=Te[0],Ne=Te[1],De=re(x(!1),2),Ge=De[0],Re=De[1],Me=re(x(!1),2),ze=Me[0],Fe=Me[1],Ue=re(x([]),2),We=Ue[0],Ve=Ue[1],Ze=re(x(),2),$e=Ze[0],Be=Ze[1];function He(e){var r=(0,t.jsx)("span",{});r=(0,t.jsx)(L,{sx:G.layerOption,children:(0,t.jsx)(R,{button:!0,title:se("czs.layer_options"),onClick:function(t){!function(e,t){Pe(t),Se(e.currentTarget)}(t,e)},children:(0,t.jsx)(z,{sx:{minWidth:"10px"},children:(0,t.jsx)("img",{src:B,alt:""})})})});var n=(0,t.jsx)("span",{});return e&&be[e.id]&&(n=(0,t.jsxs)(L,{sx:G.layerOption,className:"".concat(We.includes(e.id)?"loading":""),children:[(0,t.jsx)(L,{onClick:function(){var t,r;t=e.itemType,r=e.id,null==oe||oe(t,r)},title:se("czs.layer_bring_to_front"),children:(0,t.jsx)("img",{src:X,alt:""})}),(0,t.jsx)(L,{onClick:function(){var t,r;t=e.itemType,r=e.id,null==ie||ie(t,r)},title:se("czs.layer_send_to_back"),children:(0,t.jsx)("img",{src:J,alt:""})})]})),(0,t.jsxs)(L,{sx:G.layerOptionsWrapper,children:[r,n]})}function qe(e){return e.collections&&e.collections.length>0?(0,t.jsx)(T,{multiselect:!0,listItems:Object.values(e.collections).map((function(e){return{display:e.title,value:e.id,contentRight:He(e)}})),checkedValues:me||[],checkedCallback:function(t,r,n){return function(e,t,r,n){null==ae||ae(e,t,r,n)}(e,t,r,n)}}):(0,t.jsx)(L,{})}function Ye(e,r){return e&&e.length>0?(0,t.jsx)(P,{items:Object.values(e).map((function(e){return{title:"".concat(e.parent.title," (").concat(e.collections.length,")").concat(r.filter((function(t){return t.parent.id===e.parent.id})).length>0?" *":""),content:qe(e)}}))}):(0,t.jsx)(L,{})}function Xe(e){return(0,t.jsx)(P,{sx:G.accordionTheme,items:Object.values(e).map((function(e){var t=function(e){if(!me||0===me.length)return[];var t=[];return e.parents.forEach((function(e){var r=e.collections.filter((function(e){return me.includes(e.id)}));r&&r.length>0&&t.push(e)})),t}(e);return{title:"".concat(e.theme.title," (").concat(e.parents.length,")").concat(t.length>0?" *":""),content:Ye(e.parents,t)}}))})}E((function(){return console.log("IN USE EFFECT - PANEL"),h.event.on(n,(function(e){je({active:!!e.geometry}),Re(!0)}),U),h.event.on(i,(function(e){fe(e.collections)}),U),h.event.on(a,(function(e){ye(e.collections)}),U),h.event.on(o,(function(){Re(!1)}),U),h.event.on(p,(function(e){Fe(!0),ge(e.checkedCollections)}),U),h.event.on(f,(function(e){Fe(!1),we(te({},e.viewedCollections))}),U),h.event.on(d,(function(e){Ve(K(e.collections))}),U),h.event.on(c,(function(){Fe(!0)}),U),h.event.on(s,(function(e){h.utilities.showWarning(U,"".concat(se("czs.warning_extraction_area_too_big"),": ").concat(e.collection.title))}),U),h.event.on(l,(function(){h.utilities.showWarning(U,se("czs.warning_extraction_area_missing"))}),U),h.event.on(u,(function(e){Fe(!1),we(te({},e.viewedCollections))}),U),h.event.on(y,(function(e){h.utilities.showError(U,e.error)}),U),h.event.on(v,(function(){h.utilities.showWarning(U,se("czs.error_some_elements_outside"))}),U),h.event.on(m,(function(e){h.utilities.showError(U,e.error)}),U),h.event.on(g,(function(e){h.utilities.showError(U,e.error)}),U),function(){h.event.off(n,U),h.event.off(i,U),h.event.off(a,U),h.event.off(o,U),h.event.off(p,U),h.event.off(f,U),h.event.off(d,U),h.event.off(c,U),h.event.off(s,U),h.event.off(l,U),h.event.off(u,U),h.event.off(y,U),h.event.off(v,U),h.event.off(m,U),h.event.off(g,U)}}),[h.event,h.utilities,U,se]),E((function(){le.addResourceBundle("en","translation",C),le.addResourceBundle("fr","translation",O)}),[le]);var Je=[];return[{label:se("czs.project_source"),value:void 0}].concat(K(PROJECTIONS)).forEach((function(e){Je.push({key:e.value,item:{value:e.value,children:e.label}})})),(0,t.jsxs)(L,{sx:G.panel,children:[(0,t.jsxs)(L,{children:[(0,t.jsx)(I,{type:"text",tooltip:se("czs.draw_tooltip"),tooltipPlacement:"right",onClick:function(){null==W||W()},size:"small",children:se("czs.draw")}),(0,t.jsx)(I,{type:"text",tooltip:se("czs.clear_tooltip"),tooltipPlacement:"right",onClick:function(){null==V||V()},size:"small",disabled:!Ee.active,children:se("czs.clear")})]}),(0,t.jsxs)(L,{sx:G.loadingSpinnerContainer,children:[(0,t.jsx)(k,{sx:G.loadingSpinnerContainer.loadingSpinnerCollections,isLoaded:!Ge}),(0,t.jsx)(k,{sx:G.loadingSpinnerContainer.loadingSpinnerFeatures,isLoaded:!ze})]}),(0,t.jsxs)(L,{children:[(0,t.jsx)(P,{items:[{title:se("czs.list_feature_colls"),content:Xe(pe)}]}),(0,t.jsx)(P,{items:[{title:se("czs.list_coverage_colls"),content:Xe(de)}]})]}),(0,t.jsxs)(L,{sx:{marginTop:"20px"},children:[(0,t.jsx)(L,{title:se("czs.email_tooltip"),"aria-label":se("czs.email_tooltip"),children:"Email:"}),(0,t.jsx)(A,{id:"czs_email",sx:G.inputField,type:"email",tooltip:se("czs.email_tooltip"),tooltipPlacement:"right",placeholder:se("czs.enter_email"),style:{width:"100%"},onChange:function(){return e=document.getElementById("czs_email"),void Ne(null==e?void 0:e.value);var e},value:Ae})]}),(0,t.jsx)(L,{sx:{marginTop:"20px"},children:(0,t.jsx)(F,{id:"czs_out_crs",label:se("czs.projection_title"),tooltip:se("czs.projection_tooltip"),tooltipPlacement:"right",value:$e,onChange:function(e){return t=e.target.value,void Be(t);var t},menuItems:Je,fullWidth:!0})}),(0,t.jsx)(I,{type:"text",tooltip:se("czs.extract_tooltip"),tooltipPlacement:"right",onClick:function(){null==Z||Z(Ae,$e)},size:"small",disabled:!(Object.keys(be).length&&Ae),children:se("czs.extract_features")}),(0,t.jsx)($,{mapId:U}),(0,t.jsx)(P,{sx:G.accordionTextWrapper,className:"text-accordion",items:[{title:se("czs.help_title"),content:(0,t.jsx)(L,{sx:G.accordionText,dangerouslySetInnerHTML:{__html:se("czs.help_text")}})}]}),(0,t.jsx)(P,{sx:G.accordionTextWrapper,className:"text-accordion",items:[{title:se("czs.feedback_title"),content:(0,t.jsx)(L,{sx:G.accordionText,dangerouslySetInnerHTML:{__html:se("czs.feedback_text")}})}]}),function(){var e=null;ke&&(e=j.getContentMetadata(ke.links));var r=(0,t.jsx)(D,{});return e&&(r=(0,t.jsxs)(D,{onClick:function(){return null==ee||ee(ke),void Se(null)},children:[(0,t.jsx)(z,{children:(0,t.jsx)("img",{src:Y,alt:""})}),(0,t.jsx)(M,{children:se("czs.view_metadata")})]})),(0,t.jsxs)(N,{sx:G.menuOption,anchorEl:Oe,open:Le,onClose:function(){Se(null)},children:[(0,t.jsxs)(D,{onClick:function(){return null==Q||Q(ke),void Se(null)},children:[(0,t.jsx)(z,{children:(0,t.jsx)("img",{src:H,alt:""})}),(0,t.jsx)(M,{children:se("czs.zoom_to")})]}),(0,t.jsxs)(D,{onClick:function(){return null==ne||ne(ke),void Se(null)},children:[(0,t.jsx)(z,{children:(0,t.jsx)("img",{src:q,alt:""})}),(0,t.jsx)(M,{children:se("czs.view_capabilities")})]}),r]})}()]})},ae=(new Error("timeout while waiting for mutex to become available"),new Error("mutex already locked"),new Error("request for lock canceled"));class ce{constructor(e,t=ae){this._value=e,this._cancelError=t,this._weightedQueues=[],this._weightedWaiters=[]}acquire(e=1){if(e<=0)throw new Error(`invalid weight ${e}: must be positive`);return new Promise(((t,r)=>{this._weightedQueues[e-1]||(this._weightedQueues[e-1]=[]),this._weightedQueues[e-1].push({resolve:t,reject:r}),this._dispatch()}))}runExclusive(e,t=1){return r=this,n=void 0,i=function*(){const[r,n]=yield this.acquire(t);try{return yield e(r)}finally{n()}},new((o=void 0)||(o=Promise))((function(e,t){function a(e){try{s(i.next(e))}catch(e){t(e)}}function c(e){try{s(i.throw(e))}catch(e){t(e)}}function s(t){var r;t.done?e(t.value):(r=t.value,r instanceof o?r:new o((function(e){e(r)}))).then(a,c)}s((i=i.apply(r,n||[])).next())}));var r,n,o,i}waitForUnlock(e=1){if(e<=0)throw new Error(`invalid weight ${e}: must be positive`);return new Promise((t=>{this._weightedWaiters[e-1]||(this._weightedWaiters[e-1]=[]),this._weightedWaiters[e-1].push(t),this._dispatch()}))}isLocked(){return this._value<=0}getValue(){return this._value}setValue(e){this._value=e,this._dispatch()}release(e=1){if(e<=0)throw new Error(`invalid weight ${e}: must be positive`);this._value+=e,this._dispatch()}cancel(){this._weightedQueues.forEach((e=>e.forEach((e=>e.reject(this._cancelError))))),this._weightedQueues=[]}_dispatch(){var e;for(let t=this._value;t>0;t--){const r=null===(e=this._weightedQueues[t-1])||void 0===e?void 0:e.shift();if(!r)continue;const n=this._value,o=t;this._value-=t,t=this._value+1,r.resolve([n,this._newReleaser(o)])}this._drainUnlockWaiters()}_newReleaser(e){let t=!1;return()=>{t||(t=!0,this.release(e))}}_drainUnlockWaiters(){for(let e=this._value;e>0;e--)this._weightedWaiters[e-1]&&(this._weightedWaiters[e-1].forEach((e=>e())),this._weightedWaiters[e-1]=[])}}class se{constructor(e){this._semaphore=new ce(1,e)}acquire(){return e=this,t=void 0,n=function*(){const[,e]=yield this._semaphore.acquire();return e},new((r=void 0)||(r=Promise))((function(o,i){function a(e){try{s(n.next(e))}catch(e){i(e)}}function c(e){try{s(n.throw(e))}catch(e){i(e)}}function s(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,c)}s((n=n.apply(e,t||[])).next())}));var e,t,r,n}runExclusive(e){return this._semaphore.runExclusive((()=>e()))}isLocked(){return this._semaphore.isLocked()}waitForUnlock(){return this._semaphore.waitForUnlock()}release(){this._semaphore.isLocked()&&this._semaphore.release()}cancel(){return this._semaphore.cancel()}}function le(e){return le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},le(e)}function ue(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==le(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==le(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===le(o)?o:String(o)),n)}var o}function pe(e,t,r){return t&&ue(e.prototype,t),r&&ue(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}var fe=pe((function e(t,r,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.theme=t,this.parent=r,this.collections=n}));function he(e){return he="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},he(e)}function de(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==he(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==he(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(n.key),"symbol"===he(o)?o:String(o)),n)}var o}function ye(e,t,r){return t&&de(e.prototype,t),r&&de(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}var ve=ye((function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.theme=t,this.parents=r}));const me=r.p+"img/Marker_green.png";function ge(e){return ge="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ge(e)}function _e(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function be(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?_e(Object(r),!0).forEach((function(t){Oe(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):_e(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function we(){we=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function l(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,r){return e[t]=r}}function u(e,t,r,n){var i=t&&t.prototype instanceof m?t:m,a=Object.create(i.prototype),c=new k(n||[]);return o(a,"_invoke",{value:O(e,r,c)}),a}function p(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",d="executing",y="completed",v={};function m(){}function g(){}function _(){}var b={};l(b,a,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==r&&n.call(x,a)&&(b=x);var E=_.prototype=m.prototype=Object.create(b);function j(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function r(o,i,a,c){var s=p(e[o],e,i);if("throw"!==s.type){var l=s.arg,u=l.value;return u&&"object"==ge(u)&&n.call(u,"__await")?t.resolve(u.__await).then((function(e){r("next",e,a,c)}),(function(e){r("throw",e,a,c)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return r("throw",e,a,c)}))}c(s.arg)}var i;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return i=i?i.then(o,o):o()}})}function O(t,r,n){var o=f;return function(i,a){if(o===d)throw new Error("Generator is already running");if(o===y){if("throw"===i)throw a;return{value:e,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var s=S(c,n);if(s){if(s===v)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===f)throw o=y,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=d;var l=p(t,r,n);if("normal"===l.type){if(o=n.done?y:h,l.arg===v)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o=y,n.method="throw",n.arg=l.arg)}}}function S(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,S(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),v;var i=p(o,t.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,v;var a=i.arg;return a?a.done?(r[t.resultName]=a.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,v):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function I(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function P(t){if(t||""===t){var r=t[a];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}throw new TypeError(ge(t)+" is not iterable")}return g.prototype=_,o(E,"constructor",{value:_,configurable:!0}),o(_,"constructor",{value:g,configurable:!0}),g.displayName=l(_,s,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,_):(e.__proto__=_,l(e,s,"GeneratorFunction")),e.prototype=Object.create(E),e},t.awrap=function(e){return{__await:e}},j(C.prototype),l(C.prototype,c,(function(){return this})),t.AsyncIterator=C,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new C(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},j(E),l(E,s,"Generator"),l(E,a,(function(){return this})),l(E,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=P,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(I),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return c.type="throw",c.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(s&&l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),I(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;I(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:P(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),v}},t}function xe(e,t,r,n,o,i,a){try{var c=e[i](a),s=c.value}catch(e){return void r(e)}c.done?t(s):Promise.resolve(s).then(n,o)}function Ee(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){xe(i,n,o,a,c,"next",e)}function c(e){xe(i,n,o,a,c,"throw",e)}a(void 0)}))}}function je(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,Se(n.key),n)}}function Ce(e,t,r){return t&&je(e.prototype,t),r&&je(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function Oe(e,t,r){return(t=Se(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function Se(e){var t=function(e,t){if("object"!==ge(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==ge(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ge(t)?t:String(t)}var Le=function(e,t){return e.getGeoviewLayerByIdAsync(t,!0,200,3e4)},Ie=Ce((function e(t,r){var _=this,b=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"en";!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),Oe(this,"_lang","en"),Oe(this,"_collections",[]),Oe(this,"_checkedCollections",[]),Oe(this,"_viewedCollections",{}),Oe(this,"_orderingCollections",[]),Oe(this,"__watcherLoadCollectionsCounter",0),Oe(this,"__watcherLoadCollectionsMutex",new se),Oe(this,"init",(function(){_._cgpvapi.event.on(_._cgpvapi.eventNames.MAP.EVENT_MAP_LOADED,Ee(we().mark((function t(){var r,n;return we().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return(n=null===(r=_._map.layer.geometry)||void 0===r?void 0:r.createGeometryGroup(e.GEOM_GRP_DRAW_ID)).vectorLayer.setStyle(_._cgpvapi.geoUtilities.defaultDrawingStyle("orange")),n.vectorLayer.setZIndex(e.Z_INDEX_DRAWING),_._modifInter=_._map.initModifyInteractions(e.GEOM_GRP_DRAW_ID),t.next=6,_.loadCollectionsAsync();case 6:case"end":return t.stop()}}),t)}))),_._mapID),_._cgpvapi.event.on(_._cgpvapi.eventNames.INTERACTION.EVENT_DRAW_ENDED,function(){var e=Ee(we().mark((function e(t){return we().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,_.handleDrawEndAsync(t.drawInfo);case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),_._mapID),_._cgpvapi.event.on(_._cgpvapi.eventNames.INTERACTION.EVENT_MODIFY_ENDED,function(){var e=Ee(we().mark((function e(t){return we().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,_.handleDrawChangeAsync(t.modifyInfo);case 2:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),_._mapID)})),Oe(this,"onLoadCollectionsStarted",(function(e){_._cgpvapi.event.emit({event:n,handlerName:_._mapID,geometry:e})})),Oe(this,"onLoadCollectionsEnded",(function(){_._cgpvapi.event.emit({event:o,handlerName:_._mapID})})),Oe(this,"onLoadCollectionsFeatures",(function(e){_._cgpvapi.event.emit({event:i,handlerName:_._mapID,collections:e})})),Oe(this,"onLoadCollectionsCoverages",(function(e){_._cgpvapi.event.emit({event:a,handlerName:_._mapID,collections:e})})),Oe(this,"onUpdateLayersStarted",(function(){_._cgpvapi.event.emit({event:c,handlerName:_._mapID})})),Oe(this,"onUpdateLayersEnded",(function(e){_._cgpvapi.event.emit({event:u,handlerName:_._mapID,viewedCollections:e})})),Oe(this,"onErrorZoomingOutside",(function(){_._cgpvapi.event.emit({event:v,handlerName:_._mapID})})),Oe(this,"onErrorShowingCollection",(function(e){console.log("ERROR_SHOWING_COLLECTION",e),_._cgpvapi.event.emit({event:m,handlerName:_._mapID,error:e})})),Oe(this,"onErrorExtracting",(function(e){console.log("ERROR_EXTRACTING",e),_._cgpvapi.event.emit({event:g,handlerName:_._mapID,error:e})})),Oe(this,"onError",(function(e){console.log("ERROR",e),_._cgpvapi.event.emit({event:y,handlerName:_._mapID,error:e})})),Oe(this,"startDrawing",(function(){var t;null===(t=_._map.layer.geometry)||void 0===t||t.deleteGeometriesFromGroup(e.GEOM_GRP_DRAW_ID),_._drawInter=_._map.initDrawInteractions(e.GEOM_GRP_DRAW_ID,"Polygon")})),Oe(this,"clearDrawingAsync",(function(){var t;return null===(t=_._map.layer.geometry)||void 0===t||t.deleteGeometriesFromGroup(e.GEOM_GRP_DRAW_ID),_.onStopDrawing(),_.loadCollectionsAsync()})),Oe(this,"onStopDrawing",(function(){_._drawInter&&_._drawInter.stopInteraction()})),Oe(this,"handleDrawChangeAsync",(function(e){var t=e.features.getArray()[0].getGeometry();return _.loadCollectionsAsync(t)})),Oe(this,"handleDrawEndAsync",(function(e){var t=e.feature.getGeometry();return setTimeout((function(){_.onStopDrawing()})),_._map.zoomToExtent(t.getExtent(),{padding:[100,100,100,100],duration:1e3}),_.loadCollectionsAsync(t)})),Oe(this,"updateCollectionCheckedAsync",function(){var e=Ee(we().mark((function e(t,r,n,o){var i;return we().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(e.prev=0,i=_.findCollectionFromID(r),_._checkedCollections=o,!i){e.next=13;break}if(_._cgpvapi.event.emit({event:p,handlerName:_._mapID,parentCollection:t,checkedCollections:o}),!n){e.next=11;break}return e.next=8,_.addCollectionAsync(i,_._geometry).finally((function(){_._cgpvapi.event.emit({event:f,handlerName:_._mapID,viewedCollections:_._viewedCollections})}));case 8:_._geometry||_._cgpvapi.event.emit({event:l,handlerName:_._mapID,collection:i}),e.next=13;break;case 11:_.removeCollection(i.id),_._cgpvapi.event.emit({event:f,handlerName:_._mapID,viewedCollections:_._viewedCollections});case 13:return e.abrupt("return",!0);case 16:return e.prev=16,e.t0=e.catch(0),_.onErrorShowingCollection(e.t0),e.abrupt("return",!1);case 20:case"end":return e.stop()}}),e,null,[[0,16]])})));return function(t,r,n,o){return e.apply(this,arguments)}}()),Oe(this,"layerOrderHigherAsync",(function(e,t){return _._orderingCollections.indexOf(t)>=0?Promise.resolve(!1):(_._orderingCollections.push(t),_._cgpvapi.event.emit({event:d,handlerName:_._mapID,collections:_._orderingCollections}),_.higherAsync(e,t).finally((function(){var e=_._orderingCollections.indexOf(t);e>=0&&_._orderingCollections.splice(e,1),_._cgpvapi.event.emit({event:d,handlerName:_._mapID,collections:_._orderingCollections})})))})),Oe(this,"layerOrderLowerAsync",(function(e,t){return _._orderingCollections.indexOf(t)>=0?Promise.resolve(!1):(_._orderingCollections.push(t),_._cgpvapi.event.emit({event:d,handlerName:_._mapID,collections:_._orderingCollections}),_.lowerAsync(e,t).finally((function(){var e=_._orderingCollections.indexOf(t);e>=0&&_._orderingCollections.splice(e,1),_._cgpvapi.event.emit({event:d,handlerName:_._mapID,collections:_._orderingCollections})})))})),Oe(this,"extractFeaturesAsync",function(){var e=Ee(we().mark((function e(t,r){var n;return we().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,D.extractFeaturesAsync(Object.keys(_._viewedCollections),t,_._cgpvapi.geoUtilities.geometryToWKT(_._geometry),_._map.currentProjection,r);case 3:return n=e.sent,console.log("JOB RESULT",n),_._cgpvapi.event.emit(be({event:h,handlerName:_._mapID},n)),e.abrupt("return",n);case 9:e.prev=9,e.t0=e.catch(0),_.onErrorExtracting(e.t0);case 12:return e.abrupt("return",Promise.resolve());case 13:case"end":return e.stop()}}),e,null,[[0,9]])})));return function(t,r){return e.apply(this,arguments)}}()),Oe(this,"zoomToCollection",function(){var t=Ee(we().mark((function t(r){var n,o,i,a;return we().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,D.getCollectionWKTAsync(r);case 2:n=t.sent,(o=_._cgpvapi.geoUtilities.wktToGeometry(n.wkt)).transform("EPSG:".concat(e.COLLECTION_FOOTPRINT_CRS),_._cgpvapi.projection.projections[_._map.currentProjection]),i=o.getExtent(),a=!1,i[0]<_._mapLimits[0]&&(a=!0),i[1]<_._mapLimits[1]&&(a=!0),i[2]>_._mapLimits[2]&&(a=!0),i[3]>_._mapLimits[3]&&(a=!0),_._map.zoomToExtent(i,{padding:[100,100,100,100],duration:1e3}),a&&_.onErrorZoomingOutside();case 13:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),Oe(this,"higherAsync",function(){var e=Ee(we().mark((function e(t,r){var n,o,i,a,c;return we().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("feature"!==t){e.next=6;break}return o=null===(n=_._map.layer.geometry)||void 0===n?void 0:n.getGeometryGroup(r).vectorLayer,i=o.getZIndex(),i++,o.setZIndex(i),e.abrupt("return",!0);case 6:return e.next=8,Le(_._map.layer,r);case 8:return a=e.sent,c=a.gvLayers.getZIndex(),c++,a.gvLayers.setZIndex(c),e.abrupt("return",!0);case 13:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}()),Oe(this,"lowerAsync",function(){var e=Ee(we().mark((function e(t,r){var n,o,i,a,c;return we().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if("feature"!==t){e.next=6;break}return o=null===(n=_._map.layer.geometry)||void 0===n?void 0:n.getGeometryGroup(r).vectorLayer,i=o.getZIndex(),i--,o.setZIndex(i),e.abrupt("return",!0);case 6:return e.next=8,Le(_._map.layer,r);case 8:return a=e.sent,c=a.gvLayers.getZIndex(),c--,a.gvLayers.setZIndex(c),e.abrupt("return",!0);case 13:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}()),Oe(this,"findCollectionFromID",(function(e){var t=[];return(t=t.concat(_._collections.filter((function(t){return t.id===e})))).length>0?t[0]:null})),Oe(this,"adjustExtentOnLayerID",(function(e,t){var r;t&&(r=t.getExtent()),e.olLayers.setExtent(r),e.olLayers.setVisible(!1),e.olLayers.setVisible(!0)})),Oe(this,"loadCollectionsAsync",function(){var e=Ee(we().mark((function e(t){var r,n,o,i,a;return we().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return _.__watcherLoadCollectionsCounter++,r=_.__watcherLoadCollectionsCounter,e.next=4,_.__watcherLoadCollectionsMutex.acquire();case 4:if(n=e.sent,e.prev=5,r!==_.__watcherLoadCollectionsCounter){e.next=29;break}return e.prev=7,_._geometry=t,_.onLoadCollectionsStarted(_._geometry),e.next=12,D.getCollectionsPOSTAsync("".concat(_._lang,"-CA"),_._cgpvapi.geoUtilities.geometryToWKT(_._geometry),_._map.currentProjection);case 12:return o=e.sent,_._collections=[],i=[],a=[],o.forEach((function(e){var t;if("feature"===e.itemType?t=i:"coverage"===e.itemType&&(t=a),t){var r,n,o=null===(r=t)||void 0===r?void 0:r.find((function(t){return t.theme.id===e.theme}));o||(o=new ve({id:e.theme,title:e.theme},[]),t.push(o));var c=null===(n=o.parents)||void 0===n?void 0:n.find((function(t){return t.parent.id===e.parent}));c||(c=new fe(o.theme,{id:e.parent,title:e.parent_title},[]),o.parents.push(c)),c.collections.push(e),_._collections.push(e)}})),i.sort((function(e,t){return j.sortAlphabetically(e.theme.title,t.theme.title)})),a.sort((function(e,t){return j.sortAlphabetically(e.theme.title,t.theme.title)})),i.forEach((function(e){e.parents.sort((function(e,t){return j.sortAlphabetically(e.parent.title,t.parent.title)})),e.parents.forEach((function(e){e.collections.sort((function(e,t){return j.sortAlphabetically(e.title,t.title)}))}))})),a.forEach((function(e){e.parents.sort((function(e,t){return j.sortAlphabetically(e.parent.title,t.parent.title)})),e.parents.forEach((function(e){e.collections.sort((function(e,t){return j.sortAlphabetically(e.title,t.title)}))}))})),_.onLoadCollectionsFeatures(i),_.onLoadCollectionsCoverages(a),e.next=25,_.updateLayersOnMapAsync(t);case 25:return e.prev=25,_.onLoadCollectionsEnded(),e.finish(25);case 28:return e.abrupt("return",!0);case 29:return e.abrupt("return",!1);case 32:return e.prev=32,e.t0=e.catch(5),_.onError(e.t0),e.abrupt("return",!1);case 36:return e.prev=36,n(),e.finish(36);case 39:case"end":return e.stop()}}),e,null,[[5,32,36,39],[7,,25,28]])})));return function(t){return e.apply(this,arguments)}}()),Oe(this,"updateLayersOnMapAsync",function(){var e=Ee(we().mark((function e(t){var r;return we().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,_.onUpdateLayersStarted(),r=[],_._checkedCollections.forEach((function(e){var n=_.findCollectionFromID(e);if(n){var o=_.addCollectionAsync(n,t);r.push(o)}else _._viewedCollections[e]&&_.removeCollection(e)})),e.next=6,Promise.all(r);case 6:return e.abrupt("return",!0);case 7:return e.prev=7,_.onUpdateLayersEnded(_._viewedCollections),e.finish(7);case 10:case"end":return e.stop()}}),e,null,[[0,,7,10]])})));return function(t){return e.apply(this,arguments)}}()),Oe(this,"getAreaInKm2",(function(e){return _._cgpvapi.geoUtilities.getArea(e,{projection:_._map.getView().getProjection().getCode()})/1e6})),Oe(this,"addCollectionAsync",function(){var e=Ee(we().mark((function e(t,r){return we().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!(r&&_.getAreaInKm2(r)<=t.max_extract_area)){e.next=11;break}if("feature"!==t.itemType){e.next=7;break}return _.removeCollection(t.id),e.next=5,_.addCollectionVectorAsync(t,r);case 5:e.next=9;break;case 7:return e.next=9,_.addCollectionRasterAsync(t,r);case 9:e.next=14;break;case 11:_.removeCollection(t.id),_.addFingerprintCollectionAsync(t),r&&_._cgpvapi.event.emit({event:s,handlerName:_._mapID,collection:t});case 14:return e.abrupt("return",!0);case 15:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}()),Oe(this,"addCollectionVectorAsync",function(){var t=Ee(we().mark((function t(r,n){var o,i,a,c;return we().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,D.getFeaturesAsync(r,_._cgpvapi.geoUtilities.geometryToWKT(n),_._map.currentProjection);case 2:return(o=t.sent).data.features&&o.data.features.length>0&&((c=null===(i=_._map.layer.geometry)||void 0===i?void 0:i.createGeometryGroup(r.id)).vectorLayer.setZIndex(e.Z_INDEX_VECTORS),null===(a=_._map.layer.geometry)||void 0===a||a.setActiveGeometryGroup(r.id),_._viewedCollections[r.id]={type:"feature",info:c},_.loadFeaturesInGroup(o.data.features,parseInt(r.crs[0],10),"blue","green"),_._cgpvapi.event.emit({event:"czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_FEATURES",handlerName:_._mapID,collection:r})),t.abrupt("return",!0);case 5:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}()),Oe(this,"addCollectionRasterAsync",function(){var t=Ee(we().mark((function t(r,n){var o,i,a;return we().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(!_._viewedCollections[r.id]||"raster"!==_._viewedCollections[r.id].type){t.next=7;break}return t.next=3,Le(_._map.layer,r.id);case 3:o=t.sent,_.adjustExtentOnLayerID(o,n),t.next=19;break;case 7:return _.removeCollection(r.id),i={geoviewLayerType:"ogcWms",geoviewLayerId:r.id,geoviewLayerName:{en:r.title,fr:r.title},metadataAccessPath:{en:"".concat(j.getQGISServiceHost()+r.org_schema,"/").concat(r.parent),fr:"".concat(j.getQGISServiceHost()+r.org_schema,"/").concat(r.parent)},listOfLayerEntryConfig:[{layerId:r.short_name,layerName:{en:r.title,fr:r.title},source:{dataProjection:"EPSG:4326"}}]},r.crs&&r.crs.length>0&&Number.isInteger(r.crs[0])&&(i.listOfLayerEntryConfig[0].source.dataProjection="EPSG:".concat(r.crs[0])),j.isLocal()&&(i.metadataAccessPath={en:"https://maps.geogratis.gc.ca/wms/hydro_network_en",fr:"https://maps.geogratis.gc.ca/wms/hydro_network_en"},i.listOfLayerEntryConfig[0].layerId="hydro_network",i.listOfLayerEntryConfig[0].layerName={en:"hydro_network",fr:"hydro_network"}),_._map.layer.addGeoviewLayer(i),_._viewedCollections[r.id]={type:"raster",info:i},t.next=15,Le(_._map.layer,r.id);case 15:a=t.sent,_.adjustExtentOnLayerID(a,n),a.olLayers.setZIndex(e.Z_INDEX_RASTERS),_._cgpvapi.event.emit({event:"czs/engine/ENGINE-UPDATE_VIEWED_COLLECTIONS_COVERAGES",handlerName:_._mapID,collection:r});case 19:return t.abrupt("return",!0);case 20:case"end":return t.stop()}}),t)})));return function(e,r){return t.apply(this,arguments)}}()),Oe(this,"addFingerprintCollectionAsync",function(){var t=Ee(we().mark((function t(r){var n,o,i;return we().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,D.getCollectionWKTAsync(r);case 2:i=t.sent,(null===(n=_._map.layer.geometry)||void 0===n?void 0:n.createGeometryGroup(r.id)).vectorLayer.setZIndex(e.Z_INDEX_VECTORS),null===(o=_._map.layer.geometry)||void 0===o||o.setActiveGeometryGroup(r.id),_.loadFeaturesInGroup([i.wkt],e.COLLECTION_FOOTPRINT_CRS,"red","red");case 7:case"end":return t.stop()}}),t)})));return function(e){return t.apply(this,arguments)}}()),Oe(this,"removeCollection",(function(e){var t,r;if(null!==(t=_._map.layer.geometry)&&void 0!==t&&t.getGeometryGroup(e)&&(null===(r=_._map.layer.geometry)||void 0===r||r.deleteGeometryGroup(e)),_._viewedCollections.hasOwnProperty(e)){var n=_._viewedCollections[e];"raster"===n.type&&_._map.layer.removeGeoviewLayer(n.info),delete _._viewedCollections[e]}})),Oe(this,"loadFeaturesInGroup",(function(e,t,r,n){e.forEach((function(e){var o,i;if("LineString"===(o=e.geometry?_._cgpvapi.geoUtilities.geojsonToGeometry(e.geometry):_._cgpvapi.geoUtilities.wktToGeometry(e)).getType())null===(i=_._map.layer.geometry)||void 0===i||i.addPolyline(o.getCoordinates(),{projection:t,style:{strokeColor:r,strokeOpacity:.5,strokeWidth:1}});else if("MultiLineString"===o.getType())o.getLineStrings().forEach((function(e){var n;null===(n=_._map.layer.geometry)||void 0===n||n.addPolyline(e.getCoordinates(),{projection:t,style:{strokeColor:r,strokeOpacity:1,strokeWidth:1,fillColor:r,fillOpacity:.05}})}));else if("Point"===o.getType()){var a;null===(a=_._map.layer.geometry)||void 0===a||a.addMarkerIcon(o.getCoordinates(),{projection:t,style:{anchor:[.5,256],size:[256,256],scale:.1,anchorXUnits:"fraction",anchorYUnits:"pixels",src:me}})}else if("MultiPoint"===o.getType())o.getPoints().forEach((function(e){var r;null===(r=_._map.layer.geometry)||void 0===r||r.addMarkerIcon(e.getCoordinates(),{projection:t,style:{anchor:[.5,256],size:[256,256],scale:.1,anchorXUnits:"fraction",anchorYUnits:"pixels",src:me}})}));else if("Polygon"===o.getType()){var c;null===(c=_._map.layer.geometry)||void 0===c||c.addPolygon(o.getCoordinates(),{projection:t,style:{strokeColor:r,strokeOpacity:1,strokeWidth:1,fillColor:r,fillOpacity:.05}})}else"MultiPolygon"===o.getType()?o.getPolygons().forEach((function(e){var n;null===(n=_._map.layer.geometry)||void 0===n||n.addPolygon(e.getCoordinates(),{projection:t,style:{strokeColor:r,strokeOpacity:1,strokeWidth:1,fillColor:r,fillOpacity:.05}})})):console.log("Unknown geometry type",o.getType());if(e.geometry_clipped)if("LineString"===e.geometry_clipped.type)Array.isArray(e.geometry_clipped.coordinates[0])&&Array.isArray(e.geometry_clipped.coordinates[0][0])||(e.geometry_clipped.coordinates=[e.geometry_clipped.coordinates]),e.geometry_clipped.coordinates.forEach((function(e){var r;null===(r=_._map.layer.geometry)||void 0===r||r.addPolyline(e,{projection:t,style:{strokeColor:n,strokeWidth:1.5}})}));else if("MultiLineString"===e.geometry_clipped.type)e.geometry_clipped.coordinates.forEach((function(e){var r;null===(r=_._map.layer.geometry)||void 0===r||r.addPolyline(e,{projection:t,style:{strokeColor:n,strokeWidth:1.5,fillColor:n,fillOpacity:.3}})}));else if("Polygon"===e.geometry_clipped.type){var s;null===(s=_._map.layer.geometry)||void 0===s||s.addPolygon(e.geometry_clipped.coordinates,{projection:t,style:{strokeColor:n,strokeWidth:1.5,fillColor:n,fillOpacity:.3}})}else"MultiPolygon"===e.geometry_clipped.type?e.geometry_clipped.coordinates.forEach((function(e){var r;null===(r=_._map.layer.geometry)||void 0===r||r.addPolygon(e,{projection:t,style:{strokeColor:n,strokeWidth:1.5,fillColor:n,fillOpacity:.3}})})):"Point"===e.geometry_clipped.type||"MultiPoint"===e.geometry_clipped.type||console.log("Ignored geometry clipped type",e.geometry_clipped.type)}))})),this._cgpvapi=t.api,this._mapID=r,this._map=this._cgpvapi.maps[r],this._lang=b,this._mapLimits=this._cgpvapi.geoUtilities.getExtent([e.MAP_LIMITS_X_MIN,e.MAP_LIMITS_Y_MIN,e.MAP_LIMITS_X_MAX,e.MAP_LIMITS_Y_MAX],e.MAP_LIMITS_CRS,this._map.currentProjection),this.init()}));function ke(e){return ke="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ke(e)}function Pe(){Pe=function(){return t};var e,t={},r=Object.prototype,n=r.hasOwnProperty,o=Object.defineProperty||function(e,t,r){e[t]=r.value},i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",c=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag";function l(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,r){return e[t]=r}}function u(e,t,r,n){var i=t&&t.prototype instanceof m?t:m,a=Object.create(i.prototype),c=new k(n||[]);return o(a,"_invoke",{value:O(e,r,c)}),a}function p(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=u;var f="suspendedStart",h="suspendedYield",d="executing",y="completed",v={};function m(){}function g(){}function _(){}var b={};l(b,a,(function(){return this}));var w=Object.getPrototypeOf,x=w&&w(w(P([])));x&&x!==r&&n.call(x,a)&&(b=x);var E=_.prototype=m.prototype=Object.create(b);function j(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function r(o,i,a,c){var s=p(e[o],e,i);if("throw"!==s.type){var l=s.arg,u=l.value;return u&&"object"==ke(u)&&n.call(u,"__await")?t.resolve(u.__await).then((function(e){r("next",e,a,c)}),(function(e){r("throw",e,a,c)})):t.resolve(u).then((function(e){l.value=e,a(l)}),(function(e){return r("throw",e,a,c)}))}c(s.arg)}var i;o(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,o){r(e,n,t,o)}))}return i=i?i.then(o,o):o()}})}function O(t,r,n){var o=f;return function(i,a){if(o===d)throw new Error("Generator is already running");if(o===y){if("throw"===i)throw a;return{value:e,done:!0}}for(n.method=i,n.arg=a;;){var c=n.delegate;if(c){var s=S(c,n);if(s){if(s===v)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(o===f)throw o=y,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);o=d;var l=p(t,r,n);if("normal"===l.type){if(o=n.done?y:h,l.arg===v)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(o=y,n.method="throw",n.arg=l.arg)}}}function S(t,r){var n=r.method,o=t.iterator[n];if(o===e)return r.delegate=null,"throw"===n&&t.iterator.return&&(r.method="return",r.arg=e,S(t,r),"throw"===r.method)||"return"!==n&&(r.method="throw",r.arg=new TypeError("The iterator does not provide a '"+n+"' method")),v;var i=p(o,t.iterator,r.arg);if("throw"===i.type)return r.method="throw",r.arg=i.arg,r.delegate=null,v;var a=i.arg;return a?a.done?(r[t.resultName]=a.value,r.next=t.nextLoc,"return"!==r.method&&(r.method="next",r.arg=e),r.delegate=null,v):a:(r.method="throw",r.arg=new TypeError("iterator result is not an object"),r.delegate=null,v)}function L(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function I(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function k(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(L,this),this.reset(!0)}function P(t){if(t||""===t){var r=t[a];if(r)return r.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var o=-1,i=function r(){for(;++o<t.length;)if(n.call(t,o))return r.value=t[o],r.done=!1,r;return r.value=e,r.done=!0,r};return i.next=i}}throw new TypeError(ke(t)+" is not iterable")}return g.prototype=_,o(E,"constructor",{value:_,configurable:!0}),o(_,"constructor",{value:g,configurable:!0}),g.displayName=l(_,s,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,_):(e.__proto__=_,l(e,s,"GeneratorFunction")),e.prototype=Object.create(E),e},t.awrap=function(e){return{__await:e}},j(C.prototype),l(C.prototype,c,(function(){return this})),t.AsyncIterator=C,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new C(u(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},j(E),l(E,s,"Generator"),l(E,a,(function(){return this})),l(E,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=P,k.prototype={constructor:k,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(I),!t)for(var r in this)"t"===r.charAt(0)&&n.call(this,r)&&!isNaN(+r.slice(1))&&(this[r]=e)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var r=this;function o(n,o){return c.type="throw",c.arg=t,r.next=n,o&&(r.method="next",r.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],c=a.completion;if("root"===a.tryLoc)return o("end");if(a.tryLoc<=this.prev){var s=n.call(a,"catchLoc"),l=n.call(a,"finallyLoc");if(s&&l){if(this.prev<a.catchLoc)return o(a.catchLoc,!0);if(this.prev<a.finallyLoc)return o(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return o(a.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return o(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),v},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),I(r),v}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var o=n.arg;I(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,r,n){return this.delegate={iterator:P(t),resultName:r,nextLoc:n},"next"===this.method&&(this.arg=e),v}},t}function Te(e,t,r,n,o,i,a){try{var c=e[i](a),s=c.value}catch(e){return void r(e)}c.done?t(s):Promise.resolve(s).then(n,o)}function Ae(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var i=e.apply(t,r);function a(e){Te(i,n,o,a,c,"next",e)}function c(e){Te(i,n,o,a,c,"throw",e)}a(void 0)}))}}Oe(Ie,"GEOM_GRP_DRAW_ID","czs_geoms"),Oe(Ie,"Z_INDEX_VECTORS",101),Oe(Ie,"Z_INDEX_RASTERS",100),Oe(Ie,"Z_INDEX_DRAWING",1e3),Oe(Ie,"COLLECTION_FOOTPRINT_CRS",4617),Oe(Ie,"MAP_LIMITS_X_MIN",-2750565),Oe(Ie,"MAP_LIMITS_Y_MIN",-936657),Oe(Ie,"MAP_LIMITS_X_MAX",3583872),Oe(Ie,"MAP_LIMITS_Y_MAX",4659267),Oe(Ie,"MAP_LIMITS_CRS",3978);var Ne=r(379),De=r.n(Ne),Ge=r(795),Re=r.n(Ge),Me=r(569),ze=r.n(Me),Fe=r(565),Ue=r.n(Fe),We=r(216),Ve=r.n(We),Ze=r(589),$e=r.n(Ze),Be=r(991),He={};He.styleTagTransform=$e(),He.setAttributes=Ue(),He.insert=ze().bind(null,"head"),He.domAPI=Re(),He.insertStyleElement=Ve(),De()(Be.Z,He),Be.Z&&Be.Z.locals&&Be.Z.locals;var qe=window.cgpv,Ye=qe.react,Xe=qe.createRoot,Je="mapCZS",Qe=document.documentElement.lang||"en";Xe(document.getElementById("root")).render((0,t.jsxs)(Ye.StrictMode,{children:[(0,t.jsx)((function(e){var r,n=window.cgpv,o=n.react,i=o.useEffect,a=o.useRef,c=e.mapId,s=a(!1);function l(){return(l=Ae(Pe().mark((function e(){return Pe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.clearDrawingAsync();case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function u(){return(u=Ae(Pe().mark((function e(t,n){return Pe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.extractFeaturesAsync(t,n);case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function p(){return(p=Ae(Pe().mark((function e(t){return Pe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.zoomToCollection(t);case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function f(){return(f=Ae(Pe().mark((function e(t,n){return Pe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.layerOrderHigherAsync(t,n);case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function h(){return(h=Ae(Pe().mark((function e(t,n){return Pe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.layerOrderLowerAsync(t,n);case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}function d(){return(d=Ae(Pe().mark((function e(t,n,o,i){return Pe().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.updateCollectionCheckedAsync(t,n,o,i);case 2:case"end":return e.stop()}}),e)})))).apply(this,arguments)}return i((function(){return s.current||n.init((function(){var e;n.api.utilities.showMessage(c,"This is a pre-alpha release. Only for experimentation purposes.");var o={id:"AppbarPanelButtonId",tooltip:"Clip Zip Ship",tooltipPlacement:"right",children:n.react.createElement(n.ui.elements.AppsIcon)};r=new Ie(n,c,document.documentElement.lang);var i=n.api.maps[c].appBarButtons.createAppbarPanel(o,{panelId:"CZSPanelID",title:"Clip Zip Ship v0.2.5",width:850},null);null==i||null===(e=i.panel)||void 0===e||e.changeContent((0,t.jsx)(ie,{mapId:c,onStartDrawing:function(){r.startDrawing()},onClearDrawing:function(){return function(){return l.apply(this,arguments)}()},onExtractFeatures:function(e,t){return function(e,t){return u.apply(this,arguments)}(e,t)},onZoomToCollection:function(e){return function(e){return p.apply(this,arguments)}(e)},onViewCapabilitiesCollection:function(e){return function(e){window.open("".concat(j.getQGISServiceHost()+e.org_schema,"/").concat(e.parent,"?service=WMS&version=1.3.0&request=GetCapabilities&LAYERS=").concat(e.short_name),"_blank")}(e)},onViewMetadataCollection:function(e){return function(e){var t=j.getContentMetadata(e.links);t&&window.open(t.href,"_blank")}(e)},onHigher:function(e,t){return function(e,t){return f.apply(this,arguments)}(e,t)},onLower:function(e,t){return function(e,t){return h.apply(this,arguments)}(e,t)},onCollectionCheckedChanged:function(e,t,r,n){return function(e,t,r,n){return d.apply(this,arguments)}(e,t,r,n)}}))})),function(){s.current=!0}}),[]),(0,t.jsx)("div",{})}),{mapId:Je}),(0,t.jsx)("div",{id:Je,className:"llwp-map",style:{height:"100vh"},"data-lang":Qe,"data-config":JSON.stringify({map:{interaction:"dynamic",viewSettings:{zoom:6,center:[-100,55],projection:3978},basemapOptions:{basemapId:"simple",shaded:!0,labeled:!1},listOfGeoviewLayerConfig:[]},theme:"light",components:["north-arrow"],appBar:[],corePackages:[],suportedLanguages:["en","fr"]})})]}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,